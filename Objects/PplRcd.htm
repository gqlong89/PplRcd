<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\PplRcd.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\PplRcd.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Jan 13 22:21:35 2018
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MdlChn_setData &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[57]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">rt_alloc_box</a><BR>
 <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DebugMon_Handler</a><BR>
 <LI><a href="#[2d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[132]">Except_raise</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[132]">Except_raise</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[87]">Ch376_intr</a> from ch376.o(i.Ch376_intr) referenced from ch376.o(i.Init_Ch376)
 <LI><a href="#[4]">ClearLcd</a> from dev_lcdusartgpu.o(i.ClearLcd) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[6e]">Close_devSpi</a> from dev_spi.o(i.Close_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[5c]">Close_dev_IIC</a> from dev_iic.o(i.Close_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[26]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel2_IRQHandler</a> from drive_uart.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel4_IRQHandler</a> from drive_uart.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel7_IRQHandler</a> from drive_uart.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ab]">Deal_status</a> from usb.o(i.Deal_status) referenced from usb.o(i.USB_Init)
 <LI><a href="#[18]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b5]">DevGpioClose</a> from device_gpio.o(i.DevGpioClose) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[b8]">DevGpioIoctol</a> from device_gpio.o(i.DevGpioIoctol) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[b4]">DevGpioOpen</a> from device_gpio.o(i.DevGpioOpen) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[b6]">DevGpioRead</a> from device_gpio.o(i.DevGpioRead) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[b9]">DevGpioTest</a> from device_gpio.o(i.DevGpioTest) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[b7]">DevGpioWrite</a> from device_gpio.o(i.DevGpioWrite) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[62]">Dev_Uart_close</a> from dev_uart.o(i.Dev_Uart_close) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[65]">Dev_Uart_ioctol</a> from dev_uart.o(i.Dev_Uart_ioctol) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[61]">Dev_Uart_open</a> from dev_uart.o(i.Dev_Uart_open) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[63]">Dev_Uart_read</a> from dev_uart.o(i.Dev_Uart_read) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[66]">Dev_Uart_test</a> from dev_uart.o(i.Dev_Uart_test) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[64]">Dev_Uart_write</a> from dev_uart.o(i.Dev_Uart_write) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[2]">Dev_UsartInit</a> from dev_lcdusartgpu.o(i.Dev_UsartInit) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[3]">Dev_UsartdeInit</a> from dev_lcdusartgpu.o(i.Dev_UsartdeInit) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[88]">DoUpdate</a> from model.o(i.DoUpdate) referenced from model.o(i.Mdl_notify)
 <LI><a href="#[85]">Draw_self</a> from glyph.o(i.Draw_self) referenced from glyph.o(i.Glyph_ctor)
 <LI><a href="#[75]">EFS_Lseek</a> from easy_fs.o(i.EFS_Lseek) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[7a]">EFS_Shutdown</a> from easy_fs.o(i.EFS_Shutdown) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[74]">EFS_close</a> from easy_fs.o(i.EFS_close) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[78]">EFS_delete</a> from easy_fs.o(i.EFS_delete) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[7b]">EFS_file_info</a> from easy_fs.o(i.EFS_file_info) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[73]">EFS_open</a> from easy_fs.o(i.EFS_open) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[76]">EFS_read</a> from easy_fs.o(i.EFS_read) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[79]">EFS_resize</a> from easy_fs.o(i.EFS_resize) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[77]">EFS_write</a> from easy_fs.o(i.EFS_write) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from drive_gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from drive_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from drive_gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from drive_gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from drive_gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from drive_gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from drive_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7e]">FM25_Erase</a> from fm25.o(i.FM25_Erase) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[81]">FM25_Flush</a> from fm25.o(i.FM25_Flush) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[7d]">FM25_WP</a> from fm25.o(i.FM25_WP) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[7f]">FM25_Write</a> from fm25.o(i.FM25_Write) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[7c]">FM25_info</a> from fm25.o(i.FM25_info) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[80]">FM25_rd_data</a> from fm25.o(i.FM25_rd_data) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[4b]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">GetScrnSize</a> from dev_lcdusartgpu.o(i.GetScrnSize) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[83]">GhTxt_GetSize</a> from gh_txt.o(i.GhTxt_GetSize) referenced from gh_txt.o(i.GhTxt_ctor)
 <LI><a href="#[82]">GhTxt_vDraw</a> from gh_txt.o(i.GhTxt_vDraw) referenced from gh_txt.o(i.GhTxt_ctor)
 <LI><a href="#[bb]">GpioDeInit</a> from drive_gpio.o(i.GpioDeInit) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[ba]">GpioInit</a> from drive_gpio.o(i.GpioInit) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[bc]">GpioRead</a> from drive_gpio.o(i.GpioRead) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[bf]">GpioSetEncode</a> from drive_gpio.o(i.GpioSetEncode) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[be]">GpioSetIrqHdl</a> from drive_gpio.o(i.GpioSetIrqHdl) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[c1]">GpioTest</a> from drive_gpio.o(i.GpioTest) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[bd]">GpioWrite</a> from drive_gpio.o(i.GpioWrite) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[c0]">Gpio_control_irq</a> from drive_gpio.o(i.Gpio_control_irq) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[7]">GpuBKColor</a> from dev_lcdusartgpu.o(i.GpuBKColor) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[d]">GpuBPic</a> from dev_lcdusartgpu.o(i.GpuBPic) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[8]">GpuBox</a> from dev_lcdusartgpu.o(i.GpuBox) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[c]">GpuCutPicture</a> from dev_lcdusartgpu.o(i.GpuCutPicture) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[e]">GpuDone</a> from dev_lcdusartgpu.o(i.GpuDone) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[f]">GpuIcon</a> from dev_lcdusartgpu.o(i.GpuIcon) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[6]">GpuLabel</a> from dev_lcdusartgpu.o(i.GpuLabel) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[b]">GpuPic</a> from dev_lcdusartgpu.o(i.GpuPic) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[9]">GpuStrSize</a> from dev_lcdusartgpu.o(i.GpuStrSize) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[5]">GpuWrString</a> from dev_lcdusartgpu.o(i.GpuWrString) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[13]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[84]">Init</a> from glyph.o(i.Init) referenced from glyph.o(i.Glyph_ctor)
 <LI><a href="#[71]">Ioctol_devSpi</a> from dev_spi.o(i.Ioctol_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[5f]">Ioctol_dev_IIC</a> from dev_iic.o(i.Ioctol_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[95]">MdlChn_getData</a> from model_channel.o(i.MdlChn_getData) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[92]">MdlChn_init</a> from model_channel.o(i.MdlChn_init) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[99]">MdlChn_modify_sconf</a> from model_channel.o(i.MdlChn_modify_sconf) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[93]">MdlChn_run</a> from model_channel.o(i.MdlChn_run) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[94]">MdlChn_self_check</a> from model_channel.o(i.MdlChn_self_check) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[96]">MdlChn_setData</a> from model_channel.o(i.MdlChn_setData) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[9a]">MdlChn_set_by_string</a> from model_channel.o(i.MdlChn_set_by_string) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[98]">MdlChn_to_percentage</a> from model_channel.o(i.MdlChn_to_percentage) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[97]">MdlChn_to_string</a> from model_channel.o(i.MdlChn_to_string) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[89]">MdlTest_init</a> from modeltest.o(i.MdlTest_init) referenced from modeltest.o(i.ModelTest_ctor)
 <LI><a href="#[8c]">MdlTest_to_percentage</a> from modeltest.o(i.MdlTest_to_percentage) referenced from modeltest.o(i.ModelTest_ctor)
 <LI><a href="#[8b]">MdlTest_to_string</a> from modeltest.o(i.MdlTest_to_string) referenced from modeltest.o(i.ModelTest_ctor)
 <LI><a href="#[8a]">MdlTests_getData</a> from modeltest.o(i.MdlTests_getData) referenced from modeltest.o(i.ModelTest_ctor)
 <LI><a href="#[8f]">MdlTime_getData</a> from modeltime.o(i.MdlTime_getData) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[8d]">MdlTime_init</a> from modeltime.o(i.MdlTime_init) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[8e]">MdlTime_run</a> from modeltime.o(i.MdlTime_run) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[90]">MdlTime_set_by_string</a> from modeltime.o(i.MdlTime_set_by_string) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[91]">MdlTime_to_string</a> from modeltime.o(i.MdlTime_to_string) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[9f]">Mdl_addTmMdl</a> from model.o(i.Mdl_addTmMdl) referenced from model.o(i.Model_ctor)
 <LI><a href="#[9b]">Mdl_attach</a> from model.o(i.Mdl_attach) referenced from model.o(i.Model_ctor)
 <LI><a href="#[a0]">Mdl_delTmMdl</a> from model.o(i.Mdl_delTmMdl) referenced from model.o(i.Model_ctor)
 <LI><a href="#[9c]">Mdl_detach</a> from model.o(i.Mdl_detach) referenced from model.o(i.Model_ctor)
 <LI><a href="#[9d]">Mdl_getData</a> from model.o(i.Mdl_getData) referenced from model.o(i.Model_ctor)
 <LI><a href="#[a1]">Mdl_notify</a> from model.o(i.Mdl_notify) referenced from model.o(i.Model_ctor)
 <LI><a href="#[9e]">Mdl_setData</a> from model.o(i.Mdl_setData) referenced from model.o(i.Model_ctor)
 <LI><a href="#[14]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">Open_devSpi</a> from dev_spi.o(i.Open_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[5b]">Open_dev_IIC</a> from dev_iic.o(i.Open_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a3]">Pcf8563_get</a> from rtc_pcf8563.o(i.Pcf8563_get) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[a2]">Pcf8563_init</a> from rtc_pcf8563.o(i.Pcf8563_init) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[a5]">Pcf8563_readReg</a> from rtc_pcf8563.o(i.Pcf8563_readReg) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[a4]">Pcf8563_set</a> from rtc_pcf8563.o(i.Pcf8563_set) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[a6]">Pcf8563_writeReg</a> from rtc_pcf8563.o(i.Pcf8563_writeReg) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[19]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">Read_devSpi</a> from dev_spi.o(i.Read_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[5d]">Read_dev_IIC</a> from dev_iic.o(i.Read_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[11]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from drive_spi.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from drive_spi.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[aa]">Save_channel_data</a> from storage.o(i.Save_channel_data) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[a9]">Strg_WR_stored_data</a> from storage.o(i.Strg_WR_stored_data) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[a7]">Strg_init</a> from storage.o(i.Strg_init) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[a8]">Strg_rd_stored_data</a> from storage.o(i.Strg_rd_stored_data) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[1a]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1d]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from times.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">Test_devSpi</a> from dev_spi.o(i.Test_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[60]">Test_dev_IIC</a> from dev_iic.o(i.Test_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from drive_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from drive_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from drive_uart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c3]">UartDeInit</a> from drive_uart.o(i.UartDeInit) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[c6]">UartGiveBackPlayloadBuf</a> from drive_uart.o(i.UartGiveBackPlayloadBuf) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[c2]">UartInit</a> from drive_uart.o(i.UartInit) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[c8]">UartIoctol</a> from drive_uart.o(i.UartIoctol) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[6b]">UartLedRxHdl</a> from dev_uart.o(i.UartLedRxHdl) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[6c]">UartLedTxHdl</a> from dev_uart.o(i.UartLedTxHdl) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[69]">UartPostRxSem</a> from dev_uart.o(i.UartPostRxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[6a]">UartPostTxSem</a> from dev_uart.o(i.UartPostTxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[c4]">UartRead</a> from drive_uart.o(i.UartRead) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[ca]">UartSetIdp</a> from drive_uart.o(i.UartSetIdp) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[c9]">UartSetLedHdl</a> from drive_uart.o(i.UartSetLedHdl) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[cc]">UartSetPostSem</a> from drive_uart.o(i.UartSetPostSem) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[cb]">UartSetWaitSem</a> from drive_uart.o(i.UartSetWaitSem) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[c5]">UartTakeUpPlayloadBuf</a> from drive_uart.o(i.UartTakeUpPlayloadBuf) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[cd]">UartTest</a> from drive_uart.o(i.UartTest) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[67]">UartWaitRxSem</a> from dev_uart.o(i.UartWaitRxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[68]">UartWaitTxSem</a> from dev_uart.o(i.UartWaitTxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[c7]">UartWrite</a> from drive_uart.o(i.UartWrite) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[16]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ad]">UtlRtc_get</a> from rtc.o(i.UtlRtc_get) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[ac]">UtlRtc_init</a> from rtc.o(i.UtlRtc_init) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[af]">UtlRtc_readReg</a> from rtc.o(i.UtlRtc_readReg) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[ae]">UtlRtc_set</a> from rtc.o(i.UtlRtc_set) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[b0]">UtlRtc_writeReg</a> from rtc.o(i.UtlRtc_writeReg) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[e0]">W25Q_Flush</a> from hw_w25q.o(i.W25Q_Flush) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[dc]">W25Q_WP</a> from hw_w25q.o(i.W25Q_WP) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[dd]">W25Q_erase</a> from hw_w25q.o(i.W25Q_erase) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">Write_devSpi</a> from dev_spi.o(i.Write_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[5e]">Write_dev_IIC</a> from dev_iic.o(i.Write_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[5a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[b2]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[b3]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[b1]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0fprintf$8)
 <LI><a href="#[10]">main</a> from main.o(i.main) referenced 2 times from rtx_conf_cm.o(.data)
 <LI><a href="#[da]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[e1]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[d9]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[57]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[58]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[ce]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[cf]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[d0]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[d1]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[d2]">svcSemaphoreCreate</a> from rt_cmsis.o(i.svcSemaphoreCreate) referenced from rt_cmsis.o(i.osSemaphoreCreate)
 <LI><a href="#[d3]">svcSemaphoreRelease</a> from rt_cmsis.o(i.svcSemaphoreRelease) referenced from rt_cmsis.o(i.osSemaphoreRelease)
 <LI><a href="#[d4]">svcSemaphoreWait</a> from rt_cmsis.o(i.svcSemaphoreWait) referenced from rt_cmsis.o(i.osSemaphoreWait)
 <LI><a href="#[d5]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[d6]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[d7]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[d8]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
 <LI><a href="#[86]">vDraw</a> from glyph.o(i.vDraw) referenced from glyph.o(i.Glyph_ctor)
 <LI><a href="#[de]">w25q_Write</a> from hw_w25q.o(i.w25q_Write) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[db]">w25q_info</a> from hw_w25q.o(i.w25q_info) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[df]">w25q_rd_data</a> from hw_w25q.o(i.w25q_rd_data) referenced from hw_w25q.o(i.w25q_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[e2]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fa]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[23e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[23f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[240]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[241]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e4]"></a>_main_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _main_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[242]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[22f]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[243]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[244]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[245]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[184]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTests_getData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTest_init
</UL>

<P><STRONG><a name="[246]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_cache
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_rd_cache
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_setData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_getData
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Erase
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_default
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_set_by_string
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_format
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[153]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuLabel
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuWrString
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTest_to_string
</UL>

<P><STRONG><a name="[18b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCreate
</UL>

<P><STRONG><a name="[125]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_unit_to_string
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[107]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuLabel
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuWrString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tdd_disp_text
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTest_to_string
</UL>

<P><STRONG><a name="[12e]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileMoth
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_search_file
</UL>

<P><STRONG><a name="[152]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuLabel
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuWrString
</UL>

<P><STRONG><a name="[154]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpu_send_done
</UL>

<P><STRONG><a name="[14a]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_set_by_string
</UL>

<P><STRONG><a name="[f3]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
</UL>

<P><STRONG><a name="[f5]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileYear
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileTime
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileDay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
</UL>

<P><STRONG><a name="[24c]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[24d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[24e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[e3]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[24f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[f9]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[fb]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[250]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>CQ_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cycqueue.o(i.CQ_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[101]"></a>CQ_Len</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cycqueue.o(i.CQ_Len))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
</UL>

<P><STRONG><a name="[100]"></a>CQ_Write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cycqueue.o(i.CQ_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CQ_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_status
</UL>

<P><STRONG><a name="[161]"></a>Ch376_enbale_Irq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ch376.o(i.Ch376_enbale_Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ch376_enbale_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>

<P><STRONG><a name="[14d]"></a>ColorInvert</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, glyph.o(i.ColorInvert))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_vDraw
</UL>

<P><STRONG><a name="[27]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drive_uart.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drive_uart.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drive_uart.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[1d5]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[1e2]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[10a]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[1d6]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[10f]"></a>DevChar_open</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dev_char.o(i.DevChar_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dev_IIC
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevSpi
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[11e]"></a>DevLCD_open</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, dev_lcd.o(i.DevLCD_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DevLCD_open
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[115]"></a>Dev_IIC_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_iic.o(i.Dev_IIC_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_new
</UL>

<P><STRONG><a name="[114]"></a>Dev_IIC_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_iic.o(i.Dev_IIC_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dev_IIC
</UL>

<P><STRONG><a name="[11c]"></a>Dev_MAJORID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(i.Dev_MAJORID))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[11d]"></a>Dev_MINORID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(i.Dev_MINORID))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[11b]"></a>Dev_TYPE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(i.Dev_TYPE))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[62]"></a>Dev_Uart_close</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Dev_Uart_close &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[118]"></a>Dev_Uart_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_uart.o(i.Dev_Uart_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_new
</UL>

<P><STRONG><a name="[65]"></a>Dev_Uart_ioctol</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, dev_uart.o(i.Dev_Uart_ioctol))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dev_Uart_ioctol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[117]"></a>Dev_Uart_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_uart.o(i.Dev_Uart_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
</UL>

<P><STRONG><a name="[61]"></a>Dev_Uart_open</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Dev_Uart_open &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[63]"></a>Dev_Uart_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dev_Uart_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[66]"></a>Dev_Uart_test</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dev_Uart_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[64]"></a>Dev_Uart_write</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, dev_uart.o(i.Dev_Uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dev_Uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[11a]"></a>Dev_open</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, device.o(i.Dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevLCD_open
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_TYPE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_MINORID
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_MAJORID
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_UsartInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Run
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tdd_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_vDraw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_GetSize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>

<P><STRONG><a name="[120]"></a>Dev_spi_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_spi.o(i.Dev_spi_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_new
</UL>

<P><STRONG><a name="[11f]"></a>Dev_spi_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_spi.o(i.Dev_spi_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dev_spi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevSpi
</UL>

<P><STRONG><a name="[75]"></a>EFS_Lseek</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_Lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFS_Lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[7a]"></a>EFS_Shutdown</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, easy_fs.o(i.EFS_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EFS_Shutdown &rArr; EFS_close &rArr; EFS_flush_mgr
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[74]"></a>EFS_close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFS_close &rArr; EFS_flush_mgr
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_mgr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[78]"></a>EFS_delete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, easy_fs.o(i.EFS_delete))
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[7b]"></a>EFS_file_info</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, easy_fs.o(i.EFS_file_info))
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[129]"></a>EFS_init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EFS_init &rArr; Mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_format
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[73]"></a>EFS_open</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, easy_fs.o(i.EFS_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EFS_open &rArr; EFS_create_file &rArr; EFS_Cal_free_space
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_search_file
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_malloc_file_mgr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[76]"></a>EFS_read</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, easy_fs.o(i.EFS_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFS_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[79]"></a>EFS_resize</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, easy_fs.o(i.EFS_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EFS_resize &rArr; EFS_create_file &rArr; EFS_Cal_free_space
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_search_file
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_mgr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_file_mgr_info
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Change_file_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[77]"></a>EFS_write</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, easy_fs.o(i.EFS_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFS_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI3_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_control_irq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[131]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_control_irq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[14e]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[132]"></a>Except_raise</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, except.o(i.Except_raise))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_map
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCreate
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>FM25_Erase</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, fm25.o(i.FM25_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FM25_Erase &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_info
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[81]"></a>FM25_Flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fm25.o(i.FM25_Flush))
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[7d]"></a>FM25_WP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fm25.o(i.FM25_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FM25_WP &rArr; FM25_Write_status
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[7f]"></a>FM25_Write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fm25.o(i.FM25_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM25_Write &rArr; FM25_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_wr_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_cmd_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[7c]"></a>FM25_info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm25.o(i.FM25_info))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[139]"></a>FM25_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fm25.o(i.FM25_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FM25_init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[80]"></a>FM25_rd_data</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fm25.o(i.FM25_rd_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM25_rd_data &rArr; FM25_cmd_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_cmd_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[1cc]"></a>Flush_LCD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glyph.o(i.Flush_LCD))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tdd_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tdd_disp_text
</UL>

<P><STRONG><a name="[14f]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_control_irq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[19d]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
</UL>

<P><STRONG><a name="[19e]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
</UL>

<P><STRONG><a name="[151]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
</UL>

<P><STRONG><a name="[137]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIoctol
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_rd_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_wr_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write_status
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_WP
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Ch376
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRst_Ch376
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>

<P><STRONG><a name="[fe]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIoctol
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_rd_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_wr_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write_status
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_WP
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Ch376
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRst_Ch376
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>

<P><STRONG><a name="[13a]"></a>GetCompileDay</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, marco.o(i.GetCompileDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetCompileDay &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_get
</UL>

<P><STRONG><a name="[13b]"></a>GetCompileMoth</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, marco.o(i.GetCompileMoth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCompileMoth &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_get
</UL>

<P><STRONG><a name="[13c]"></a>GetCompileTime</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, marco.o(i.GetCompileTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetCompileTime &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_get
</UL>

<P><STRONG><a name="[13d]"></a>GetCompileYear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, marco.o(i.GetCompileYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetCompileYear &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_get
</UL>

<P><STRONG><a name="[111]"></a>Get_DevGpio</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, device_gpio.o(i.Get_DevGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_DevGpio &rArr; devGpio_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_new
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_new
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[112]"></a>Get_DevSpi</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dev_spi.o(i.Get_DevSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_DevSpi &rArr; Dev_spi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_new
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[110]"></a>Get_DevUart</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, dev_uart.o(i.Get_DevUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_new
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_new
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[113]"></a>Get_Dev_IIC</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dev_iic.o(i.Get_Dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_new
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[141]"></a>Get_GhTxt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gh_txt.o(i.Get_GhTxt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_GhTxt &rArr; GhTxt_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tdd_init
</UL>

<P><STRONG><a name="[143]"></a>Get_ModeTest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, modeltest.o(i.Get_ModeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_ModeTest &rArr; ModelTest_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTest_new
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCreate
</UL>

<P><STRONG><a name="[145]"></a>Get_Mode_chn</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, model_channel.o(i.Get_Mode_chn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_new
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
</UL>

<P><STRONG><a name="[147]"></a>Get_storage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, storage.o(i.Get_storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_default
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[149]"></a>Get_str_data</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, system.o(i.Get_str_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Get_str_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_set_by_string
</UL>

<P><STRONG><a name="[14b]"></a>GhTxt_ctor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gh_txt.o(i.GhTxt_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GhTxt_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glyph_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_new
</UL>

<P><STRONG><a name="[142]"></a>GhTxt_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gh_txt.o(i.GhTxt_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GhTxt_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhTxt
</UL>

<P><STRONG><a name="[14c]"></a>Glyph_ctor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, glyph.o(i.Glyph_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_ctor
</UL>

<P><STRONG><a name="[6]"></a>GpuLabel</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, dev_lcdusartgpu.o(i.GpuLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GpuLabel &rArr; Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>GpuSend</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dev_lcdusartgpu.o(i.GpuSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuLabel
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpu_send_done
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuWrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuPic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuIcon
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuCutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBox
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBPic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBKColor
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
</UL>

<P><STRONG><a name="[155]"></a>HRst_Ch376</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ch376.o(i.HRst_Ch376))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HRst_Ch376 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[159]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_EV
</UL>

<P><STRONG><a name="[165]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>

<P><STRONG><a name="[1a2]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[1a6]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[1a1]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[156]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>

<P><STRONG><a name="[1a7]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[1a3]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[1a4]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[164]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>

<P><STRONG><a name="[15a]"></a>InitTimer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, times.o(i.InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitTimer &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>Init_Ch376</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ch376.o(i.Init_Ch376))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Init_Ch376 &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRst_Ch376
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376_enbale_Irq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[163]"></a>Init_IIC</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, drive_iic.o(i.Init_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StructInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_dev_IIC
</UL>

<P><STRONG><a name="[166]"></a>Init_spi</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, drive_spi.o(i.Init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Init_spi &rArr; Spi_baud_Prescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_mode_CP
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_baud_Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_devSpi
</UL>

<P><STRONG><a name="[16d]"></a>LCD_Run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, glyph.o(i.LCD_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_Run &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tdd_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tdd_disp_text
</UL>

<P><STRONG><a name="[16e]"></a>List_map</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, list.o(i.List_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = List_map &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_notify
</UL>

<P><STRONG><a name="[16f]"></a>List_push</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, list.o(i.List_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = List_push &rArr; Mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_attach
</UL>

<P><STRONG><a name="[170]"></a>MdlChn_default_alarm</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_default_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_default_alarm &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_default
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[171]"></a>MdlChn_default_conf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_default_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_default_conf &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_default
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[17c]"></a>MdlChn_save_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_save_data &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_conf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_chn_conf
</UL>

<P><STRONG><a name="[8f]"></a>MdlTime_getData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, modeltime.o(i.MdlTime_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MdlTime_getData &rArr; System_time
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_tm_2_u32
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[8d]"></a>MdlTime_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, modeltime.o(i.MdlTime_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MdlTime_init &rArr; Mem_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[8e]"></a>MdlTime_run</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modeltime.o(i.MdlTime_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MdlTime_run &rArr; System_time
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[9f]"></a>Mdl_addTmMdl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, model.o(i.Mdl_addTmMdl))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[9b]"></a>Mdl_attach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i.Mdl_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Mdl_attach &rArr; List_push &rArr; Mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[a0]"></a>Mdl_delTmMdl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, model.o(i.Mdl_delTmMdl))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[9c]"></a>Mdl_detach</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model.o(i.Mdl_detach))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[9d]"></a>Mdl_getData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, model.o(i.Mdl_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mdl_getData
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[a1]"></a>Mdl_notify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, model.o(i.Mdl_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mdl_notify &rArr; List_map &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[9e]"></a>Mdl_setData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, model.o(i.Mdl_setData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mdl_setData
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[182]"></a>Mdl_unit_to_string</STRONG> (Thumb, 672 bytes, Stack size 16 bytes, model.o(i.Mdl_unit_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mdl_unit_to_string &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTest_to_string
</UL>

<P><STRONG><a name="[12a]"></a>Mem_alloc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mem.o(i.Mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_push
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_init
</UL>

<P><STRONG><a name="[175]"></a>Mem_calloc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mem.o(i.Mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Mem_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTest_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_init
</UL>

<P><STRONG><a name="[18a]"></a>ModelCreate</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, modelfactory.o(i.ModelCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ModelCreate &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_new
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ModeTest
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_channel_data
</UL>

<P><STRONG><a name="[18d]"></a>ModelTest_ctor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modeltest.o(i.ModelTest_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModelTest_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTest_new
</UL>

<P><STRONG><a name="[144]"></a>ModelTest_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, modeltest.o(i.ModelTest_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ModelTest_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTest_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ModeTest
</UL>

<P><STRONG><a name="[18f]"></a>ModelTime_ctor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modeltime.o(i.ModelTime_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModelTime_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_new
</UL>

<P><STRONG><a name="[18c]"></a>ModelTime_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, modeltime.o(i.ModelTime_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ModelTime_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCreate
</UL>

<P><STRONG><a name="[190]"></a>Model_chn_ctor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, model_channel.o(i.Model_chn_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Model_chn_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_new
</UL>

<P><STRONG><a name="[146]"></a>Model_chn_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, model_channel.o(i.Model_chn_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
</UL>

<P><STRONG><a name="[18e]"></a>Model_ctor</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, model.o(i.Model_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_ctor
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTest_ctor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_ctor
</UL>

<P><STRONG><a name="[191]"></a>NVIC_Configuration</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, intrinit.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[193]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[192]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[195]"></a>OpenPrpClock</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mysystemclock.o(i.OpenPrpClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenPrpClock
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>Operate_in_tange</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, commhmi.o(i.Operate_in_tange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Operate_in_tange
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[199]"></a>Pcf8563_ctor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc_pcf8563.o(i.Pcf8563_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pcf8563_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_new
</UL>

<P><STRONG><a name="[a3]"></a>Pcf8563_get</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, rtc_pcf8563.o(i.Pcf8563_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pcf8563_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[a2]"></a>Pcf8563_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtc_pcf8563.o(i.Pcf8563_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Pcf8563_init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[19b]"></a>Pcf8563_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc_pcf8563.o(i.Pcf8563_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Pcf8563_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[a5]"></a>Pcf8563_readReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_pcf8563.o(i.Pcf8563_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pcf8563_readReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[a4]"></a>Pcf8563_set</STRONG> (Thumb, 732 bytes, Stack size 32 bytes, rtc_pcf8563.o(i.Pcf8563_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pcf8563_set &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[a6]"></a>Pcf8563_writeReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_pcf8563.o(i.Pcf8563_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pcf8563_writeReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[179]"></a>Pe_float</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, model.o(i.Pe_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Pe_float &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[19c]"></a>Pin_init</STRONG> (Thumb, 726 bytes, Stack size 8 bytes, pinmux.o(i.Pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pin_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>Power_Ch376</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ch376.o(i.Power_Ch376))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Power_Ch376
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[198]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
</UL>

<P><STRONG><a name="[197]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
</UL>

<P><STRONG><a name="[1ca]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[196]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
</UL>

<P><STRONG><a name="[1c9]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[157]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1a0]"></a>Read_IIC</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, drive_iic.o(i.Read_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_IIC &rArr; I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_EV
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_dev_IIC
</UL>

<P><STRONG><a name="[1a8]"></a>Read_spi</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, drive_spi.o(i.Read_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_spi &rArr; spi_read_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_devSpi
</UL>

<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drive_spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drive_spi.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[1aa]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>

<P><STRONG><a name="[16b]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_I2S_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_I2S_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[1ab]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>

<P><STRONG><a name="[231]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>

<P><STRONG><a name="[16a]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[167]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[aa]"></a>Save_channel_data</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, storage.o(i.Save_channel_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Save_channel_data &rArr; ModelCreate &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[119]"></a>Sem_init</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, rtx_depend.o(i.Sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sem_init &rArr; osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_UsartInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
</UL>

<P><STRONG><a name="[106]"></a>Sem_post</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_depend.o(i.Sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuLabel
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuWrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuPic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuIcon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuDone
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuCutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBox
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBPic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBKColor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_UsartInit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPostTxSem
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPostRxSem
</UL>

<P><STRONG><a name="[102]"></a>Sem_wait</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, rtx_depend.o(i.Sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuLabel
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuWrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuPic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuIcon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuDone
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuCutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBox
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBPic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBKColor
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitTxSem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitRxSem
</UL>

<P><STRONG><a name="[17b]"></a>SmBus_AI_Read</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_AI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_AI_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
</UL>

<P><STRONG><a name="[17f]"></a>SmBus_AI_config</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_AI_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_AI_config &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_U16
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[1b9]"></a>SmBus_Get_crc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Get_crc))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[17d]"></a>SmBus_Query</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_Query))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SmBus_Query &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
</UL>

<P><STRONG><a name="[172]"></a>SmBus_RD_hig_limit</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_RD_hig_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_RD_hig_limit &rArr; SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[173]"></a>SmBus_RD_low_limit</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_RD_low_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_RD_low_limit &rArr; SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[1b4]"></a>SmBus_Read</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_rd_signal_type
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_RD_low_limit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_RD_hig_limit
</UL>

<P><STRONG><a name="[180]"></a>SmBus_WR_hig_limit</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_WR_hig_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SmBus_WR_hig_limit &rArr; SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[181]"></a>SmBus_WR_low_limit</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_WR_low_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SmBus_WR_low_limit &rArr; SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[1b5]"></a>SmBus_Write</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, smart_bus.o(i.SmBus_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_low_limit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_hig_limit
</UL>

<P><STRONG><a name="[174]"></a>SmBus_decode</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SmBus_decode &rArr; SmBus_dcd_read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[17e]"></a>SmBus_rd_signal_type</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_rd_signal_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_rd_signal_type &rArr; SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
</UL>

<P><STRONG><a name="[1be]"></a>Storage_ctor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, storage.o(i.Storage_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_new
</UL>

<P><STRONG><a name="[148]"></a>Storage_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, storage.o(i.Storage_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>

<P><STRONG><a name="[a9]"></a>Strg_WR_stored_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, storage.o(i.Strg_WR_stored_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Strg_WR_stored_data &rArr; Strg_WR_chn_conf &rArr; Strg_Updata_rcd_mgr &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_sys_conf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_chn_conf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[a7]"></a>Strg_init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, storage.o(i.Strg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Strg_init &rArr; Strg_Updata_rcd_mgr &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCreate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[a8]"></a>Strg_rd_stored_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, storage.o(i.Strg_rd_stored_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Strg_rd_stored_data &rArr; Strg_RD_chn_conf &rArr; Strg_Updata_rcd_mgr &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_RD_sys_conf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_RD_chn_conf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1c4]"></a>System_default</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, system.o(i.System_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = System_default &rArr; MdlChn_default_conf &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1c5]"></a>System_init</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, system.o(i.System_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = System_init &rArr; w25q_init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_new
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_default
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>System_set_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system.o(i.System_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System_set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_set_by_string
</UL>

<P><STRONG><a name="[185]"></a>System_time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(i.System_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_time
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_run
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_getData
</UL>

<P><STRONG><a name="[186]"></a>System_tm_2_u32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.System_tm_2_u32))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_getData
</UL>

<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, times.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[1c8]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[15b]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[1c7]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[15c]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[1cb]"></a>Tdd_disp_text</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, main.o(i.Tdd_disp_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Tdd_disp_text &rArr; LCD_Run &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Run
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cd]"></a>Tdd_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.Tdd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Tdd_init &rArr; LCD_Run &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Run
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhTxt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART1_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART2_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART3_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
</UL>

<P><STRONG><a name="[1db]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[1cf]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
</UL>

<P><STRONG><a name="[1e0]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1dc]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[10e]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[1d0]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[1dd]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[1df]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[1d1]"></a>USB_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USB_Init &rArr; Init_Ch376 &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_status
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Ch376
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>UartGiveBackPlayloadBuf</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drive_uart.o(i.UartGiveBackPlayloadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartGiveBackPlayloadBuf &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1ce]"></a>Usart_irq</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, drive_uart.o(i.Usart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_loadbuflen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>UtlRtc_ctor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(i.UtlRtc_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_ctor
</UL>

<P><STRONG><a name="[ad]"></a>UtlRtc_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rtc.o(i.UtlRtc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UtlRtc_get &rArr; GetCompileTime &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileYear
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileMoth
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileDay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[ac]"></a>UtlRtc_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.UtlRtc_init))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[af]"></a>UtlRtc_readReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc.o(i.UtlRtc_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UtlRtc_readReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[ae]"></a>UtlRtc_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.UtlRtc_set))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[b0]"></a>UtlRtc_writeReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc.o(i.UtlRtc_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UtlRtc_writeReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[e0]"></a>W25Q_Flush</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_w25q.o(i.W25Q_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = W25Q_Flush &rArr; W25Q_Change_cache_sct &rArr; W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[dc]"></a>W25Q_WP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hw_w25q.o(i.W25Q_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25Q_WP
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[dd]"></a>W25Q_erase</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hw_w25q.o(i.W25Q_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25Q_erase &rArr; w25q_Erase_Sector &rArr; W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_chip_c7
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_block
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_Sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[1f2]"></a>Write_IIC</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, drive_iic.o(i.Write_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Write_IIC &rArr; I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_EV
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_dev_IIC
</UL>

<P><STRONG><a name="[1f3]"></a>Write_spi</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, drive_spi.o(i.Write_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Write_spi &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_devSpi
</UL>

<P><STRONG><a name="[1f5]"></a>__0fprintf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[252]"></a>__1fprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)

<P><STRONG><a name="[133]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>

<P><STRONG><a name="[1f7]"></a>__0snprintf$8</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[253]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[188]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_to_string
</UL>

<P><STRONG><a name="[1f8]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[254]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[103]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuLabel
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuWrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuPic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuIcon
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuCutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBox
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBPic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBKColor
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pe_touch_spot
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pe_singnaltype
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTest_to_string
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_to_string
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pe_float
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[255]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[116]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_open
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_close
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>

<P><STRONG><a name="[f4]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_new
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_new
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_new
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_new
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_new
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_new
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_new
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_new
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Erase
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadBack_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_new
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_new
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTest_new
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_new
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[256]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[257]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[258]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[227]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[209]"></a>clean_time_flags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, times.o(i.clean_time_flags))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[226]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[22d]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[224]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[ff]"></a>delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_depend.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRst_Ch376
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>

<P><STRONG><a name="[1fc]"></a>devGpio_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, device_gpio.o(i.devGpio_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_new
</UL>

<P><STRONG><a name="[13e]"></a>devGpio_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, device_gpio.o(i.devGpio_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = devGpio_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>

<P><STRONG><a name="[1fd]"></a>driveGpio_ctor</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drive_gpio.o(i.driveGpio_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_new
</UL>

<P><STRONG><a name="[13f]"></a>driveGpio_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drive_gpio.o(i.driveGpio_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = driveGpio_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>

<P><STRONG><a name="[1fe]"></a>driveUart_ctor</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drive_uart.o(i.driveUart_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_new
</UL>

<P><STRONG><a name="[140]"></a>driveUart_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drive_uart.o(i.driveUart_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = driveUart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_ctor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
</UL>

<P><STRONG><a name="[b1]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0fprintf$8)
</UL>
<P><STRONG><a name="[1d9]"></a>free_playloadbuf</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ping_pongbuf.o(i.free_playloadbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGiveBackPlayloadBuf
</UL>

<P><STRONG><a name="[1e1]"></a>get_loadbuflen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ping_pongbuf.o(i.get_loadbuflen))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[1de]"></a>get_playloadbuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ping_pongbuf.o(i.get_playloadbuf))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTakeUpPlayloadBuf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
</UL>

<P><STRONG><a name="[1da]"></a>init_pingponfbuf</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ping_pongbuf.o(i.init_pingponfbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_pingponfbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[1ff]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[201]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[204]"></a>isrSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.isrSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[200]"></a>isr_mbx_receive</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[203]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[206]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[162]"></a>mInitCH376Host</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ch376.o(i.mInitCH376Host))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mInitCH376Host &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>

<P><STRONG><a name="[10]"></a>main</STRONG> (Thumb, 520 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; System_init &rArr; w25q_init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_time_flags
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelCreate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tdd_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tdd_disp_text
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[109]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[e7]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[20a]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[1ac]"></a>osSemaphoreCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
</UL>

<P><STRONG><a name="[1ae]"></a>osSemaphoreRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>

<P><STRONG><a name="[1ad]"></a>osSemaphoreWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreWait))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
</UL>

<P><STRONG><a name="[e6]"></a>osThreadCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[da]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[20b]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[e1]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[21d]"></a>os_error</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[d9]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[22a]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[ec]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[57]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[237]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[20c]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[210]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[212]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[213]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[215]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[216]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[58]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[238]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[20e]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[233]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[228]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[21a]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[202]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[235]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[21b]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[21e]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[e9]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[208]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[207]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[20d]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[211]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>

<P><STRONG><a name="[214]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[220]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[21c]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[218]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[217]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[221]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[236]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[21f]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[222]"></a>rt_sem_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[223]"></a>rt_sem_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[e8]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[20f]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[225]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[229]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[ea]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[22c]"></a>rt_tsk_create</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[22e]"></a>rt_tsk_delete</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[230]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[239]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[ce]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[cf]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[d0]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[234]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[d1]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[d2]"></a>svcSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreCreate)
</UL>
<P><STRONG><a name="[d3]"></a>svcSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[d4]"></a>svcSemaphoreWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreWait)
</UL>
<P><STRONG><a name="[d5]"></a>svcThreadCreate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[d6]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[d7]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[d8]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[1d8]"></a>switch_receivebuf</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, ping_pongbuf.o(i.switch_receivebuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = switch_receivebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[22b]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[de]"></a>w25q_Write</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, hw_w25q.o(i.w25q_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = w25q_Write &rArr; W25Q_Change_cache_sct &rArr; W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_cache
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Addr_2_sct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[db]"></a>w25q_info</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = w25q_info &rArr; w25q_read_id
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[1c6]"></a>w25q_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = w25q_init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_info
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[df]"></a>w25q_rd_data</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, hw_w25q.o(i.w25q_rd_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = w25q_rd_data &rArr; W25Q_Change_cache_sct &rArr; W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_rd_cache
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Addr_2_sct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1bc]"></a>SmBus_Check_head</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Check_head))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
</UL>

<P><STRONG><a name="[1b7]"></a>SmBus_Check_tail</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Check_tail))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[1b8]"></a>SmBus_Cmd_err</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Cmd_err))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[1ba]"></a>SmBus_Get_u16</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, smart_bus.o(i.SmBus_Get_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SmBus_Get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[1b2]"></a>SmBus_Tail</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Tail))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Query
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_Read
</UL>

<P><STRONG><a name="[1b3]"></a>SmBus_U16</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_U16))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
</UL>

<P><STRONG><a name="[1b1]"></a>SmBus_crc</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, smart_bus.o(i.SmBus_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SmBus_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Query
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_Read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[1b6]"></a>SmBus_dcd_AI_read</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_dcd_AI_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_dcd_AI_read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_crc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_u16
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Cmd_err
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
</UL>

<P><STRONG><a name="[1bb]"></a>SmBus_dcd_query</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_dcd_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SmBus_dcd_query &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_crc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Cmd_err
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_tail
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_head
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
</UL>

<P><STRONG><a name="[1bd]"></a>SmBus_dcd_read</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, smart_bus.o(i.SmBus_dcd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_dcd_read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_crc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Cmd_err
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_tail
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_head
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
</UL>

<P><STRONG><a name="[4]"></a>ClearLcd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.ClearLcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ClearLcd &rArr; Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[104]"></a>Cmdbuf_manager</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dev_lcdusartgpu.o(i.Cmdbuf_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpu_send_done
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuLabel
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuWrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuPic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuIcon
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuCutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBox
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBPic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBKColor
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
</UL>

<P><STRONG><a name="[2]"></a>Dev_UsartInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dev_lcdusartgpu.o(i.Dev_UsartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Dev_UsartInit &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Dev_UsartdeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.Dev_UsartdeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dev_UsartdeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>GetScrnSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_lcdusartgpu.o(i.GetScrnSize))
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>GpuBKColor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.GpuBKColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GpuBKColor &rArr; Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>GpuBPic</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, dev_lcdusartgpu.o(i.GpuBPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GpuBPic &rArr; Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpu_send_done
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>GpuBox</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, dev_lcdusartgpu.o(i.GpuBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GpuBox &rArr; Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>GpuCutPicture</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, dev_lcdusartgpu.o(i.GpuCutPicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GpuCutPicture &rArr; Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>GpuDone</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.GpuDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GpuDone &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpu_send_done
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>GpuIcon</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, dev_lcdusartgpu.o(i.GpuIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GpuIcon &rArr; Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>GpuPic</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dev_lcdusartgpu.o(i.GpuPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GpuPic &rArr; Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>GpuStrSize</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, dev_lcdusartgpu.o(i.GpuStrSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GpuStrSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>GpuWrString</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, dev_lcdusartgpu.o(i.GpuWrString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GpuWrString &rArr; Cmdbuf_manager &rArr; Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>Gpu_send_done</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.Gpu_send_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpu_send_done &rArr; GpuSend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuDone
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuBPic
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmdbuf_manager
</UL>

<P><STRONG><a name="[c3]"></a>UartDeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drive_uart.o(i.UartDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UartDeInit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1d4]"></a>UartDma_Init</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, drive_uart.o(i.UartDma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UartDma_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[c2]"></a>UartInit</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, drive_uart.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UartInit &rArr; UartDma_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pingponfbuf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[c8]"></a>UartIoctol</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, drive_uart.o(i.UartIoctol))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartIoctol
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[c4]"></a>UartRead</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, drive_uart.o(i.UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartRead &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_playloadbuf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[ca]"></a>UartSetIdp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetIdp))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[c9]"></a>UartSetLedHdl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetLedHdl))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[cc]"></a>UartSetPostSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetPostSem))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[cb]"></a>UartSetWaitSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetWaitSem))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[c5]"></a>UartTakeUpPlayloadBuf</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drive_uart.o(i.UartTakeUpPlayloadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartTakeUpPlayloadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_playloadbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[cd]"></a>UartTest</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, drive_uart.o(i.UartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UartTest &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[c7]"></a>UartWrite</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, drive_uart.o(i.UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UartWrite &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[12f]"></a>ExtiIrq</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drive_gpio.o(i.ExtiIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExtiIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>GpioDeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioDeInit))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[ba]"></a>GpioInit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, drive_gpio.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GpioInit &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[bc]"></a>GpioRead</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drive_gpio.o(i.GpioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioRead
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[bf]"></a>GpioSetEncode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioSetEncode))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[be]"></a>GpioSetIrqHdl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioSetIrqHdl))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[c1]"></a>GpioTest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioTest))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[bd]"></a>GpioWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioWrite))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[c0]"></a>Gpio_control_irq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drive_gpio.o(i.Gpio_control_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Gpio_control_irq &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[169]"></a>Spi_baud_Prescaler</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, drive_spi.o(i.Spi_baud_Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi_baud_Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[168]"></a>Spi_mode_CP</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, drive_spi.o(i.Spi_mode_CP))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[1a9]"></a>spi_read_word</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drive_spi.o(i.spi_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_read_word
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_spi
</UL>

<P><STRONG><a name="[1f4]"></a>spi_write_word</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, drive_spi.o(i.spi_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_spi
</UL>

<P><STRONG><a name="[158]"></a>I2C_wait_EV</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drive_iic.o(i.I2C_wait_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[6b]"></a>UartLedRxHdl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_uart.o(i.UartLedRxHdl))
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[6c]"></a>UartLedTxHdl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_uart.o(i.UartLedTxHdl))
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[69]"></a>UartPostRxSem</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, dev_uart.o(i.UartPostRxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartPostRxSem &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[6a]"></a>UartPostTxSem</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, dev_uart.o(i.UartPostTxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartPostTxSem &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[67]"></a>UartWaitRxSem</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dev_uart.o(i.UartWaitRxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartWaitRxSem &rArr; Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[68]"></a>UartWaitTxSem</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dev_uart.o(i.UartWaitTxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartWaitTxSem &rArr; Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[b5]"></a>DevGpioClose</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioClose))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[b8]"></a>DevGpioIoctol</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, device_gpio.o(i.DevGpioIoctol))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DevGpioIoctol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[b4]"></a>DevGpioOpen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioOpen))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[b6]"></a>DevGpioRead</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, device_gpio.o(i.DevGpioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DevGpioRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[b9]"></a>DevGpioTest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioTest))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[b7]"></a>DevGpioWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioWrite))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[6e]"></a>Close_devSpi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_spi.o(i.Close_devSpi))
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[71]"></a>Ioctol_devSpi</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dev_spi.o(i.Ioctol_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ioctol_devSpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[6d]"></a>Open_devSpi</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dev_spi.o(i.Open_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Open_devSpi &rArr; Init_spi &rArr; Spi_baud_Prescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[6f]"></a>Read_devSpi</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dev_spi.o(i.Read_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_devSpi &rArr; Read_spi &rArr; spi_read_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[72]"></a>Test_devSpi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_spi.o(i.Test_devSpi))
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[70]"></a>Write_devSpi</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dev_spi.o(i.Write_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Write_devSpi &rArr; Write_spi &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[5c]"></a>Close_dev_IIC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_iic.o(i.Close_dev_IIC))
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[5f]"></a>Ioctol_dev_IIC</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, dev_iic.o(i.Ioctol_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ioctol_dev_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[5b]"></a>Open_dev_IIC</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_iic.o(i.Open_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Open_dev_IIC &rArr; Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[5d]"></a>Read_dev_IIC</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, dev_iic.o(i.Read_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_dev_IIC &rArr; Read_IIC &rArr; I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[60]"></a>Test_dev_IIC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_iic.o(i.Test_dev_IIC))
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[5e]"></a>Write_dev_IIC</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, dev_iic.o(i.Write_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Write_dev_IIC &rArr; Write_IIC &rArr; I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[85]"></a>Draw_self</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glyph.o(i.Draw_self))
<BR>[Address Reference Count : 1]<UL><LI> glyph.o(i.Glyph_ctor)
</UL>
<P><STRONG><a name="[84]"></a>Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, glyph.o(i.Init))
<BR>[Address Reference Count : 1]<UL><LI> glyph.o(i.Glyph_ctor)
</UL>
<P><STRONG><a name="[86]"></a>vDraw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glyph.o(i.vDraw))
<BR>[Address Reference Count : 1]<UL><LI> glyph.o(i.Glyph_ctor)
</UL>
<P><STRONG><a name="[83]"></a>GhTxt_GetSize</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gh_txt.o(i.GhTxt_GetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GhTxt_GetSize &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gh_txt.o(i.GhTxt_ctor)
</UL>
<P><STRONG><a name="[82]"></a>GhTxt_vDraw</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, gh_txt.o(i.GhTxt_vDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GhTxt_vDraw &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorInvert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gh_txt.o(i.GhTxt_ctor)
</UL>
<P><STRONG><a name="[1bf]"></a>Strg_RD_chn_conf</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, storage.o(i.Strg_RD_chn_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Strg_RD_chn_conf &rArr; Strg_Updata_rcd_mgr &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
</UL>

<P><STRONG><a name="[1c3]"></a>Strg_RD_sys_conf</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, storage.o(i.Strg_RD_sys_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Strg_RD_sys_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
</UL>

<P><STRONG><a name="[1c0]"></a>Strg_Updata_rcd_mgr</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, storage.o(i.Strg_Updata_rcd_mgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Strg_Updata_rcd_mgr &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_chn_conf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_RD_chn_conf
</UL>

<P><STRONG><a name="[1c1]"></a>Strg_WR_chn_conf</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, storage.o(i.Strg_WR_chn_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Strg_WR_chn_conf &rArr; Strg_Updata_rcd_mgr &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[1c2]"></a>Strg_WR_sys_conf</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, storage.o(i.Strg_WR_sys_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Strg_WR_sys_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[1ec]"></a>W25Q_Addr_2_sct</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_w25q.o(i.W25Q_Addr_2_sct))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_sct_offset
</UL>

<P><STRONG><a name="[1e3]"></a>W25Q_Change_cache_sct</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hw_w25q.o(i.W25Q_Change_cache_sct))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W25Q_Change_cache_sct &rArr; W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write_Sector_Data
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_Sector
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadBack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Flush
</UL>

<P><STRONG><a name="[1e6]"></a>W25Q_ReadBack_check</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hw_w25q.o(i.W25Q_ReadBack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>

<P><STRONG><a name="[1ea]"></a>W25Q_rd_cache</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hw_w25q.o(i.W25Q_rd_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q_rd_cache &rArr; W25Q_sct_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_sct_offset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
</UL>

<P><STRONG><a name="[1eb]"></a>W25Q_sct_offset</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hw_w25q.o(i.W25Q_sct_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25Q_sct_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Addr_2_sct
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_cache
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_rd_cache
</UL>

<P><STRONG><a name="[1ed]"></a>W25Q_send_wait</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, hw_w25q.o(i.W25Q_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_chip_c7
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_block
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_Sector
</UL>

<P><STRONG><a name="[1f0]"></a>W25Q_wr_cache</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hw_w25q.o(i.W25Q_wr_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q_wr_cache &rArr; W25Q_sct_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_sct_offset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
</UL>

<P><STRONG><a name="[1f1]"></a>W25Q_wr_fsh</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, hw_w25q.o(i.W25Q_wr_fsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q_wr_fsh &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write_Sector_Data
</UL>

<P><STRONG><a name="[1e4]"></a>w25q_Erase_Sector</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = w25q_Erase_Sector &rArr; W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_erase
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>

<P><STRONG><a name="[1e8]"></a>w25q_Erase_block</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_Erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = w25q_Erase_block &rArr; W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_erase
</UL>

<P><STRONG><a name="[1e9]"></a>w25q_Erase_chip_c7</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_Erase_chip_c7))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = w25q_Erase_chip_c7 &rArr; W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_erase
</UL>

<P><STRONG><a name="[1ef]"></a>w25q_ReadSR</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25q_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>

<P><STRONG><a name="[1e7]"></a>w25q_Read_Sector_Data</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hw_w25q.o(i.w25q_Read_Sector_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = w25q_Read_Sector_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadBack_check
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>

<P><STRONG><a name="[1e5]"></a>w25q_Write_Sector_Data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hw_w25q.o(i.w25q_Write_Sector_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = w25q_Write_Sector_Data &rArr; W25Q_wr_fsh &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>

<P><STRONG><a name="[23c]"></a>w25q_read_id</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = w25q_read_id
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_info
</UL>

<P><STRONG><a name="[1ee]"></a>w25q_wr_enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_wr_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>

<P><STRONG><a name="[135]"></a>FM25_Write_status</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fm25.o(i.FM25_Write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM25_Write_status
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WP
</UL>

<P><STRONG><a name="[138]"></a>FM25_cmd_addr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fm25.o(i.FM25_cmd_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM25_cmd_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_rd_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
</UL>

<P><STRONG><a name="[136]"></a>FM25_wr_enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fm25.o(i.FM25_wr_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM25_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
</UL>

<P><STRONG><a name="[88]"></a>DoUpdate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i.DoUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DoUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Mdl_notify)
</UL>
<P><STRONG><a name="[90]"></a>MdlTime_set_by_string</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, modeltime.o(i.MdlTime_set_by_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MdlTime_set_by_string &rArr; Get_str_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_set_time
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[91]"></a>MdlTime_to_string</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, modeltime.o(i.MdlTime_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MdlTime_to_string &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[89]"></a>MdlTest_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, modeltest.o(i.MdlTest_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MdlTest_init &rArr; Mem_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltest.o(i.ModelTest_ctor)
</UL>
<P><STRONG><a name="[8c]"></a>MdlTest_to_percentage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modeltest.o(i.MdlTest_to_percentage))
<BR>[Address Reference Count : 1]<UL><LI> modeltest.o(i.ModelTest_ctor)
</UL>
<P><STRONG><a name="[8b]"></a>MdlTest_to_string</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, modeltest.o(i.MdlTest_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MdlTest_to_string &rArr; Mdl_unit_to_string &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_unit_to_string
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltest.o(i.ModelTest_ctor)
</UL>
<P><STRONG><a name="[8a]"></a>MdlTests_getData</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, modeltest.o(i.MdlTests_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MdlTests_getData
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltest.o(i.ModelTest_ctor)
</UL>
<P><STRONG><a name="[177]"></a>MdlChn_Save_2_alarm</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Save_2_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[176]"></a>MdlChn_Save_2_conf</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Save_2_conf))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[95]"></a>MdlChn_getData</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, model_channel.o(i.MdlChn_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MdlChn_getData &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_RD_low_limit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_RD_hig_limit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[92]"></a>MdlChn_init</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, model_channel.o(i.MdlChn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MdlChn_init &rArr; MdlChn_default_conf &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_conf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[99]"></a>MdlChn_modify_sconf</STRONG> (Thumb, 848 bytes, Stack size 40 bytes, model_channel.o(i.MdlChn_modify_sconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_modify_sconf &rArr; Pe_float &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pe_touch_spot
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pe_float
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[93]"></a>MdlChn_run</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, model_channel.o(i.MdlChn_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MdlChn_run &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_Read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[94]"></a>MdlChn_self_check</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, model_channel.o(i.MdlChn_self_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MdlChn_self_check &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_rd_signal_type
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Query
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[96]"></a>MdlChn_setData</STRONG> (Thumb, 502 bytes, Stack size 80 bytes, model_channel.o(i.MdlChn_setData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MdlChn_setData &rArr; Dev_open &rArr; DevChar_open &rArr; Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_rd_signal_type
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_low_limit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_hig_limit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[9a]"></a>MdlChn_set_by_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_set_by_string))
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[98]"></a>MdlChn_to_percentage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, model_channel.o(i.MdlChn_to_percentage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MdlChn_to_percentage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[97]"></a>MdlChn_to_string</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, model_channel.o(i.MdlChn_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MdlChn_to_string &rArr; Pe_float &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pe_touch_spot
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pe_singnaltype
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pe_float
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_unit_to_string
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[183]"></a>Pe_singnaltype</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, model_channel.o(i.Pe_singnaltype))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pe_singnaltype &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
</UL>

<P><STRONG><a name="[17a]"></a>Pe_touch_spot</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, model_channel.o(i.Pe_touch_spot))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pe_touch_spot &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[fc]"></a>CH376GetIntStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ch376.o(i.CH376GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376_intr
</UL>

<P><STRONG><a name="[87]"></a>Ch376_intr</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ch376.o(i.Ch376_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ch376_intr &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch376.o(i.Init_Ch376)
</UL>
<P><STRONG><a name="[fd]"></a>xWriteCH376Cmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ch376.o(i.xWriteCH376Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>

<P><STRONG><a name="[ab]"></a>Deal_status</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb.o(i.Deal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Deal_status &rArr; CQ_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(i.USB_Init)
</UL>
<P><STRONG><a name="[124]"></a>EFS_Cal_free_space</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, easy_fs.o(i.EFS_Cal_free_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFS_Cal_free_space
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[12d]"></a>EFS_Change_file_size</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, easy_fs.o(i.EFS_Change_file_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFS_Change_file_size
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
</UL>

<P><STRONG><a name="[123]"></a>EFS_Regain_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, easy_fs.o(i.EFS_Regain_space))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[122]"></a>EFS_create_file</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, easy_fs.o(i.EFS_create_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EFS_create_file &rArr; EFS_Cal_free_space
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_mgr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_file_mgr_info
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Regain_space
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Cal_free_space
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_open
</UL>

<P><STRONG><a name="[126]"></a>EFS_file_mgr_info</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, easy_fs.o(i.EFS_file_mgr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFS_file_mgr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_search_file
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[121]"></a>EFS_flush_mgr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_flush_mgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFS_flush_mgr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_close
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[127]"></a>EFS_format</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFS_format
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_init
</UL>

<P><STRONG><a name="[12c]"></a>EFS_malloc_file_mgr</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, easy_fs.o(i.EFS_malloc_file_mgr))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_open
</UL>

<P><STRONG><a name="[12b]"></a>EFS_search_file</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_search_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFS_search_file &rArr; EFS_file_mgr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_file_mgr_info
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_open
</UL>

<P><STRONG><a name="[1af]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b0]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[205]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[232]"></a>rt_ms2tick</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[23a]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[23b]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[219]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1f6]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$8
</UL>

<P><STRONG><a name="[1fb]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1fa]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b2]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[b3]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[1f9]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
