<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\PplRcd.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\PplRcd.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Thu May 24 15:58:36 2018
<BR><P>
<H3>Maximum Stack Usage =        584 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
FM25_Erase &rArr; FM25_Write &rArr; FM25_wr_enable
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[cf]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cf]">rt_alloc_box</a><BR>
 <LI><a href="#[8a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">NMI_Handler</a><BR>
 <LI><a href="#[8c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">MemManage_Handler</a><BR>
 <LI><a href="#[8d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8d]">BusFault_Handler</a><BR>
 <LI><a href="#[8e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e]">UsageFault_Handler</a><BR>
 <LI><a href="#[90]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[90]">DebugMon_Handler</a><BR>
 <LI><a href="#[a5]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a5]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[2dd]">Except_raise</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2dd]">Except_raise</a><BR>
 <LI><a href="#[42d]">Strg_Updata_rcd_mgr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">STG_Open_file</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a5]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c2]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d4]">ALS_Btn_hdl</a> from stg_set_alarm.o(i.ALS_Btn_hdl) referenced from stg_set_alarm.o(i.ALS_build_component)
 <LI><a href="#[58]">ALS_Exit</a> from stg_set_alarm.o(i.ALS_Exit) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[50]">ALS_build_component</a> from stg_set_alarm.o(i.ALS_build_component) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[57]">ALS_commit</a> from stg_set_alarm.o(i.ALS_commit) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[d7]">Accm_HMI_hide</a> from hmi_accumulate .o(i.Accm_HMI_hide) referenced from hmi_accumulate .o(i.Accm_HMI_ctor)
 <LI><a href="#[d9]">Accm_HMI_hitHandle</a> from hmi_accumulate .o(i.Accm_HMI_hitHandle) referenced from hmi_accumulate .o(i.Accm_HMI_ctor)
 <LI><a href="#[da]">Accm_HMI_init_focus</a> from hmi_accumulate .o(i.Accm_HMI_init_focus) referenced from hmi_accumulate .o(i.Accm_HMI_ctor)
 <LI><a href="#[d6]">Alarm_initSheet</a> from hmi_accumulate .o(i.Alarm_initSheet) referenced from hmi_accumulate .o(i.Accm_HMI_ctor)
 <LI><a href="#[4e]">Als_entry</a> from stg_set_alarm.o(i.Als_entry) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[56]">Als_get_focusdata</a> from stg_set_alarm.o(i.Als_get_focusdata) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[4f]">Als_init</a> from stg_set_alarm.o(i.Als_init) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[52]">Als_key_dn</a> from stg_set_alarm.o(i.Als_key_dn) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[55]">Als_key_er</a> from stg_set_alarm.o(i.Als_key_er) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[53]">Als_key_lt</a> from stg_set_alarm.o(i.Als_key_lt) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[54]">Als_key_rt</a> from stg_set_alarm.o(i.Als_key_rt) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[51]">Als_key_up</a> from stg_set_alarm.o(i.Als_key_up) referenced 2 times from stg_set_alarm.o(.data)
 <LI><a href="#[dc]">BTN_Build_each_btn</a> from component_button.o(i.BTN_Build_each_btn) referenced from component_button.o(i.Button_ctor)
 <LI><a href="#[dd]">BTN_Clean_btn</a> from component_button.o(i.BTN_Clean_btn) referenced from component_button.o(i.Button_ctor)
 <LI><a href="#[e0]">BTN_Deal_hit</a> from component_button.o(i.BTN_Deal_hit) referenced from component_button.o(i.Button_ctor)
 <LI><a href="#[db]">BTN_Init</a> from component_button.o(i.BTN_Init) referenced from component_button.o(i.Button_ctor)
 <LI><a href="#[df]">BTN_Move_focus</a> from component_button.o(i.BTN_Move_focus) referenced from component_button.o(i.Button_ctor)
 <LI><a href="#[de]">BTN_Show_vaild_btn</a> from component_button.o(i.BTN_Show_vaild_btn) referenced from component_button.o(i.Button_ctor)
 <LI><a href="#[135]">BarHmi_HideSheet</a> from hmi_bargraph.o(i.BarHmi_HideSheet) referenced from hmi_bargraph.o(i.HMI_bar_ctor)
 <LI><a href="#[134]">BarHmi_InitSheet</a> from hmi_bargraph.o(i.BarHmi_InitSheet) referenced from hmi_bargraph.o(i.HMI_bar_ctor)
 <LI><a href="#[136]">BarHmi_Show</a> from hmi_bargraph.o(i.BarHmi_Show) referenced from hmi_bargraph.o(i.HMI_bar_ctor)
 <LI><a href="#[196]">BuInptSht</a> from ntbutton.o(i.BuInptSht) referenced from ntbutton.o(i.NtButton_ctor)
 <LI><a href="#[8d]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a8]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a9]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d7]">CMM_Update_time</a> from hmi_comm.o(i.CMM_Update_time) referenced from hmi_comm.o(i.cmmHmi_ctor)
 <LI><a href="#[e6]">CNS_Btn_hdl</a> from stg_set_channel.o(i.CNS_Btn_hdl) referenced from stg_set_channel.o(i.CNS_build_component)
 <LI><a href="#[63]">CNS_Exit</a> from stg_set_channel.o(i.CNS_Exit) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[5b]">CNS_build_component</a> from stg_set_channel.o(i.CNS_build_component) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[62]">CNS_commit</a> from stg_set_channel.o(i.CNS_commit) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[ef]">CRV_Add_point</a> from component_curve.o(i.CRV_Add_point) referenced from component_curve.o(i.Curve_ctor)
 <LI><a href="#[ec]">CRV_Alloc</a> from component_curve.o(i.CRV_Alloc) referenced from component_curve.o(i.Curve_ctor)
 <LI><a href="#[f0]">CRV_Ctl</a> from component_curve.o(i.CRV_Ctl) referenced from component_curve.o(i.Curve_ctor)
 <LI><a href="#[f3]">CRV_Data_flex</a> from component_curve.o(i.CRV_Data_flex) referenced from component_curve.o(i.Curve_ctor)
 <LI><a href="#[ed]">CRV_Free</a> from component_curve.o(i.CRV_Free) referenced from component_curve.o(i.Curve_ctor)
 <LI><a href="#[eb]">CRV_Init</a> from component_curve.o(i.CRV_Init) referenced from component_curve.o(i.Curve_ctor)
 <LI><a href="#[ee]">CRV_Reset</a> from component_curve.o(i.CRV_Reset) referenced from component_curve.o(i.Curve_ctor)
 <LI><a href="#[f1]">CRV_Show_bkg</a> from component_curve.o(i.CRV_Show_bkg) referenced from component_curve.o(i.Curve_ctor)
 <LI><a href="#[f2]">CRV_Show_curve</a> from component_curve.o(i.CRV_Show_curve) referenced from component_curve.o(i.Curve_ctor)
 <LI><a href="#[e7]">CRV_Win_cmd</a> from hmi_curve.o(i.CRV_Win_cmd) referenced from hmi_curve.o(i.CRV_Set_first_time)
 <LI><a href="#[162]">Ch376_intr</a> from ch376.o(i.Ch376_intr) referenced from ch376.o(i.Init_Ch376)
 <LI><a href="#[59]">ChnStrategy_entry</a> from stg_set_channel.o(i.ChnStrategy_entry) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[4]">ClearLcd</a> from dev_lcdusartgpu.o(i.ClearLcd) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[143]">Clear_focus</a> from hmi.o(i.Clear_focus) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[10b]">Close_devSpi</a> from dev_spi.o(i.Close_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[f9]">Close_dev_IIC</a> from dev_iic.o(i.Close_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[227]">Cmd_Thread</a> from cmd_thread.o(i.Cmd_Thread) referenced from cmd_thread.o(.constdata)
 <LI><a href="#[61]">Cns_get_focusdata</a> from stg_set_channel.o(i.Cns_get_focusdata) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[5a]">Cns_init</a> from stg_set_channel.o(i.Cns_init) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[5d]">Cns_key_dn</a> from stg_set_channel.o(i.Cns_key_dn) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[60]">Cns_key_er</a> from stg_set_channel.o(i.Cns_key_er) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[5e]">Cns_key_lt</a> from stg_set_channel.o(i.Cns_key_lt) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[5f]">Cns_key_rt</a> from stg_set_channel.o(i.Cns_key_rt) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[5c]">Cns_key_up</a> from stg_set_channel.o(i.Cns_key_up) referenced 2 times from stg_set_channel.o(.data)
 <LI><a href="#[141]">ConposeKeyHandle</a> from hmi.o(i.ConposeKeyHandle) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[228]">Ctime_periodic</a> from ctltimer.o(i.Ctime_periodic) referenced from ctltimer.o(.constdata)
 <LI><a href="#[e8]">CtlKey_init</a> from ctlkey.o(i.CtlKey_init) referenced from ctlkey.o(i.CtlKey_ctor)
 <LI><a href="#[f5]">DBP_Btn_hdl</a> from stg_set_databackup.o(i.DBP_Btn_hdl) referenced from stg_set_databackup.o(i.DBP_build_component)
 <LI><a href="#[f4]">DBP_Copy</a> from stg_set_databackup.o(i.DBP_Copy) referenced from stg_set_databackup.o(i.DBP_Btn_hdl)
 <LI><a href="#[6e]">DBP_Exit</a> from stg_set_databackup.o(i.DBP_Exit) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[f7]">DBP_Usb_event</a> from stg_set_databackup.o(i.DBP_Usb_event) referenced from stg_set_databackup.o(i.DBP_init)
 <LI><a href="#[66]">DBP_build_component</a> from stg_set_databackup.o(i.DBP_build_component) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[6d]">DBP_commit</a> from stg_set_databackup.o(i.DBP_commit) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[f6]">DBP_filename_commit</a> from stg_set_databackup.o(i.DBP_filename_commit) referenced from stg_set_databackup.o(i.DBP_init)
 <LI><a href="#[6c]">DBP_get_focusdata</a> from stg_set_databackup.o(i.DBP_get_focusdata) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[65]">DBP_init</a> from stg_set_databackup.o(i.DBP_init) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[68]">DBP_key_dn</a> from stg_set_databackup.o(i.DBP_key_dn) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[6b]">DBP_key_er</a> from stg_set_databackup.o(i.DBP_key_er) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[69]">DBP_key_lt</a> from stg_set_databackup.o(i.DBP_key_lt) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[6a]">DBP_key_rt</a> from stg_set_databackup.o(i.DBP_key_rt) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[67]">DBP_key_up</a> from stg_set_databackup.o(i.DBP_key_up) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[140]">DHitHandle</a> from hmi.o(i.DHitHandle) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[9e]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9f]">DMA1_Channel2_IRQHandler</a> from drive_uart.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a0]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a1]">DMA1_Channel4_IRQHandler</a> from drive_uart.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a2]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a3]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a4]">DMA1_Channel7_IRQHandler</a> from drive_uart.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[cb]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[cc]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[cd]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ce]">DMA2_Channel4_5_IRQHandler</a> from drive_uart.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14d]">DataHmi_HideSheet</a> from hmi_data.o(i.DataHmi_HideSheet) referenced from hmi_data.o(i.HMI_data_ctor)
 <LI><a href="#[14f]">DataHmi_HitHandle</a> from hmi_data.o(i.DataHmi_HitHandle) referenced from hmi_data.o(i.HMI_data_ctor)
 <LI><a href="#[14c]">DataHmi_InitSheet</a> from hmi_data.o(i.DataHmi_InitSheet) referenced from hmi_data.o(i.HMI_data_ctor)
 <LI><a href="#[14e]">DataHmi_Show</a> from hmi_data.o(i.DataHmi_Show) referenced from hmi_data.o(i.HMI_data_ctor)
 <LI><a href="#[64]">Data_bacnup_Strategy_entry</a> from stg_set_databackup.o(i.Data_bacnup_Strategy_entry) referenced 2 times from stg_set_databackup.o(.data)
 <LI><a href="#[1cd]">Deal_status</a> from usb.o(i.Deal_status) referenced from usb.o(i.USB_Init)
 <LI><a href="#[90]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d9]">DevGpioClose</a> from device_gpio.o(i.DevGpioClose) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[1dc]">DevGpioIoctol</a> from device_gpio.o(i.DevGpioIoctol) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[1d8]">DevGpioOpen</a> from device_gpio.o(i.DevGpioOpen) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[1da]">DevGpioRead</a> from device_gpio.o(i.DevGpioRead) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[1dd]">DevGpioTest</a> from device_gpio.o(i.DevGpioTest) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[1db]">DevGpioWrite</a> from device_gpio.o(i.DevGpioWrite) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[ff]">Dev_Uart_close</a> from dev_uart.o(i.Dev_Uart_close) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[102]">Dev_Uart_ioctol</a> from dev_uart.o(i.Dev_Uart_ioctol) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[fe]">Dev_Uart_open</a> from dev_uart.o(i.Dev_Uart_open) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[100]">Dev_Uart_read</a> from dev_uart.o(i.Dev_Uart_read) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[103]">Dev_Uart_test</a> from dev_uart.o(i.Dev_Uart_test) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[101]">Dev_Uart_write</a> from dev_uart.o(i.Dev_Uart_write) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[2]">Dev_UsartInit</a> from dev_lcdusartgpu.o(i.Dev_UsartInit) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[3]">Dev_UsartdeInit</a> from dev_lcdusartgpu.o(i.Dev_UsartdeInit) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[12c]">Draw_self</a> from glyph.o(i.Draw_self) referenced from glyph.o(i.Glyph_ctor)
 <LI><a href="#[11a]">EFS_Erase_file</a> from easy_fs.o(i.EFS_Erase_file) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[110]">EFS_Flush</a> from easy_fs.o(i.EFS_Flush) referenced from easy_fs.o(i.EFS_Flush)
 <LI><a href="#[110]">EFS_Flush</a> from easy_fs.o(i.EFS_Flush) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[113]">EFS_Lseek</a> from easy_fs.o(i.EFS_Lseek) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[117]">EFS_Raw_read</a> from easy_fs.o(i.EFS_Raw_read) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[116]">EFS_Raw_write</a> from easy_fs.o(i.EFS_Raw_write) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[11b]">EFS_Shutdown</a> from easy_fs.o(i.EFS_Shutdown) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[112]">EFS_close</a> from easy_fs.o(i.EFS_close) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[118]">EFS_delete</a> from easy_fs.o(i.EFS_delete) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[11c]">EFS_file_info</a> from easy_fs.o(i.EFS_file_info) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[111]">EFS_open</a> from easy_fs.o(i.EFS_open) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[114]">EFS_read</a> from easy_fs.o(i.EFS_read) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[119]">EFS_resize</a> from easy_fs.o(i.EFS_resize) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[11d]">EFS_run</a> from easy_fs.o(i.EFS_run) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[115]">EFS_write</a> from easy_fs.o(i.EFS_write) referenced from easy_fs.o(i.EFS_init)
 <LI><a href="#[99]">EXTI0_IRQHandler</a> from drive_gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bb]">EXTI15_10_IRQHandler</a> from drive_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9a]">EXTI1_IRQHandler</a> from drive_gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9b]">EXTI2_IRQHandler</a> from drive_gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9c]">EXTI3_IRQHandler</a> from drive_gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9d]">EXTI4_IRQHandler</a> from drive_gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[aa]">EXTI9_5_IRQHandler</a> from drive_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[97]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[120]">FM25_Erase</a> from fm25.o(i.FM25_Erase) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[121]">FM25_Erase_addr</a> from fm25.o(i.FM25_Erase_addr) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[124]">FM25_Flush</a> from fm25.o(i.FM25_Flush) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[11f]">FM25_WP</a> from fm25.o(i.FM25_WP) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[122]">FM25_Write</a> from fm25.o(i.FM25_Write) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[11e]">FM25_info</a> from fm25.o(i.FM25_info) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[125]">FM25_lock</a> from fm25.o(i.FM25_lock) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[123]">FM25_rd_data</a> from fm25.o(i.FM25_rd_data) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[126]">FM25_unlock</a> from fm25.o(i.FM25_unlock) referenced from fm25.o(i.FM25_init)
 <LI><a href="#[c3]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">GPU_BKColor</a> from dev_lcdusartgpu.o(i.GPU_BKColor) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[d]">GPU_Bkc_pic</a> from dev_lcdusartgpu.o(i.GPU_Bkc_pic) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[8]">GPU_Box</a> from dev_lcdusartgpu.o(i.GPU_Box) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[c]">GPU_CutPicture</a> from dev_lcdusartgpu.o(i.GPU_CutPicture) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[e]">GPU_Done</a> from dev_lcdusartgpu.o(i.GPU_Done) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[f]">GPU_Icon</a> from dev_lcdusartgpu.o(i.GPU_Icon) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[6]">GPU_Label</a> from dev_lcdusartgpu.o(i.GPU_Label) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[b]">GPU_Pic</a> from dev_lcdusartgpu.o(i.GPU_Pic) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[9]">GPU_StrSize</a> from dev_lcdusartgpu.o(i.GPU_StrSize) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[5]">GPU_WrString</a> from dev_lcdusartgpu.o(i.GPU_WrString) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[12e]">GeoInptSht</a> from geometricsexpr.o(i.GeoInptSht) referenced from geometricsexpr.o(i.GmtrExpr_ctor)
 <LI><a href="#[a]">GetScrnSize</a> from dev_lcdusartgpu.o(i.GetScrnSize) referenced 2 times from dev_lcdusartgpu.o(.data)
 <LI><a href="#[127]">GhPic_vDraw</a> from gh_pic.o(i.GhPic_vDraw) referenced from gh_pic.o(i.GhPic_ctor)
 <LI><a href="#[128]">GhRec_vDraw</a> from gh_rectangle.o(i.GhRec_vDraw) referenced from gh_rectangle.o(i.GhRectangle_ctor)
 <LI><a href="#[12a]">GhTxt_GetSize</a> from gh_txt.o(i.GhTxt_GetSize) referenced from gh_txt.o(i.GhTxt_ctor)
 <LI><a href="#[129]">GhTxt_vDraw</a> from gh_txt.o(i.GhTxt_vDraw) referenced from gh_txt.o(i.GhTxt_ctor)
 <LI><a href="#[1df]">GpioDeInit</a> from drive_gpio.o(i.GpioDeInit) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[1de]">GpioInit</a> from drive_gpio.o(i.GpioInit) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[1e0]">GpioRead</a> from drive_gpio.o(i.GpioRead) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[1e3]">GpioSetEncode</a> from drive_gpio.o(i.GpioSetEncode) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[1e2]">GpioSetIrqHdl</a> from drive_gpio.o(i.GpioSetIrqHdl) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[1e5]">GpioTest</a> from drive_gpio.o(i.GpioTest) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[1e1]">GpioWrite</a> from drive_gpio.o(i.GpioWrite) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[1e4]">Gpio_control_irq</a> from drive_gpio.o(i.Gpio_control_irq) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[139]">HBR_Update_mdl_chn_data</a> from hmi_bargraph.o(i.HBR_Update_mdl_chn_data) referenced from hmi_bargraph.o(i.HMI_bar_ctor)
 <LI><a href="#[150]">HDT_Update_mdl_chn_data</a> from hmi_data.o(i.HDT_Update_mdl_chn_data) referenced from hmi_data.o(i.HMI_data_ctor)
 <LI><a href="#[149]">HMI_Btn_backward</a> from hmi.o(i.HMI_Btn_backward) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[148]">HMI_Btn_forward</a> from hmi.o(i.HMI_Btn_forward) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[14a]">HMI_Btn_jumpout</a> from hmi.o(i.HMI_Btn_jumpout) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[145]">HMI_Build_cmp</a> from hmi.o(i.HMI_Build_cmp) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[1af]">HMI_CRV_Build_cmp</a> from hmi_curve.o(i.HMI_CRV_Build_cmp) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[1b0]">HMI_CRV_HST_Run</a> from hmi_curve.o(i.HMI_CRV_HST_Run) referenced from hmi_curve.o(i.RT_trendHmi_InitSheet)
 <LI><a href="#[1aa]">HMI_CRV_RTV_Run</a> from hmi_curve.o(i.HMI_CRV_RTV_Run) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[1aa]">HMI_CRV_RTV_Run</a> from hmi_curve.o(i.HMI_CRV_RTV_Run) referenced from hmi_curve.o(i.RT_trendHmi_InitSheet)
 <LI><a href="#[146]">HMI_Clean_cmp</a> from hmi.o(i.HMI_Clean_cmp) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[131]">HMI_Flush</a> from hmi.o(i.HMI_Flush) referenced from hmi.o(i.HMI_Flush)
 <LI><a href="#[131]">HMI_Flush</a> from hmi.o(i.HMI_Flush) referenced from hmi.o(i.HMI_Init)
 <LI><a href="#[154]">HMI_MAIN_Run</a> from hmi_main.o(i.HMI_MAIN_Run) referenced from hmi_main.o(i.HMI_main_ctor)
 <LI><a href="#[13b]">HMI_Run</a> from hmi.o(i.HMI_Run) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[161]">HMI_SBG_Build_component</a> from hmi_striped_background.o(i.HMI_SBG_Build_component) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[15f]">HMI_SBG_Clear_focus</a> from hmi_striped_background.o(i.HMI_SBG_Clear_focus) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[15d]">HMI_SBG_Compose_hit</a> from hmi_striped_background.o(i.HMI_SBG_Compose_hit) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[159]">HMI_SBG_Hide</a> from hmi_striped_background.o(i.HMI_SBG_Hide) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[15b]">HMI_SBG_Hit</a> from hmi_striped_background.o(i.HMI_SBG_Hit) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[157]">HMI_SBG_Init</a> from hmi_striped_background.o(i.HMI_SBG_Init) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[15e]">HMI_SBG_Init_focus</a> from hmi_striped_background.o(i.HMI_SBG_Init_focus) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[158]">HMI_SBG_Init_sheet</a> from hmi_striped_background.o(i.HMI_SBG_Init_sheet) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[15c]">HMI_SBG_Long_hit</a> from hmi_striped_background.o(i.HMI_SBG_Long_hit) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[15a]">HMI_SBG_Show</a> from hmi_striped_background.o(i.HMI_SBG_Show) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[160]">HMI_SBG_Show_focus</a> from hmi_striped_background.o(i.HMI_SBG_Show_focus) referenced from hmi_striped_background.o(i.HMI_striped_background_ctor)
 <LI><a href="#[147]">HMI_Show_cmp</a> from hmi.o(i.HMI_Show_cmp) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[156]">HMN_Update_mdl_chn_data</a> from hmi_main.o(i.HMN_Update_mdl_chn_data) referenced from hmi_main.o(i.HMI_main_ctor)
 <LI><a href="#[11]">HST_midv_change</a> from hmi_curve.o(i.HST_midv_change) referenced 2 times from hmi_curve.o(.data)
 <LI><a href="#[8b]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[191]">Hide_ico_tips</a> from hmi_menu.o(i.Hide_ico_tips) referenced from hmi_news_select.o(i.NewSlct_HMI_ctor)
 <LI><a href="#[191]">Hide_ico_tips</a> from hmi_menu.o(i.Hide_ico_tips) referenced from hmi_menu.o(i.menuHMI_ctor)
 <LI><a href="#[13e]">HitHandle</a> from hmi.o(i.HitHandle) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[13a]">HmiShow</a> from hmi.o(i.HmiShow) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[b3]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b2]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b5]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b4]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12b]">Init</a> from glyph.o(i.Init) referenced from glyph.o(i.Glyph_ctor)
 <LI><a href="#[d5]">Init_Accm_HMI</a> from hmi_accumulate .o(i.Init_Accm_HMI) referenced from hmi_accumulate .o(i.Accm_HMI_ctor)
 <LI><a href="#[151]">Init_HMI_main</a> from hmi_main.o(i.Init_HMI_main) referenced from hmi_main.o(i.HMI_main_ctor)
 <LI><a href="#[18d]">Init_Nws_HMI</a> from hmi_news_select.o(i.Init_Nws_HMI) referenced from hmi_news_select.o(i.NewSlct_HMI_ctor)
 <LI><a href="#[1a6]">Init_RT_trendHMI</a> from hmi_curve.o(i.Init_RT_trendHMI) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[1b4]">Init_Setup_HMI</a> from hmi_setup.o(i.Init_Setup_HMI) referenced from hmi_setup.o(i.Setup_HMI_ctor)
 <LI><a href="#[133]">Init_barGhHMI</a> from hmi_bargraph.o(i.Init_barGhHMI) referenced from hmi_bargraph.o(i.HMI_bar_ctor)
 <LI><a href="#[1d6]">Init_cmmHmi</a> from hmi_comm.o(i.Init_cmmHmi) referenced from hmi_comm.o(i.cmmHmi_ctor)
 <LI><a href="#[ea]">Init_ctime</a> from ctltimer.o(i.Init_ctime) referenced from ctltimer.o(i.CtlTimer_ctor)
 <LI><a href="#[14b]">Init_dataHMI</a> from hmi_data.o(i.Init_dataHMI) referenced from hmi_data.o(i.HMI_data_ctor)
 <LI><a href="#[142]">Init_focus</a> from hmi.o(i.Init_focus) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[1f2]">Init_kbmHmi</a> from hmi_keyboard.o(i.Init_kbmHmi) referenced from hmi_keyboard.o(i.keyboardHMI_ctor)
 <LI><a href="#[1fb]">Init_menuHMI</a> from hmi_menu.o(i.Init_menuHMI) referenced from hmi_menu.o(i.menuHMI_ctor)
 <LI><a href="#[1fa]">Init_usb_when_idle</a> from main.o(i.Init_usb_when_idle) referenced from main.o(i.main)
 <LI><a href="#[21d]">Init_winHmi</a> from hmi_windowns.o(i.Init_winHmi) referenced from hmi_windowns.o(i.winHmi_ctor)
 <LI><a href="#[197]">InputInptSht</a> from ntinput.o(i.InputInptSht) referenced from ntinput.o(i.NtInput_ctor)
 <LI><a href="#[10e]">Ioctol_devSpi</a> from dev_spi.o(i.Ioctol_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[fc]">Ioctol_dev_IIC</a> from dev_iic.o(i.Ioctol_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[1f5]">KBHide</a> from hmi_keyboard.o(i.KBHide) referenced from hmi_keyboard.o(i.keyboardHMI_ctor)
 <LI><a href="#[1f4]">KBInitSheet</a> from hmi_keyboard.o(i.KBInitSheet) referenced from hmi_keyboard.o(i.keyboardHMI_ctor)
 <LI><a href="#[1f9]">KYB_Show_cmp</a> from hmi_keyboard.o(i.KYB_Show_cmp) referenced from hmi_keyboard.o(i.keyboardHMI_ctor)
 <LI><a href="#[e9]">KeyUpdate</a> from ctlkey.o(i.KeyUpdate) referenced from ctlkey.o(i.CtlKey_ctor)
 <LI><a href="#[167]">Key_DelOb</a> from keyboard.o(i.Key_DelOb) referenced from keyboard.o(i.Keyboard_ctor)
 <LI><a href="#[168]">Key_Run</a> from keyboard.o(i.Key_Run) referenced from keyboard.o(i.Keyboard_ctor)
 <LI><a href="#[166]">Key_addOb</a> from keyboard.o(i.Key_addOb) referenced from keyboard.o(i.Keyboard_ctor)
 <LI><a href="#[16b]">Key_identify_key_msg</a> from keyboard.o(i.Key_identify_key_msg) referenced from keyboard.o(i.Keyboard_ctor)
 <LI><a href="#[169]">Key_notify</a> from keyboard.o(i.Key_notify) referenced from keyboard.o(i.Keyboard_ctor)
 <LI><a href="#[16a]">Key_scan_pins</a> from keyboard.o(i.Key_scan_pins) referenced from keyboard.o(i.Keyboard_ctor)
 <LI><a href="#[1f8]">KeyboardDouHitHandle</a> from hmi_keyboard.o(i.KeyboardDouHitHandle) referenced from hmi_keyboard.o(i.keyboardHMI_ctor)
 <LI><a href="#[1f6]">KeyboardHitHandle</a> from hmi_keyboard.o(i.KeyboardHitHandle) referenced from hmi_keyboard.o(i.keyboardHMI_ctor)
 <LI><a href="#[1f7]">KeyboardLngpshHandle</a> from hmi_keyboard.o(i.KeyboardLngpshHandle) referenced from hmi_keyboard.o(i.keyboardHMI_ctor)
 <LI><a href="#[1f3]">KeyboardShow</a> from hmi_keyboard.o(i.KeyboardShow) referenced from hmi_keyboard.o(i.keyboardHMI_ctor)
 <LI><a href="#[165]">Keyboard_init</a> from keyboard.o(i.Keyboard_init) referenced from keyboard.o(i.Keyboard_ctor)
 <LI><a href="#[13f]">LngpshHandle</a> from hmi.o(i.LngpshHandle) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[173]">MBA_Acc_data_accumulation</a> from modbus_app.o(i.MBA_Acc_data_accumulation) referenced from modbus_app.o(i.MBA_Get_acc_func)
 <LI><a href="#[172]">MBA_Acc_data_real_time</a> from modbus_app.o(i.MBA_Acc_data_real_time) referenced from modbus_app.o(i.MBA_Get_acc_func)
 <LI><a href="#[170]">MBA_Acc_param_PID</a> from modbus_app.o(i.MBA_Acc_param_PID) referenced from modbus_app.o(i.MBA_Get_acc_func)
 <LI><a href="#[16f]">MBA_Acc_param_accumulation</a> from modbus_app.o(i.MBA_Acc_param_accumulation) referenced from modbus_app.o(i.MBA_Get_acc_func)
 <LI><a href="#[16d]">MBA_Acc_param_channel</a> from modbus_app.o(i.MBA_Acc_param_channel) referenced from modbus_app.o(i.MBA_Get_acc_func)
 <LI><a href="#[171]">MBA_Acc_param_flow</a> from modbus_app.o(i.MBA_Acc_param_flow) referenced from modbus_app.o(i.MBA_Get_acc_func)
 <LI><a href="#[16c]">MBA_Acc_param_system</a> from modbus_app.o(i.MBA_Acc_param_system) referenced from modbus_app.o(i.MBA_Get_acc_func)
 <LI><a href="#[16e]">MBA_Acc_param_transmitting</a> from modbus_app.o(i.MBA_Acc_param_transmitting) referenced from modbus_app.o(i.MBA_Get_acc_func)
 <LI><a href="#[174]">MBA_Run</a> from modbus_app.o(i.MBA_Run) referenced from modbus_app.o(i.MBA_Init)
 <LI><a href="#[175]">MDL_Retry</a> from model.o(i.MDL_Retry) referenced from model.o(i.Mdl_notify)
 <LI><a href="#[152]">MainHmiHide</a> from hmi_main.o(i.MainHmiHide) referenced from hmi_main.o(i.HMI_main_ctor)
 <LI><a href="#[155]">MainHmiShow</a> from hmi_main.o(i.MainHmiShow) referenced from hmi_main.o(i.HMI_main_ctor)
 <LI><a href="#[138]">Main_HMI_build_button</a> from hmi_main.o(i.Main_HMI_build_button) referenced from hmi_bargraph.o(i.HMI_bar_ctor)
 <LI><a href="#[138]">Main_HMI_build_button</a> from hmi_main.o(i.Main_HMI_build_button) referenced from hmi_main.o(i.HMI_main_ctor)
 <LI><a href="#[137]">Main_HMI_hit</a> from hmi_main.o(i.Main_HMI_hit) referenced from hmi_bargraph.o(i.HMI_bar_ctor)
 <LI><a href="#[137]">Main_HMI_hit</a> from hmi_main.o(i.Main_HMI_hit) referenced from hmi_main.o(i.HMI_main_ctor)
 <LI><a href="#[163]">Main_USB_event</a> from main.o(i.Main_USB_event) referenced from main.o(i.Init_usb_when_idle)
 <LI><a href="#[12f]">Main_btn_hdl</a> from hmi_main.o(i.Main_btn_hdl) referenced from hmi_curve.o(i.HMI_CRV_Build_cmp)
 <LI><a href="#[12f]">Main_btn_hdl</a> from hmi_main.o(i.Main_btn_hdl) referenced from hmi_main.o(i.Main_HMI_build_button)
 <LI><a href="#[153]">MaininitSheet</a> from hmi_main.o(i.MaininitSheet) referenced from hmi_main.o(i.HMI_main_ctor)
 <LI><a href="#[17e]">MdlChn_getData</a> from model_channel.o(i.MdlChn_getData) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[17b]">MdlChn_init</a> from model_channel.o(i.MdlChn_init) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[182]">MdlChn_modify_sconf</a> from model_channel.o(i.MdlChn_modify_sconf) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[17c]">MdlChn_run</a> from model_channel.o(i.MdlChn_run) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[17d]">MdlChn_self_check</a> from model_channel.o(i.MdlChn_self_check) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[17f]">MdlChn_setData</a> from model_channel.o(i.MdlChn_setData) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[183]">MdlChn_set_by_string</a> from model_channel.o(i.MdlChn_set_by_string) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[181]">MdlChn_to_percentage</a> from model_channel.o(i.MdlChn_to_percentage) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[180]">MdlChn_to_string</a> from model_channel.o(i.MdlChn_to_string) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[178]">MdlTime_getData</a> from modeltime.o(i.MdlTime_getData) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[176]">MdlTime_init</a> from modeltime.o(i.MdlTime_init) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[177]">MdlTime_run</a> from modeltime.o(i.MdlTime_run) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[179]">MdlTime_set_by_string</a> from modeltime.o(i.MdlTime_set_by_string) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[17a]">MdlTime_to_string</a> from modeltime.o(i.MdlTime_to_string) referenced from modeltime.o(i.ModelTime_ctor)
 <LI><a href="#[188]">Mdl_addTmMdl</a> from model.o(i.Mdl_addTmMdl) referenced from model.o(i.Model_ctor)
 <LI><a href="#[184]">Mdl_attach</a> from model.o(i.Mdl_attach) referenced from model.o(i.Model_ctor)
 <LI><a href="#[189]">Mdl_delTmMdl</a> from model.o(i.Mdl_delTmMdl) referenced from model.o(i.Model_ctor)
 <LI><a href="#[185]">Mdl_detach</a> from model.o(i.Mdl_detach) referenced from model.o(i.Model_ctor)
 <LI><a href="#[186]">Mdl_getData</a> from model.o(i.Mdl_getData) referenced from model.o(i.Model_ctor)
 <LI><a href="#[18a]">Mdl_notify</a> from model.o(i.Mdl_notify) referenced from model.o(i.Model_ctor)
 <LI><a href="#[187]">Mdl_setData</a> from model.o(i.Mdl_setData) referenced from model.o(i.Model_ctor)
 <LI><a href="#[8c]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[200]">MenuClearFocuse</a> from hmi_menu.o(i.MenuClearFocuse) referenced from hmi_menu.o(i.menuHMI_ctor)
 <LI><a href="#[1ff]">MenuHitHandle</a> from hmi_menu.o(i.MenuHitHandle) referenced from hmi_menu.o(i.menuHMI_ctor)
 <LI><a href="#[1fc]">MenuHmiHide</a> from hmi_menu.o(i.MenuHmiHide) referenced from hmi_menu.o(i.menuHMI_ctor)
 <LI><a href="#[1fe]">MenuHmiShow</a> from hmi_menu.o(i.MenuHmiShow) referenced from hmi_menu.o(i.menuHMI_ctor)
 <LI><a href="#[201]">MenuShowFocuse</a> from hmi_menu.o(i.MenuShowFocuse) referenced from hmi_menu.o(i.menuHMI_ctor)
 <LI><a href="#[1fd]">MenuinitSheet</a> from hmi_menu.o(i.MenuinitSheet) referenced from hmi_menu.o(i.menuHMI_ctor)
 <LI><a href="#[18b]">NLM_Btn_hdl</a> from stg_news_alarm.o(i.NLM_Btn_hdl) referenced from stg_news_alarm.o(i.NLM_Build_component)
 <LI><a href="#[2f]">NLM_Build_component</a> from stg_news_alarm.o(i.NLM_Build_component) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[36]">NLM_Commit</a> from stg_news_alarm.o(i.NLM_Commit) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[2d]">NLM_Entry</a> from stg_news_alarm.o(i.NLM_Entry) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[37]">NLM_Exit</a> from stg_news_alarm.o(i.NLM_Exit) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[35]">NLM_Get_focus_data</a> from stg_news_alarm.o(i.NLM_Get_focus_data) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[2e]">NLM_Init</a> from stg_news_alarm.o(i.NLM_Init) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[31]">NLM_Key_DN</a> from stg_news_alarm.o(i.NLM_Key_DN) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[34]">NLM_Key_ET</a> from stg_news_alarm.o(i.NLM_Key_ET) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[32]">NLM_Key_LT</a> from stg_news_alarm.o(i.NLM_Key_LT) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[33]">NLM_Key_RT</a> from stg_news_alarm.o(i.NLM_Key_RT) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[30]">NLM_Key_UP</a> from stg_news_alarm.o(i.NLM_Key_UP) referenced 2 times from stg_news_alarm.o(.data)
 <LI><a href="#[8a]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18c]">NPW_Btn_hdl</a> from stg_news_power.o(i.NPW_Btn_hdl) referenced from stg_news_power.o(i.NPW_Build_component)
 <LI><a href="#[3a]">NPW_Build_component</a> from stg_news_power.o(i.NPW_Build_component) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[41]">NPW_Commit</a> from stg_news_power.o(i.NPW_Commit) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[38]">NPW_Entry</a> from stg_news_power.o(i.NPW_Entry) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[42]">NPW_Exit</a> from stg_news_power.o(i.NPW_Exit) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[40]">NPW_Get_focus_data</a> from stg_news_power.o(i.NPW_Get_focus_data) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[39]">NPW_Init</a> from stg_news_power.o(i.NPW_Init) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[3c]">NPW_Key_DN</a> from stg_news_power.o(i.NPW_Key_DN) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[3f]">NPW_Key_ET</a> from stg_news_power.o(i.NPW_Key_ET) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[3d]">NPW_Key_LT</a> from stg_news_power.o(i.NPW_Key_LT) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[3e]">NPW_Key_RT</a> from stg_news_power.o(i.NPW_Key_RT) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[3b]">NPW_Key_UP</a> from stg_news_power.o(i.NPW_Key_UP) referenced 2 times from stg_news_power.o(.data)
 <LI><a href="#[194]">Nws_HMI_clear_focus</a> from hmi_news_select.o(i.Nws_HMI_clear_focus) referenced from hmi_news_select.o(i.NewSlct_HMI_ctor)
 <LI><a href="#[18f]">Nws_HMI_hide</a> from hmi_news_select.o(i.Nws_HMI_hide) referenced from hmi_news_select.o(i.NewSlct_HMI_ctor)
 <LI><a href="#[192]">Nws_HMI_hitHandle</a> from hmi_news_select.o(i.Nws_HMI_hitHandle) referenced from hmi_news_select.o(i.NewSlct_HMI_ctor)
 <LI><a href="#[193]">Nws_HMI_init_focus</a> from hmi_news_select.o(i.Nws_HMI_init_focus) referenced from hmi_news_select.o(i.NewSlct_HMI_ctor)
 <LI><a href="#[195]">Nws_HMI_show_focus</a> from hmi_news_select.o(i.Nws_HMI_show_focus) referenced from hmi_news_select.o(i.NewSlct_HMI_ctor)
 <LI><a href="#[18e]">Nws_initSheet</a> from hmi_news_select.o(i.Nws_initSheet) referenced from hmi_news_select.o(i.NewSlct_HMI_ctor)
 <LI><a href="#[10a]">Open_devSpi</a> from dev_spi.o(i.Open_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[f8]">Open_dev_IIC</a> from dev_iic.o(i.Open_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[1a2]">PGB_Build_bar</a> from component_progress_bar.o(i.PGB_Build_bar) referenced from component_progress_bar.o(i.Progress_bar_ctor)
 <LI><a href="#[198]">PGB_Cal_cross</a> from component_progress_bar.o(i.PGB_Cal_cross) referenced from component_progress_bar.o(i.PGB_Init)
 <LI><a href="#[199]">PGB_Cal_paraller</a> from component_progress_bar.o(i.PGB_Cal_paraller) referenced from component_progress_bar.o(i.PGB_Init)
 <LI><a href="#[1a4]">PGB_Delete_bar</a> from component_progress_bar.o(i.PGB_Delete_bar) referenced from component_progress_bar.o(i.Progress_bar_ctor)
 <LI><a href="#[1a0]">PGB_Init</a> from component_progress_bar.o(i.PGB_Init) referenced from component_progress_bar.o(i.Progress_bar_ctor)
 <LI><a href="#[1a1]">PGB_Set_self</a> from component_progress_bar.o(i.PGB_Set_self) referenced from component_progress_bar.o(i.Progress_bar_ctor)
 <LI><a href="#[1a5]">PGB_Show_bar</a> from component_progress_bar.o(i.PGB_Show_bar) referenced from component_progress_bar.o(i.Progress_bar_ctor)
 <LI><a href="#[1a3]">PGB_Update_bar</a> from component_progress_bar.o(i.PGB_Update_bar) referenced from component_progress_bar.o(i.Progress_bar_ctor)
 <LI><a href="#[94]">PVD_IRQHandler</a> from power.o(i.PVD_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19b]">Pcf8563_get</a> from rtc_pcf8563.o(i.Pcf8563_get) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[19a]">Pcf8563_init</a> from rtc_pcf8563.o(i.Pcf8563_init) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[19d]">Pcf8563_readReg</a> from rtc_pcf8563.o(i.Pcf8563_readReg) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[19c]">Pcf8563_set</a> from rtc_pcf8563.o(i.Pcf8563_set) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[19e]">Pcf8563_writeReg</a> from rtc_pcf8563.o(i.Pcf8563_writeReg) referenced from rtc_pcf8563.o(i.Pcf8563_ctor)
 <LI><a href="#[91]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19f]">PicInptSht</a> from picexpr.o(i.PicInptSht) referenced from picexpr.o(i.PicExpr_ctor)
 <LI><a href="#[98]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[130]">RLT_btn_hdl</a> from hmi_curve.o(i.RLT_btn_hdl) referenced from hmi_curve.o(i.HMI_CRV_HST_Run)
 <LI><a href="#[1ac]">RLT_clear_focus</a> from hmi_curve.o(i.RLT_clear_focus) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[1ab]">RLT_init_focus</a> from hmi_curve.o(i.RLT_init_focus) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[1ad]">RLT_show_focus</a> from hmi_curve.o(i.RLT_show_focus) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[bc]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[96]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTV_midv_change</a> from hmi_curve.o(i.RTV_midv_change) referenced 2 times from hmi_curve.o(.data)
 <LI><a href="#[1a8]">RT_trendHmi_HideSheet</a> from hmi_curve.o(i.RT_trendHmi_HideSheet) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[1ae]">RT_trendHmi_HitHandle</a> from hmi_curve.o(i.RT_trendHmi_HitHandle) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[1a7]">RT_trendHmi_InitSheet</a> from hmi_curve.o(i.RT_trendHmi_InitSheet) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[1a9]">RT_trendHmi_Show</a> from hmi_curve.o(i.RT_trendHmi_Show) referenced from hmi_curve.o(i.RLT_trendHMI_ctor)
 <LI><a href="#[10c]">Read_devSpi</a> from dev_spi.o(i.Read_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[fa]">Read_dev_IIC</a> from dev_iic.o(i.Read_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[89]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">SAD_Build_component</a> from stg_acc_day.o(i.SAD_Build_component) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[20]">SAD_Commit</a> from stg_acc_day.o(i.SAD_Commit) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[17]">SAD_Entry</a> from stg_acc_day.o(i.SAD_Entry) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[21]">SAD_Exit</a> from stg_acc_day.o(i.SAD_Exit) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[1f]">SAD_Get_focus_data</a> from stg_acc_day.o(i.SAD_Get_focus_data) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[18]">SAD_Init</a> from stg_acc_day.o(i.SAD_Init) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[1b]">SAD_Key_DN</a> from stg_acc_day.o(i.SAD_Key_DN) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[1e]">SAD_Key_ET</a> from stg_acc_day.o(i.SAD_Key_ET) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[1c]">SAD_Key_LT</a> from stg_acc_day.o(i.SAD_Key_LT) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[1d]">SAD_Key_RT</a> from stg_acc_day.o(i.SAD_Key_RT) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[1a]">SAD_Key_UP</a> from stg_acc_day.o(i.SAD_Key_UP) referenced 2 times from stg_acc_day.o(.data)
 <LI><a href="#[24]">SAM_Build_component</a> from stg_acc_month.o(i.SAM_Build_component) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[2b]">SAM_Commit</a> from stg_acc_month.o(i.SAM_Commit) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[22]">SAM_Entry</a> from stg_acc_month.o(i.SAM_Entry) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[2c]">SAM_Exit</a> from stg_acc_month.o(i.SAM_Exit) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[2a]">SAM_Get_focus_data</a> from stg_acc_month.o(i.SAM_Get_focus_data) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[23]">SAM_Init</a> from stg_acc_month.o(i.SAM_Init) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[26]">SAM_Key_DN</a> from stg_acc_month.o(i.SAM_Key_DN) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[29]">SAM_Key_ET</a> from stg_acc_month.o(i.SAM_Key_ET) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[27]">SAM_Key_LT</a> from stg_acc_month.o(i.SAM_Key_LT) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[28]">SAM_Key_RT</a> from stg_acc_month.o(i.SAM_Key_RT) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[25]">SAM_Key_UP</a> from stg_acc_month.o(i.SAM_Key_UP) referenced 2 times from stg_acc_month.o(.data)
 <LI><a href="#[c4]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b6]">SPI1_IRQHandler</a> from drive_spi.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b7]">SPI2_IRQHandler</a> from drive_spi.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c6]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7a]">SPR_Entry</a> from stg_super_set.o(i.SPR_Entry) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[7c]">SPR_build_component</a> from stg_super_set.o(i.SPR_build_component) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[83]">SPR_commit</a> from stg_super_set.o(i.SPR_commit) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[82]">SPR_get_focusdata</a> from stg_super_set.o(i.SPR_get_focusdata) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[7b]">SPR_init</a> from stg_super_set.o(i.SPR_init) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[7e]">SPR_key_dn</a> from stg_super_set.o(i.SPR_key_dn) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[81]">SPR_key_er</a> from stg_super_set.o(i.SPR_key_er) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[7f]">SPR_key_lt</a> from stg_super_set.o(i.SPR_key_lt) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[80]">SPR_key_rt</a> from stg_super_set.o(i.SPR_key_rt) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[7d]">SPR_key_up</a> from stg_super_set.o(i.SPR_key_up) referenced 2 times from stg_super_set.o(.data)
 <LI><a href="#[1b2]">SSA_Btn_hdl</a> from stg_set_accumulate.o(i.SSA_Btn_hdl) referenced from stg_set_accumulate.o(i.SSA_Build_component)
 <LI><a href="#[45]">SSA_Build_component</a> from stg_set_accumulate.o(i.SSA_Build_component) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[4c]">SSA_Commit</a> from stg_set_accumulate.o(i.SSA_Commit) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[43]">SSA_Entry</a> from stg_set_accumulate.o(i.SSA_Entry) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[4d]">SSA_Exit</a> from stg_set_accumulate.o(i.SSA_Exit) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[4b]">SSA_Get_focus_data</a> from stg_set_accumulate.o(i.SSA_Get_focus_data) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[44]">SSA_Init</a> from stg_set_accumulate.o(i.SSA_Init) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[47]">SSA_Key_DN</a> from stg_set_accumulate.o(i.SSA_Key_DN) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[4a]">SSA_Key_ET</a> from stg_set_accumulate.o(i.SSA_Key_ET) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[48]">SSA_Key_LT</a> from stg_set_accumulate.o(i.SSA_Key_LT) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[49]">SSA_Key_RT</a> from stg_set_accumulate.o(i.SSA_Key_RT) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[46]">SSA_Key_UP</a> from stg_set_accumulate.o(i.SSA_Key_UP) referenced 2 times from stg_set_accumulate.o(.data)
 <LI><a href="#[1c0]">STG_Open_file</a> from storage.o(i.STG_Open_file) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[1b9]">STP_Compose_hit</a> from hmi_setup.o(i.STP_Compose_hit) referenced from hmi_setup.o(i.Setup_HMI_ctor)
 <LI><a href="#[8f]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b1]">SYS_Btn_hdl</a> from stg_super_set.o(i.SYS_Btn_hdl) referenced from stg_super_set.o(i.SPR_build_component)
 <LI><a href="#[1b3]">SYS_Btn_hdl</a> from stg_set_system.o(i.SYS_Btn_hdl) referenced from stg_set_system.o(i.SYS_build_component)
 <LI><a href="#[79]">SYS_Exit</a> from stg_set_system.o(i.SYS_Exit) referenced 4 times from stg_set_system.o(.data)
 <LI><a href="#[71]">SYS_build_component</a> from stg_set_system.o(i.SYS_build_component) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[132]">Setting_Sy_cmd</a> from hmi_striped_background.o(i.Setting_Sy_cmd) referenced from hmi_striped_background.o(i.HMI_SBG_Init_sheet)
 <LI><a href="#[132]">Setting_Sy_cmd</a> from hmi_striped_background.o(i.Setting_Sy_cmd) referenced from hmi_striped_background.o(i.Setting_Sy_cmd)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_set_alarm.o(i.ALS_build_component)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_set_channel.o(i.CNS_build_component)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_set_databackup.o(i.DBP_build_component)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from hmi_striped_background.o(i.HMI_SBG_Show_entry)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_news_alarm.o(i.NLM_Build_component)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_news_power.o(i.NPW_Build_component)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_acc_day.o(i.SAD_Build_component)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_acc_month.o(i.SAM_Build_component)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_super_set.o(i.SPR_build_component)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_set_accumulate.o(i.SSA_Build_component)
 <LI><a href="#[d3]">Setting_btn_hdl</a> from hmi_striped_background.o(i.Setting_btn_hdl) referenced from stg_set_system.o(i.SYS_build_component)
 <LI><a href="#[1bb]">Setup_HMI_clear_focus</a> from hmi_setup.o(i.Setup_HMI_clear_focus) referenced from hmi_setup.o(i.Setup_HMI_ctor)
 <LI><a href="#[164]">Setup_HMI_cmd</a> from hmi_setup.o(i.Setup_HMI_cmd) referenced from hmi_setup.o(i.Input_Password)
 <LI><a href="#[1b6]">Setup_HMI_hide</a> from hmi_setup.o(i.Setup_HMI_hide) referenced from hmi_setup.o(i.Setup_HMI_ctor)
 <LI><a href="#[1b8]">Setup_HMI_hitHandle</a> from hmi_setup.o(i.Setup_HMI_hitHandle) referenced from hmi_setup.o(i.Setup_HMI_ctor)
 <LI><a href="#[1ba]">Setup_HMI_init_focus</a> from hmi_setup.o(i.Setup_HMI_init_focus) referenced from hmi_setup.o(i.Setup_HMI_ctor)
 <LI><a href="#[1bc]">Setup_HMI_show_focus</a> from hmi_setup.o(i.Setup_HMI_show_focus) referenced from hmi_setup.o(i.Setup_HMI_ctor)
 <LI><a href="#[1b5]">Setup_initSheet</a> from hmi_setup.o(i.Setup_initSheet) referenced from hmi_setup.o(i.Setup_HMI_ctor)
 <LI><a href="#[d8]">Show_Accm_HMI</a> from hmi_accumulate .o(i.Show_Accm_HMI) referenced from hmi_accumulate .o(i.Accm_HMI_ctor)
 <LI><a href="#[190]">Show_Nws_HMI</a> from hmi_news_select.o(i.Show_Nws_HMI) referenced from hmi_news_select.o(i.NewSlct_HMI_ctor)
 <LI><a href="#[1b7]">Show_Setup_HMI</a> from hmi_setup.o(i.Show_Setup_HMI) referenced from hmi_setup.o(i.Setup_HMI_ctor)
 <LI><a href="#[144]">Show_focus</a> from hmi.o(i.Show_focus) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[1bf]">Strg_WR_stored_data</a> from storage.o(i.Strg_WR_stored_data) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[1bd]">Strg_init</a> from storage.o(i.Strg_init) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[1be]">Strg_rd_stored_data</a> from storage.o(i.Strg_rd_stored_data) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[13d]">SwitchBack</a> from hmi.o(i.SwitchBack) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[13c]">SwitchHMI</a> from hmi.o(i.SwitchHMI) referenced from hmi.o(i.HMI_ctor)
 <LI><a href="#[6f]">SysStrategy_entry</a> from stg_set_system.o(i.SysStrategy_entry) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[92]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">Sys_commit</a> from stg_set_system.o(i.Sys_commit) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[77]">Sys_get_focusdata</a> from stg_set_system.o(i.Sys_get_focusdata) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[70]">Sys_init</a> from stg_set_system.o(i.Sys_init) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[73]">Sys_key_dn</a> from stg_set_system.o(i.Sys_key_dn) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[76]">Sys_key_er</a> from stg_set_system.o(i.Sys_key_er) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[74]">Sys_key_lt</a> from stg_set_system.o(i.Sys_key_lt) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[75]">Sys_key_rt</a> from stg_set_system.o(i.Sys_key_rt) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[72]">Sys_key_up</a> from stg_set_system.o(i.Sys_key_up) referenced 2 times from stg_set_system.o(.data)
 <LI><a href="#[d1]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[95]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ab]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ae]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ad]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ac]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[af]">TIM2_IRQHandler</a> from times.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b0]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b1]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c5]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c9]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ca]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[be]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c1]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c0]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bf]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e3]">TIP_Clear_ico_tips</a> from component_tips.o(i.TIP_Clear_ico_tips) referenced from component_tips.o(i.CMP_tips_ctor)
 <LI><a href="#[e4]">TIP_Hide_ico_tips</a> from component_tips.o(i.TIP_Hide_ico_tips) referenced from component_tips.o(i.CMP_tips_ctor)
 <LI><a href="#[e1]">TIP_Init</a> from component_tips.o(i.TIP_Init) referenced from component_tips.o(i.CMP_tips_ctor)
 <LI><a href="#[e2]">TIP_Show_ico_tips</a> from component_tips.o(i.TIP_Show_ico_tips) referenced from component_tips.o(i.CMP_tips_ctor)
 <LI><a href="#[e5]">TIP_Show_tips</a> from component_tips.o(i.TIP_Show_tips) referenced from component_tips.o(i.CMP_tips_ctor)
 <LI><a href="#[10f]">Test_devSpi</a> from dev_spi.o(i.Test_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[fd]">Test_dev_IIC</a> from dev_iic.o(i.Test_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[226]">ThrdKeyRun</a> from main.o(i.ThrdKeyRun) referenced from main.o(.constdata)
 <LI><a href="#[1c1]">TxtInptSht</a> from txtexpr.o(i.TxtInptSht) referenced from txtexpr.o(i.TxtExpr_ctor)
 <LI><a href="#[c7]">UART4_IRQHandler</a> from drive_uart.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c8]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c2]">UHI_intr</a> from usb_hardware_interface.o(i.UHI_intr) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1cb]">UHI_usb_cs_off</a> from usb_hardware_interface.o(i.UHI_usb_cs_off) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1cc]">UHI_usb_cs_on</a> from usb_hardware_interface.o(i.UHI_usb_cs_on) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1c7]">UHI_usb_delay_ms</a> from usb_hardware_interface.o(i.UHI_usb_delay_ms) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1ca]">UHI_usb_get_time</a> from usb_hardware_interface.o(i.UHI_usb_get_time) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1c3]">UHI_usb_power</a> from usb_hardware_interface.o(i.UHI_usb_power) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1c9]">UHI_usb_read_bytes</a> from usb_hardware_interface.o(i.UHI_usb_read_bytes) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1c6]">UHI_usb_read_intr_pin</a> from usb_hardware_interface.o(i.UHI_usb_read_intr_pin) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1c4]">UHI_usb_reset</a> from usb_hardware_interface.o(i.UHI_usb_reset) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1c5]">UHI_usb_set_irq</a> from usb_hardware_interface.o(i.UHI_usb_set_irq) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[1c8]">UHI_usb_write_bytes</a> from usb_hardware_interface.o(i.UHI_usb_write_bytes) referenced from usb_hardware_interface.o(i.UHI_Init)
 <LI><a href="#[b8]">USART1_IRQHandler</a> from drive_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b9]">USART2_IRQHandler</a> from drive_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ba]">USART3_IRQHandler</a> from drive_uart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bd]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a6]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a7]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e7]">UartDeInit</a> from drive_uart.o(i.UartDeInit) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[1ea]">UartGiveBackPlayloadBuf</a> from drive_uart.o(i.UartGiveBackPlayloadBuf) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[1e6]">UartInit</a> from drive_uart.o(i.UartInit) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[1ec]">UartIoctol</a> from drive_uart.o(i.UartIoctol) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[108]">UartLedRxHdl</a> from dev_uart.o(i.UartLedRxHdl) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[109]">UartLedTxHdl</a> from dev_uart.o(i.UartLedTxHdl) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[106]">UartPostRxSem</a> from dev_uart.o(i.UartPostRxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[107]">UartPostTxSem</a> from dev_uart.o(i.UartPostTxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[1e8]">UartRead</a> from drive_uart.o(i.UartRead) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[1ee]">UartSetIdp</a> from drive_uart.o(i.UartSetIdp) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[1ed]">UartSetLedHdl</a> from drive_uart.o(i.UartSetLedHdl) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[1f0]">UartSetPostSem</a> from drive_uart.o(i.UartSetPostSem) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[1ef]">UartSetWaitSem</a> from drive_uart.o(i.UartSetWaitSem) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[1e9]">UartTakeUpPlayloadBuf</a> from drive_uart.o(i.UartTakeUpPlayloadBuf) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[1f1]">UartTest</a> from drive_uart.o(i.UartTest) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[104]">UartWaitRxSem</a> from dev_uart.o(i.UartWaitRxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[105]">UartWaitTxSem</a> from dev_uart.o(i.UartWaitTxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[1eb]">UartWrite</a> from drive_uart.o(i.UartWrite) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[14]">Upp_CalculateDown</a> from hmi_keyboard.o(i.Upp_CalculateDown) referenced 2 times from hmi_keyboard.o(.data)
 <LI><a href="#[15]">Upp_CalculateLeft</a> from hmi_keyboard.o(i.Upp_CalculateLeft) referenced 2 times from hmi_keyboard.o(.data)
 <LI><a href="#[16]">Upp_CalculateRight</a> from hmi_keyboard.o(i.Upp_CalculateRight) referenced 2 times from hmi_keyboard.o(.data)
 <LI><a href="#[13]">Upp_CalculateUp</a> from hmi_keyboard.o(i.Upp_CalculateUp) referenced 2 times from hmi_keyboard.o(.data)
 <LI><a href="#[8e]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[87]">Usb_deal_fail</a> from usb.o(i.Usb_deal_fail) referenced 2 times from usb.o(.data)
 <LI><a href="#[88]">Usb_deal_identify</a> from usb.o(i.Usb_deal_identify) referenced 2 times from usb.o(.data)
 <LI><a href="#[85]">Usb_deal_insert</a> from usb.o(i.Usb_deal_insert) referenced 2 times from usb.o(.data)
 <LI><a href="#[86]">Usb_deal_remove</a> from usb.o(i.Usb_deal_remove) referenced 2 times from usb.o(.data)
 <LI><a href="#[1cf]">UtlRtc_get</a> from rtc.o(i.UtlRtc_get) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[1ce]">UtlRtc_init</a> from rtc.o(i.UtlRtc_init) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[1d1]">UtlRtc_readReg</a> from rtc.o(i.UtlRtc_readReg) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[1d0]">UtlRtc_set</a> from rtc.o(i.UtlRtc_set) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[1d2]">UtlRtc_writeReg</a> from rtc.o(i.UtlRtc_writeReg) referenced from rtc.o(i.UtlRtc_ctor)
 <LI><a href="#[12]">VK_Uppercase_init</a> from hmi_keyboard.o(i.VK_Uppercase_init) referenced 2 times from hmi_keyboard.o(.data)
 <LI><a href="#[215]">W25Q_Erase_addr</a> from hw_w25q.o(i.W25Q_Erase_addr) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[21c]">W25Q_Flush</a> from hw_w25q.o(i.W25Q_Flush) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[219]">W25Q_Raw_Read</a> from hw_w25q.o(i.W25Q_Raw_Read) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[217]">W25Q_Raw_write</a> from hw_w25q.o(i.W25Q_Raw_write) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[213]">W25Q_WP</a> from hw_w25q.o(i.W25Q_WP) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[214]">W25Q_erase</a> from hw_w25q.o(i.W25Q_erase) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[21a]">W25Q_lock</a> from hw_w25q.o(i.W25Q_lock) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[21b]">W25Q_unlock</a> from hw_w25q.o(i.W25Q_unlock) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[220]">WIN_Show_cmp</a> from hmi_windowns.o(i.WIN_Show_cmp) referenced from hmi_windowns.o(i.winHmi_ctor)
 <LI><a href="#[93]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[222]">WinHmi_hit</a> from hmi_windowns.o(i.WinHmi_hit) referenced from hmi_windowns.o(i.winHmi_ctor)
 <LI><a href="#[21f]">Win_initSheet</a> from hmi_windowns.o(i.Win_initSheet) referenced from hmi_windowns.o(i.winHmi_ctor)
 <LI><a href="#[10d]">Write_devSpi</a> from dev_spi.o(i.Write_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[fb]">Write_dev_IIC</a> from dev_iic.o(i.Write_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[d2]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1d4]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[1d5]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[1d3]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0fprintf$8)
 <LI><a href="#[22a]">main</a> from main.o(i.main) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[211]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[229]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[210]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[cf]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[d0]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[202]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[203]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[204]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[205]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[206]">svcSemaphoreCreate</a> from rt_cmsis.o(i.svcSemaphoreCreate) referenced from rt_cmsis.o(i.osSemaphoreCreate)
 <LI><a href="#[207]">svcSemaphoreRelease</a> from rt_cmsis.o(i.svcSemaphoreRelease) referenced from rt_cmsis.o(i.osSemaphoreRelease)
 <LI><a href="#[208]">svcSemaphoreWait</a> from rt_cmsis.o(i.svcSemaphoreWait) referenced from rt_cmsis.o(i.osSemaphoreWait)
 <LI><a href="#[209]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[20a]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[20b]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[20c]">svcThreadYield</a> from rt_cmsis.o(i.svcThreadYield) referenced from rt_cmsis.o(i.osThreadYield)
 <LI><a href="#[20d]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
 <LI><a href="#[20e]">svcTimerCreate</a> from rt_cmsis.o(i.svcTimerCreate) referenced from rt_cmsis.o(i.osTimerCreate)
 <LI><a href="#[20f]">svcTimerStart</a> from rt_cmsis.o(i.svcTimerStart) referenced from rt_cmsis.o(i.osTimerStart)
 <LI><a href="#[12d]">vDraw</a> from glyph.o(i.vDraw) referenced from glyph.o(i.Glyph_ctor)
 <LI><a href="#[216]">w25q_Write</a> from hw_w25q.o(i.w25q_Write) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[212]">w25q_info</a> from hw_w25q.o(i.w25q_info) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[218]">w25q_rd_data</a> from hw_w25q.o(i.w25q_rd_data) referenced from hw_w25q.o(i.w25q_init)
 <LI><a href="#[21e]">winHmiHide</a> from hmi_windowns.o(i.winHmiHide) referenced from hmi_windowns.o(i.winHmi_ctor)
 <LI><a href="#[221]">winHmiShow</a> from hmi_windowns.o(i.winHmiShow) referenced from hmi_windowns.o(i.winHmi_ctor)
 <LI><a href="#[224]">winHmi_ClearFocuse</a> from hmi_windowns.o(i.winHmi_ClearFocuse) referenced from hmi_windowns.o(i.winHmi_ctor)
 <LI><a href="#[223]">winHmi_InitFouse</a> from hmi_windowns.o(i.winHmi_InitFouse) referenced from hmi_windowns.o(i.winHmi_ctor)
 <LI><a href="#[225]">winHmi_ShowFocuse</a> from hmi_windowns.o(i.winHmi_ShowFocuse) referenced from hmi_windowns.o(i.winHmi_ctor)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d2]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[4ee]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[22b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[245]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4ef]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4f0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4f1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4f2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[22d]"></a>_main_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _main_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[4f3]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[4da]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[4f4]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f5]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f6]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[8f]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[234]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[89]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[236]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[310]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_cache
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_rd_cache
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Edit_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_input
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCH_Set_info_buf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCH_Set_alarm_buf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_setData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_getData
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[43b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Btn_hdl
</UL>

<P><STRONG><a name="[4f7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Erase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Edit_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4f8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Clear
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAttribute
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtInptSht
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicInptSht
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeoInptSht
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_input
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAD_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_filename_commit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
</UL>

<P><STRONG><a name="[2a2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Reset
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_default
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_time_2_u32
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_time_2_tm
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Run
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Move
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Win_cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_set_by_string
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_delete
</UL>

<P><STRONG><a name="[4fa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[30e]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Label
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_WrString
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_rcd_by_time
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_alm_pwr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_bacnup_Strategy_entry
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
</UL>

<P><STRONG><a name="[2db]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameVale
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Font
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Colour
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Clr
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Align
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicInptSht
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_bacnup_Strategy_entry
</UL>

<P><STRONG><a name="[32c]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_unit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[351]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveHead
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTail
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAttribute
</UL>

<P><STRONG><a name="[255]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Label
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_WrString
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Build_each_btn
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_float
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_rcd_by_time
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_alm_pwr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_InitSheet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_RTV_Run
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus_text
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Init_sheet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Update_bar
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Util_update
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Data_update
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Alarm_update
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_input
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Util_update
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Status_update
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Data_update
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Alarm_update
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMM_Update_time
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_otherSheets
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Util_update
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Data_update
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_hitHandle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Key_RT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Key_LT
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Get_focus_data
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Entry
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Entry
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Entry
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Entry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAD_Entry
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Popup_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_unlock
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_lock
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_update_syf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_get_focusdata
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_Entry
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_update_syf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_get_focusdata
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysStrategy_entry
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_bacnup_Strategy_entry
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_key_rt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_key_lt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_get_focusdata
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_filename_commit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_len
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnStrategy_entry
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_modify
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_key_rt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_key_lt
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_entry
</UL>

<P><STRONG><a name="[2e6]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileMoth
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_search_file
</UL>

<P><STRONG><a name="[48c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Raw_write
</UL>

<P><STRONG><a name="[34f]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Label
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_WrString
</UL>

<P><STRONG><a name="[350]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_send_done
</UL>

<P><STRONG><a name="[2c1]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_time_2_tm
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Win_cmd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Focus_file_name
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_set_by_string
</UL>

<P><STRONG><a name="[23c]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtInptSht
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeoInptSht
</UL>

<P><STRONG><a name="[23e]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[240]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileYear
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileTime
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileDay
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtAreaAtt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhPic_vDraw
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2CntEff
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_set_password
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Password_match
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Calculations
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
</UL>

<P><STRONG><a name="[4fb]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>

<P><STRONG><a name="[238]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4fc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4fd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[242]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[22c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4fe]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[244]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[246]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[4ff]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[500]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>Accm_HMI_ctor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hmi_accumulate .o(i.Accm_HMI_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Accm_HMI_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_new
</UL>

<P><STRONG><a name="[25b]"></a>Accm_HMI_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_accumulate .o(i.Accm_HMI_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Accm_HMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Accm_HMI
</UL>

<P><STRONG><a name="[262]"></a>Alloc_sem</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_depend.o(i.Alloc_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Alloc_sem &rArr; Set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_UsartInit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Init_file_sem
</UL>

<P><STRONG><a name="[24d]"></a>BTN_Get_Sington</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, component_button.o(i.BTN_Get_Sington))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_new
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_Build_cmp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Show_entry
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Hit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_cmp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Clean_cmp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Build_cmp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Btn_jumpout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Btn_forward
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Btn_backward
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_HMI_hit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_HMI_build_button
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Build_component
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Build_component
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Build_component
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Build_component
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAD_Build_component
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_build_component
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_build_component
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_build_component
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_build_component
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALS_build_component
</UL>

<P><STRONG><a name="[254]"></a>Button_Get_subcnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ntbutton.o(i.Button_Get_subcnt))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Build_each_btn
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_hitHandle
</UL>

<P><STRONG><a name="[27e]"></a>Button_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, component_button.o(i.Button_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_new
</UL>

<P><STRONG><a name="[26a]"></a>Button_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, component_button.o(i.Button_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>

<P><STRONG><a name="[27f]"></a>CH376ByteWrite</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ch376.o(i.CH376ByteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376ByteWrite &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteReqBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write_file
</UL>

<P><STRONG><a name="[283]"></a>CH376DiskMount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ch376.o(i.CH376DiskMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376DiskMount &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
</UL>

<P><STRONG><a name="[285]"></a>CH376DiskQuery</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, ch376.o(i.CH376DiskQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CH376DiskQuery &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_identify
</UL>

<P><STRONG><a name="[287]"></a>CH376FileClose</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ch376.o(i.CH376FileClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH376FileClose &rArr; CH376SendCmdDatWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdDatWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Colse_file
</UL>

<P><STRONG><a name="[289]"></a>CH376FileCreate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ch376.o(i.CH376FileCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376FileCreate &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SetFileName
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Create_file
</UL>

<P><STRONG><a name="[28b]"></a>CH376FileOpen</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ch376.o(i.CH376FileOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376FileOpen &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteVar32
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SetFileName
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open_file
</UL>

<P><STRONG><a name="[28e]"></a>CH376ReadBlock</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ch376.o(i.CH376ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH376ReadBlock &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376_Set_Data_Time
</UL>

<P><STRONG><a name="[293]"></a>CH376_Set_Data_Time</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ch376.o(i.CH376_Set_Data_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CH376_Set_Data_Time &rArr; CH376SendCmdDatWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteOfsBlock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdDatWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Create_file
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Colse_file
</UL>

<P><STRONG><a name="[299]"></a>CMP_tips_ctor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, component_tips.o(i.CMP_tips_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_tips_new
</UL>

<P><STRONG><a name="[298]"></a>CMP_tips_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, component_tips.o(i.CMP_tips_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CMP_tips_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_tips_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Get_Sington
</UL>

<P><STRONG><a name="[29a]"></a>CNA_Clear</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, channel_accumulated.o(i.CNA_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CNA_Clear &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Commit
</UL>

<P><STRONG><a name="[29d]"></a>CNA_Commit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, channel_accumulated.o(i.CNA_Commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CNA_Commit &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Run
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Commit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Btn_hdl
</UL>

<P><STRONG><a name="[29e]"></a>CNA_Init</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, channel_accumulated.o(i.CNA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CNA_Init &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_time
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[422]"></a>CNA_Print_acc_val</STRONG> (Thumb, 342 bytes, Stack size 44 bytes, channel_accumulated.o(i.CNA_Print_acc_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CNA_Print_acc_val
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Print_ACC
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAD_Entry
</UL>

<P><STRONG><a name="[2a0]"></a>CNA_Print_enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, channel_accumulated.o(i.CNA_Print_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CNA_Print_enable &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Entry
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_update_content
</UL>

<P><STRONG><a name="[2a1]"></a>CNA_Run</STRONG> (Thumb, 956 bytes, Stack size 64 bytes, channel_accumulated.o(i.CNA_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CNA_Run &rArr; CNA_Commit &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_u64_add
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_2_u32
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Commit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctime_periodic
</UL>

<P><STRONG><a name="[472]"></a>CQ_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cycqueue.o(i.CQ_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[2aa]"></a>CQ_Len</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cycqueue.o(i.CQ_Len))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Read
</UL>

<P><STRONG><a name="[2a9]"></a>CQ_Read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cycqueue.o(i.CQ_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CQ_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Run
</UL>

<P><STRONG><a name="[2ab]"></a>CQ_Write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cycqueue.o(i.CQ_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CQ_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_remove
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_identify
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_status
</UL>

<P><STRONG><a name="[2b9]"></a>CRV_Get_Sington</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, component_curve.o(i.CRV_Get_Sington))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRV_Get_Sington &rArr; Curve_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curve_new
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_Show
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTV_midv_change
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_midv_change
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_RTV_Run
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_Build_cmp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_cmp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Clean_cmp
</UL>

<P><STRONG><a name="[2c4]"></a>Ch376DiskConnect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ch376.o(i.Ch376DiskConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ch376DiskConnect &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
</UL>

<P><STRONG><a name="[263]"></a>Check_bit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bit.o(i.Check_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Check_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_recv
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Thread
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_time_task
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Show_vaild_btn
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Move_focus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Show_curve
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_dirty
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Data_flex
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Ctl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Alloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Update_bar
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Build_bar
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Show_tips
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Clear_ico_tips
</UL>

<P><STRONG><a name="[268]"></a>Clear_bit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bit.o(i.Clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_recv
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Thread
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_time_task
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Build_each_btn
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Free
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Alloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Delete_bar
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Build_bar
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Clear_ico_tips
</UL>

<P><STRONG><a name="[143]"></a>Clear_focus</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hmi.o(i.Clear_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Clear_focus &rArr; Sheet_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_slide
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Get_sht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[427]"></a>Clone_psd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, phn_string.o(i.Clone_psd))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Btn_hdl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_init
</UL>

<P><STRONG><a name="[331]"></a>Cmd_Rgt_idle_task</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmd_thread.o(i.Cmd_Rgt_idle_task))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_init
</UL>

<P><STRONG><a name="[2cc]"></a>Cmd_Rgt_recv</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmd_thread.o(i.Cmd_Rgt_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Cmd_Rgt_recv &rArr; Clear_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_bit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Btn_hdl
</UL>

<P><STRONG><a name="[2cd]"></a>Cmd_Rgt_time_task</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cmd_thread.o(i.Cmd_Rgt_time_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cmd_Rgt_time_task &rArr; SYS_time_sec &rArr; Time_2_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_bit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Flush
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_notify
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Flush
</UL>

<P><STRONG><a name="[2cf]"></a>Cmd_del_recv</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmd_thread.o(i.Cmd_del_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cmd_del_recv &rArr; Set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[37c]"></a>ColorInvert</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, glyph.o(i.ColorInvert))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhRec_vDraw
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_vDraw
</UL>

<P><STRONG><a name="[2e0]"></a>Controller_ctor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, controller.o(i.Controller_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlTimer_ctor
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlKey_ctor
</UL>

<P><STRONG><a name="[3c0]"></a>Crc16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crc.o(i.Crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Decode_pkt
</UL>

<P><STRONG><a name="[2d1]"></a>Create_HMI</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hmifactory.o(i.Create_HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Create_HMI &rArr; GetmenuHMI &rArr; menuHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetmenuHMI
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetkeyboardHMI
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_winHmi
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dataHMI
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_barGhHMI
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Setup_HMI
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Setting_HMI
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RLT_trendHMI
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NewSlct_HMI
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HMI_main
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Accm_HMI
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmmHMI
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_Sy_cmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Hit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConposeKeyHandle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hitHandle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_cmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_HMI_hitHandle
</UL>

<P><STRONG><a name="[271]"></a>Create_model</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, modelfactory.o(i.Create_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Create_model &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_new
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Acc_data_real_time
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_RTV_Run
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_detach_model_chn
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Attach_model_chn
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmiShow
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Show
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_otherSheets
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Show
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_commit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysStrategy_entry
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_bacnup_Strategy_entry
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctime_periodic
</UL>

<P><STRONG><a name="[3aa]"></a>Ctime_Allco_time</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ctltimer.o(i.Ctime_Allco_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ctime_Allco_time
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Commit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ctime
</UL>

<P><STRONG><a name="[2df]"></a>CtlKey_ctor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ctlkey.o(i.CtlKey_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CtlKey_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlKey_new
</UL>

<P><STRONG><a name="[2e1]"></a>CtlKey_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctlkey.o(i.CtlKey_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CtlKey_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlKey_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CtlKey
</UL>

<P><STRONG><a name="[2e2]"></a>CtlTimer_ctor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctltimer.o(i.CtlTimer_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CtlTimer_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlTimer_new
</UL>

<P><STRONG><a name="[2e3]"></a>CtlTimer_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctltimer.o(i.CtlTimer_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CtlTimer_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlTimer_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e4]"></a>Curve_ctor</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, component_curve.o(i.Curve_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curve_new
</UL>

<P><STRONG><a name="[2ba]"></a>Curve_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, component_curve.o(i.Curve_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Curve_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curve_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
</UL>

<P><STRONG><a name="[9f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drive_uart.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drive_uart.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drive_uart.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drive_uart.o(i.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA2_Channel4_5_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2ff]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[300]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[475]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[482]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[2fe]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[477]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[476]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[303]"></a>DRI_Uart_Change_baud</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drive_uart.o(i.DRI_Uart_Change_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DRI_Uart_Change_baud &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_ioctol
</UL>

<P><STRONG><a name="[311]"></a>DevChar_open</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dev_char.o(i.DevChar_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dev_IIC
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevSpi
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[320]"></a>DevLCD_open</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, dev_lcd.o(i.DevLCD_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DevLCD_open
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[317]"></a>Dev_IIC_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_iic.o(i.Dev_IIC_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_new
</UL>

<P><STRONG><a name="[316]"></a>Dev_IIC_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_iic.o(i.Dev_IIC_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dev_IIC
</UL>

<P><STRONG><a name="[31e]"></a>Dev_MAJORID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(i.Dev_MAJORID))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[31f]"></a>Dev_MINORID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(i.Dev_MINORID))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[31d]"></a>Dev_TYPE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(i.Dev_TYPE))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[ff]"></a>Dev_Uart_close</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Dev_Uart_close &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[31a]"></a>Dev_Uart_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_uart.o(i.Dev_Uart_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_new
</UL>

<P><STRONG><a name="[102]"></a>Dev_Uart_ioctol</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, dev_uart.o(i.Dev_Uart_ioctol))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Dev_Uart_ioctol &rArr; DRI_Uart_Change_baud &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_Change_baud
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[319]"></a>Dev_Uart_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_uart.o(i.Dev_Uart_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
</UL>

<P><STRONG><a name="[fe]"></a>Dev_Uart_open</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Dev_Uart_open &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[100]"></a>Dev_Uart_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dev_Uart_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[103]"></a>Dev_Uart_test</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dev_Uart_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[101]"></a>Dev_Uart_write</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, dev_uart.o(i.Dev_Uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dev_Uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[31c]"></a>Dev_open</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, device.o(i.Dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevLCD_open
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_TYPE
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_MINORID
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_MAJORID
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_Init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Run
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhRec_vDraw
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhPic_vDraw
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_vDraw
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_GetSize
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_UsartInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardShow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[322]"></a>Dev_spi_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_spi.o(i.Dev_spi_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_new
</UL>

<P><STRONG><a name="[321]"></a>Dev_spi_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_spi.o(i.Dev_spi_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dev_spi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevSpi
</UL>

<P><STRONG><a name="[11a]"></a>EFS_Erase_file</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, easy_fs.o(i.EFS_Erase_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EFS_Erase_file &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[113]"></a>EFS_Lseek</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, easy_fs.o(i.EFS_Lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EFS_Lseek &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[117]"></a>EFS_Raw_read</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, easy_fs.o(i.EFS_Raw_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EFS_Raw_read &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[116]"></a>EFS_Raw_write</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, easy_fs.o(i.EFS_Raw_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EFS_Raw_write &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_mgr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[328]"></a>EFS_Reset</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFS_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Reset
</UL>

<P><STRONG><a name="[11b]"></a>EFS_Shutdown</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, easy_fs.o(i.EFS_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EFS_Shutdown &rArr; EFS_close &rArr; EFS_flush_wr_position &rArr; EFS_flush_mgr
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[112]"></a>EFS_close</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, easy_fs.o(i.EFS_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EFS_close &rArr; EFS_flush_wr_position &rArr; EFS_flush_mgr
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_wr_position
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[118]"></a>EFS_delete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EFS_delete &rArr; EFS_search_file &rArr; EFS_file_mgr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_search_file
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[11c]"></a>EFS_file_info</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, easy_fs.o(i.EFS_file_info))
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[32f]"></a>EFS_init</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EFS_init &rArr; Mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_idle_task
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_time_task
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_format
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[111]"></a>EFS_open</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, easy_fs.o(i.EFS_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = EFS_open &rArr; EFS_create_file &rArr; EFS_Cal_free_space
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_search_file
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_malloc_file_mgr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Init_file_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[114]"></a>EFS_read</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, easy_fs.o(i.EFS_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EFS_read &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[119]"></a>EFS_resize</STRONG> (Thumb, 408 bytes, Stack size 80 bytes, easy_fs.o(i.EFS_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = EFS_resize &rArr; EFS_create_file &rArr; EFS_Cal_free_space
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_search_file
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_mgr
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_file_mgr_info
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Change_file_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[115]"></a>EFS_write</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, easy_fs.o(i.EFS_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EFS_write &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[99]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI3_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[337]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_control_irq
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[3fd]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
</UL>

<P><STRONG><a name="[338]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[383]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_control_irq
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[381]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[339]"></a>Edit_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hmi_keyboard.o(i.Edit_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Edit_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBInitSheet
</UL>

<P><STRONG><a name="[33a]"></a>Edit_pop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hmi_keyboard.o(i.Edit_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Edit_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardHitHandle
</UL>

<P><STRONG><a name="[33b]"></a>Edit_push</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hmi_keyboard.o(i.Edit_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Edit_push
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardHitHandle
</UL>

<P><STRONG><a name="[2dd]"></a>Except_raise</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, except.o(i.Except_raise))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_alloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ctime
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Init_file_sem
</UL>

<P><STRONG><a name="[25e]"></a>ExpCreate</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, expfactory.o(i.ExpCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ExpCreate &rArr; GetPictExpr &rArr; PicExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPictExpr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNtInput
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNtButton
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGmtrExpr
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxtExpr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_InitSheet
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLTHmi_Init_chnSht
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RT_trendHMI
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Init_sheet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Init_chnShet
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_kbmHmi
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Init_chnSht
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_otherSheets
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_bar
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Init_chnSht
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_InitSheet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Popup_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_initSheet
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_menuHMI
</UL>

<P><STRONG><a name="[380]"></a>Expr_ctor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, expression.o(i.Expr_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtExpr_ctor
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicExpr_ctor
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GmtrExpr_ctor
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtInput_ctor
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtButton_ctor
</UL>

<P><STRONG><a name="[120]"></a>FM25_Erase</STRONG> (Thumb, 104 bytes, Stack size 544 bytes, fm25.o(i.FM25_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = FM25_Erase &rArr; FM25_Write &rArr; FM25_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_info
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[121]"></a>FM25_Erase_addr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fm25.o(i.FM25_Erase_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FM25_Erase_addr &rArr; FM25_Write &rArr; FM25_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[124]"></a>FM25_Flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fm25.o(i.FM25_Flush))
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[11f]"></a>FM25_WP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fm25.o(i.FM25_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FM25_WP &rArr; FM25_Write_status
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[122]"></a>FM25_Write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fm25.o(i.FM25_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM25_Write &rArr; FM25_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_wr_enable
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_cmd_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Erase_addr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[11e]"></a>FM25_info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm25.o(i.FM25_info))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[349]"></a>FM25_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fm25.o(i.FM25_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FM25_init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_info
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[125]"></a>FM25_lock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm25.o(i.FM25_lock))
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[123]"></a>FM25_rd_data</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fm25.o(i.FM25_rd_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM25_rd_data &rArr; FM25_cmd_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_cmd_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[126]"></a>FM25_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm25.o(i.FM25_unlock))
<BR>[Address Reference Count : 1]<UL><LI> fm25.o(i.FM25_init)
</UL>
<P><STRONG><a name="[2c7]"></a>Flush_LCD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glyph.o(i.Flush_LCD))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_slide
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_Show
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Turn_page
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Show
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Long_hit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Hit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Edit_push
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Edit_pop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardShow
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawFocus
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanFocus
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_focuse
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopUp_focuse
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_show_focus
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_clear_focus
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_HMI_show_focus
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_HMI_clear_focus
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShowFocuse
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuClearFocuse
</UL>

<P><STRONG><a name="[253]"></a>Focus_Get_focus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, focus.o(i.Focus_Get_focus))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_show_focus
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_focus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_hitHandle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hitHandle
</UL>

<P><STRONG><a name="[2cb]"></a>Focus_Get_sht</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, focus.o(i.Focus_Get_sht))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Focus_Get_sht
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_clear_focus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_focus
</UL>

<P><STRONG><a name="[259]"></a>Focus_Set_focus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, focus.o(i.Focus_Set_focus))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_init_focus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_init_focus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_init_focus
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_HMI_init_focus
</UL>

<P><STRONG><a name="[25a]"></a>Focus_Set_sht</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, focus.o(i.Focus_Set_sht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Focus_Set_sht
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_init_focus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_init_focus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_init_focus
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_HMI_init_focus
</UL>

<P><STRONG><a name="[258]"></a>Focus_alloc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, focus.o(i.Focus_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Focus_alloc &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_init_focus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_init_focus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_init_focus
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_HMI_init_focus
</UL>

<P><STRONG><a name="[252]"></a>Focus_free</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, focus.o(i.Focus_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Focus_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HideSheet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_hide
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hide
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_HMI_hide
</UL>

<P><STRONG><a name="[3a6]"></a>Focus_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, focus.o(i.Focus_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_cmmHmi
</UL>

<P><STRONG><a name="[3f5]"></a>Focus_move_down</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, focus.o(i.Focus_move_down))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hitHandle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_HMI_hitHandle
</UL>

<P><STRONG><a name="[256]"></a>Focus_move_left</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, focus.o(i.Focus_move_left))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_hitHandle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hitHandle
</UL>

<P><STRONG><a name="[257]"></a>Focus_move_right</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, focus.o(i.Focus_move_right))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_hitHandle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hitHandle
</UL>

<P><STRONG><a name="[3f4]"></a>Focus_move_up</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, focus.o(i.Focus_move_up))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hitHandle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nws_HMI_hitHandle
</UL>

<P><STRONG><a name="[34b]"></a>FormatSheet</STRONG> (Thumb, 536 bytes, Stack size 88 bytes, format.o(i.FormatSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FormatSheet &rArr; CoordinateCalculation
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoordinateCalculation
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatSheetSub
</UL>

<P><STRONG><a name="[260]"></a>FormatSheetSub</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, format.o(i.FormatSheetSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FormatSheetSub &rArr; FormatSheet &rArr; CoordinateCalculation
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatSheet
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_kbmHmi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
</UL>

<P><STRONG><a name="[382]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_control_irq
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[40c]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
</UL>

<P><STRONG><a name="[40d]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
</UL>

<P><STRONG><a name="[384]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
</UL>

<P><STRONG><a name="[346]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIoctol
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_WP
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_flash
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_rd_data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_wr_enable
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write_status
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_reset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_power
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_cs_on
</UL>

<P><STRONG><a name="[348]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIoctol
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_WP
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_flash
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_rd_data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_wr_enable
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write_status
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_reset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_power
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_cs_off
</UL>

<P><STRONG><a name="[6]"></a>GPU_Label</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, dev_lcdusartgpu.o(i.GPU_Label))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GPU_Label &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[275]"></a>GetAttribute</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, reader.o(i.GetAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetAttribute
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eliminate_char
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtInptSht
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicInptSht
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeoInptSht
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
</UL>

<P><STRONG><a name="[27d]"></a>GetCmmHMI</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmi_comm.o(i.GetCmmHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetCmmHMI &rArr; cmmHmi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmmHmi_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_otherSheets
</UL>

<P><STRONG><a name="[354]"></a>GetCompileDay</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, marco.o(i.GetCompileDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetCompileDay &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_get
</UL>

<P><STRONG><a name="[355]"></a>GetCompileMoth</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, marco.o(i.GetCompileMoth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCompileMoth &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_get
</UL>

<P><STRONG><a name="[356]"></a>GetCompileTime</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, marco.o(i.GetCompileTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetCompileTime &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_get
</UL>

<P><STRONG><a name="[357]"></a>GetCompileYear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, marco.o(i.GetCompileYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetCompileYear &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_get
</UL>

<P><STRONG><a name="[341]"></a>GetGmtrExpr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, geometricsexpr.o(i.GetGmtrExpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetGmtrExpr &rArr; GmtrExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GmtrExpr_new
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>

<P><STRONG><a name="[359]"></a>GetKeyInsance</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, keyboard.o(i.GetKeyInsance))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetKeyInsance &rArr; Keyboard_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_new
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35b]"></a>GetKeyVal</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, glyph.o(i.GetKeyVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetKeyVal &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtAreaAtt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2CntEff
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Bkc
</UL>

<P><STRONG><a name="[279]"></a>GetName</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, reader.o(i.GetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetName
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eliminate_char
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtInptSht
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicInptSht
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeoInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
</UL>

<P><STRONG><a name="[35c]"></a>GetNameVale</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, reader.o(i.GetNameVale))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetNameVale &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtInptSht
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicInptSht
</UL>

<P><STRONG><a name="[343]"></a>GetNtButton</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ntbutton.o(i.GetNtButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetNtButton &rArr; NtButton_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtButton_new
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>

<P><STRONG><a name="[340]"></a>GetNtInput</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ntinput.o(i.GetNtInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetNtInput &rArr; NtInput_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtInput_new
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>

<P><STRONG><a name="[342]"></a>GetPictExpr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, picexpr.o(i.GetPictExpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetPictExpr &rArr; PicExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicExpr_new
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>

<P><STRONG><a name="[25d]"></a>GetShtctl</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sheet.o(i.GetShtctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shtctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_InitSheet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RT_trendHMI
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Init_sheet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_kbmHmi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_otherSheets
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_ChnSheets
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_bar
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Popup_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_menuHMI
</UL>

<P><STRONG><a name="[33f]"></a>GetTxtExpr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, txtexpr.o(i.GetTxtExpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetTxtExpr &rArr; TxtExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtExpr_new
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>

<P><STRONG><a name="[2d8]"></a>Get_Accm_HMI</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_accumulate .o(i.Get_Accm_HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_Accm_HMI &rArr; Accm_HMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>

<P><STRONG><a name="[362]"></a>Get_CtlKey</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ctlkey.o(i.Get_CtlKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_CtlKey &rArr; CtlKey_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlKey_new
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[313]"></a>Get_DevGpio</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, device_gpio.o(i.Get_DevGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_DevGpio &rArr; driveGpio_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_new
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_new
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[314]"></a>Get_DevSpi</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dev_spi.o(i.Get_DevSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_DevSpi &rArr; Dev_spi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_new
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[312]"></a>Get_DevUart</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, dev_uart.o(i.Get_DevUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_DevUart &rArr; driveUart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_new
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_new
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[315]"></a>Get_Dev_IIC</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dev_iic.o(i.Get_Dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_new
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[366]"></a>Get_GhNone</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gh_none.o(i.Get_GhNone))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_GhNone &rArr; GhNone_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhNone_new
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
</UL>

<P><STRONG><a name="[368]"></a>Get_GhPic</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gh_pic.o(i.Get_GhPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_GhPic &rArr; GhPic_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhPic_new
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicInptSht
</UL>

<P><STRONG><a name="[274]"></a>Get_GhRectangle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gh_rectangle.o(i.Get_GhRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_GhRectangle &rArr; GhRectangle_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhRectangle_new
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeoInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
</UL>

<P><STRONG><a name="[36b]"></a>Get_GhTxt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gh_txt.o(i.Get_GhTxt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_GhTxt &rArr; GhTxt_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtInptSht
</UL>

<P><STRONG><a name="[2d2]"></a>Get_HMI_main</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_main.o(i.Get_HMI_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_HMI_main &rArr; HMI_main_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_main_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>

<P><STRONG><a name="[24b]"></a>Get_Mode_chn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, model_channel.o(i.Get_Mode_chn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_new
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Acc_param_channel
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Acc_data_real_time
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCH_Cancle_all_alarm
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Run
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Clean_Alamr
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Entry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAD_Entry
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_content
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnStrategy_entry
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_Set_mdl_tmp_buf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_modify
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_entry
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALS_Set_mdl_tmp_alarm
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
</UL>

<P><STRONG><a name="[2d7]"></a>Get_NewSlct_HMI</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hmi_news_select.o(i.Get_NewSlct_HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_NewSlct_HMI &rArr; NewSlct_HMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlct_HMI_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>

<P><STRONG><a name="[2d6]"></a>Get_RLT_trendHMI</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_curve.o(i.Get_RLT_trendHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_RLT_trendHMI &rArr; RLT_trendHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_trendHMI_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>

<P><STRONG><a name="[2da]"></a>Get_Setting_HMI</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmi_striped_background.o(i.Get_Setting_HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_Setting_HMI &rArr; HMI_striped_background_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_striped_background_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>

<P><STRONG><a name="[2d9]"></a>Get_Setup_HMI</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmi_setup.o(i.Get_Setup_HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_Setup_HMI &rArr; Setup_HMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>

<P><STRONG><a name="[26c]"></a>Get_barGhHMI</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_bargraph.o(i.Get_barGhHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_barGhHMI &rArr; HMI_bar_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_bar_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Util_update
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Data_update
</UL>

<P><STRONG><a name="[2d5]"></a>Get_dataHMI</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_data.o(i.Get_dataHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_dataHMI &rArr; HMI_data_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_data_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>

<P><STRONG><a name="[29b]"></a>Get_storage</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, storage.o(i.Get_storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_new
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_alm_pwr_num
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Get_alm_pwr_num
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_on
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_off
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_default
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Commit
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Run
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Commit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Clear
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Write_flash
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read_flash
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Resize
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_rcd_by_time
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_data_by_time
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_alm_pwr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Erase_file
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Entry
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Entry
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctime_periodic
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Init_alm_mgr_by_STG_alm
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cancle_alarm
</UL>

<P><STRONG><a name="[2c0]"></a>Get_str_data</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, phn_string.o(i.Get_str_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Get_str_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_time_2_tm
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Win_cmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_set_by_string
</UL>

<P><STRONG><a name="[2bf]"></a>Get_winHmi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_windowns.o(i.Get_winHmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_winHmi &rArr; winHmi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_first_time
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_Sy_cmd
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Password
</UL>

<P><STRONG><a name="[2d3]"></a>GetkeyboardHMI</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmi_keyboard.o(i.GetkeyboardHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetkeyboardHMI &rArr; keyboardHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboardHMI_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>

<P><STRONG><a name="[2d4]"></a>GetmenuHMI</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_menu.o(i.GetmenuHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetmenuHMI &rArr; menuHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHMI_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>

<P><STRONG><a name="[379]"></a>GhNone_ctor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gh_none.o(i.GhNone_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GhNone_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glyph_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhNone_new
</UL>

<P><STRONG><a name="[367]"></a>GhNone_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gh_none.o(i.GhNone_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GhNone_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhNone_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhNone
</UL>

<P><STRONG><a name="[37b]"></a>GhPic_ctor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gh_pic.o(i.GhPic_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GhPic_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glyph_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhPic_new
</UL>

<P><STRONG><a name="[369]"></a>GhPic_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gh_pic.o(i.GhPic_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GhPic_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhPic_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhPic
</UL>

<P><STRONG><a name="[37d]"></a>GhRectangle_ctor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gh_rectangle.o(i.GhRectangle_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GhRectangle_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glyph_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhRectangle_new
</UL>

<P><STRONG><a name="[36a]"></a>GhRectangle_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gh_rectangle.o(i.GhRectangle_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GhRectangle_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhRectangle_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhRectangle
</UL>

<P><STRONG><a name="[37e]"></a>GhTxt_ctor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gh_txt.o(i.GhTxt_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GhTxt_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glyph_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_new
</UL>

<P><STRONG><a name="[36c]"></a>GhTxt_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gh_txt.o(i.GhTxt_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GhTxt_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhTxt
</UL>

<P><STRONG><a name="[37a]"></a>Glyph_ctor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, glyph.o(i.Glyph_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhRectangle_ctor
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhPic_ctor
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_ctor
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhNone_ctor
</UL>

<P><STRONG><a name="[37f]"></a>GmtrExpr_ctor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, geometricsexpr.o(i.GmtrExpr_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GmtrExpr_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Expr_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GmtrExpr_new
</UL>

<P><STRONG><a name="[358]"></a>GmtrExpr_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, geometricsexpr.o(i.GmtrExpr_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GmtrExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GmtrExpr_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGmtrExpr
</UL>

<P><STRONG><a name="[44a]"></a>HKB_Set_input</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hmi_keyboard.o(i.HKB_Set_input))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_Sy_cmd
</UL>

<P><STRONG><a name="[26e]"></a>HMI_Attach_model_chn</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, hmi.o(i.HMI_Attach_model_chn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HMI_Attach_model_chn &rArr; Create_model &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaininitSheet
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_InitSheet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_InitSheet
</UL>

<P><STRONG><a name="[389]"></a>HMI_Init</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, hmi.o(i.HMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HMI_Init &rArr; Create_HMI &rArr; GetmenuHMI &rArr; menuHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Get_Sington
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_time_task
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>HMI_Ram_alloc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hmi_comm.o(i.HMI_Ram_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HMI_Ram_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Alloc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMN_Init_vram
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_InitSheet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_InitSheet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAD_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_init
</UL>

<P><STRONG><a name="[25c]"></a>HMI_Ram_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hmi_comm.o(i.HMI_Ram_init))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_Init_curve
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMN_Init_vram
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_InitSheet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_InitSheet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAD_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_init
</UL>

<P><STRONG><a name="[38e]"></a>HMI_bar_ctor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_bargraph.o(i.HMI_bar_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HMI_bar_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_bar_new
</UL>

<P><STRONG><a name="[373]"></a>HMI_bar_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_bargraph.o(i.HMI_bar_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HMI_bar_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_bar_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_barGhHMI
</UL>

<P><STRONG><a name="[24f]"></a>HMI_ctor</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, hmi.o(i.HMI_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_trendHMI_ctor
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_striped_background_ctor
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboardHMI_ctor
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_data_ctor
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmmHmi_ctor
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_bar_ctor
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_ctor
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ctor
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_ctor
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlct_HMI_ctor
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHMI_ctor
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_main_ctor
</UL>

<P><STRONG><a name="[38f]"></a>HMI_data_ctor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hmi_data.o(i.HMI_data_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HMI_data_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_data_new
</UL>

<P><STRONG><a name="[374]"></a>HMI_data_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_data.o(i.HMI_data_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HMI_data_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_data_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_dataHMI
</UL>

<P><STRONG><a name="[26d]"></a>HMI_detach_model_chn</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hmi.o(i.HMI_detach_model_chn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HMI_detach_model_chn &rArr; Create_model &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmiHide
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_HideSheet
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_HideSheet
</UL>

<P><STRONG><a name="[390]"></a>HMI_main_ctor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hmi_main.o(i.HMI_main_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HMI_main_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_main_new
</UL>

<P><STRONG><a name="[36d]"></a>HMI_main_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_main.o(i.HMI_main_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HMI_main_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_main_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HMI_main
</UL>

<P><STRONG><a name="[391]"></a>HMI_striped_background_ctor</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hmi_striped_background.o(i.HMI_striped_background_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HMI_striped_background_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_striped_background_new
</UL>

<P><STRONG><a name="[371]"></a>HMI_striped_background_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_striped_background.o(i.HMI_striped_background_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HMI_striped_background_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_striped_background_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Setting_HMI
</UL>

<P><STRONG><a name="[8b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[191]"></a>Hide_ico_tips</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hmi_menu.o(i.Hide_ico_tips))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Hide_ico_tips &rArr; TIP_Get_Sington &rArr; CMP_tips_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Get_Sington
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hmi_menu.o(i.menuHMI_ctor)
<LI> hmi_news_select.o(i.NewSlct_HMI_ctor)
</UL>
<P><STRONG><a name="[41c]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[39d]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_EV
</UL>

<P><STRONG><a name="[3a3]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>

<P><STRONG><a name="[398]"></a>I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_i2c.o(i.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[419]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[41d]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[418]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[39a]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>

<P><STRONG><a name="[41e]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[41a]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[41b]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[3a2]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>

<P><STRONG><a name="[39e]"></a>Init_Ch376</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ch376.o(i.Init_Ch376))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Ch376 &rArr; mInitCH376Host &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[3a0]"></a>Init_Cmd_Thread</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cmd_thread.o(i.Init_Cmd_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_Cmd_Thread &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a1]"></a>Init_IIC</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, drive_iic.o(i.Init_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StructInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_dev_IIC
</UL>

<P><STRONG><a name="[3a4]"></a>Init_LCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.Init_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Init_LCD &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>Init_focus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmi.o(i.Init_focus))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[3ab]"></a>Init_spi</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, drive_spi.o(i.Init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Init_spi &rArr; SPI_I2S_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_mode_CP
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_baud_Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_devSpi
</UL>

<P><STRONG><a name="[3b5]"></a>IsDiskWriteProtect</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ch376.o(i.IsDiskWriteProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IsDiskWriteProtect &rArr; CH376DiskReqSense &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteHostBlock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadVar8
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskReqSense
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_identify
</UL>

<P><STRONG><a name="[3b8]"></a>Keyboard_ctor</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, keyboard.o(i.Keyboard_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_new
</UL>

<P><STRONG><a name="[35a]"></a>Keyboard_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, keyboard.o(i.Keyboard_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyInsance
</UL>

<P><STRONG><a name="[3b9]"></a>LCD_Run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, glyph.o(i.LCD_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_Run &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a7]"></a>LOG_Add</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, log.o(i.LOG_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LOG_Add &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Run
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Commit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Commit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_commit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_commit
</UL>

<P><STRONG><a name="[2f6]"></a>LOG_Get_read_num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, log.o(i.LOG_Get_read_num))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_log
</UL>

<P><STRONG><a name="[2f4]"></a>LOG_Get_total_num</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, log.o(i.LOG_Get_total_num))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_log
</UL>

<P><STRONG><a name="[3bb]"></a>LOG_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, log.o(i.LOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LOG_Init &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Write_flash
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[2f5]"></a>LOG_Read</STRONG> (Thumb, 148 bytes, Stack size 112 bytes, log.o(i.LOG_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LOG_Read &rArr; LOG_Read_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_2_tm
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read_flash
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_log
</UL>

<P><STRONG><a name="[2e9]"></a>LOG_Set_read_position</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, log.o(i.LOG_Set_read_position))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[3bd]"></a>MBA_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, modbus_app.o(i.MBA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MBA_Init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_recv
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43d]"></a>MBA_Init_uart</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modbus_app.o(i.MBA_Init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MBA_Init_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Commit
</UL>

<P><STRONG><a name="[3bf]"></a>MBC_Decode_pkt</STRONG> (Thumb, 684 bytes, Stack size 80 bytes, modbusrtu_cli.o(i.MBC_Decode_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MBC_Decode_pkt &rArr; MBC_reg_2_ram &rArr; MBA_reg_2_area
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_reg_2_ram
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Little_end_to_Big_end
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_end_to_Little_end
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Run
</UL>

<P><STRONG><a name="[3be]"></a>MBC_Get_pkt_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbusrtu_cli.o(i.MBC_Get_pkt_addr))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Run
</UL>

<P><STRONG><a name="[3c1]"></a>MBC_reg_2_ram</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, modbus_app.o(i.MBC_reg_2_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MBC_reg_2_ram &rArr; MBA_reg_2_area
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_reg_2_area
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Get_acc_func
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Decode_pkt
</UL>

<P><STRONG><a name="[3c6]"></a>MCH_Cancle_all_alarm</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, model_channel.o(i.MCH_Cancle_all_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MCH_Cancle_all_alarm &rArr; MdlChn_Cancle_alarm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cancle_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_off
</UL>

<P><STRONG><a name="[24c]"></a>MCH_Set_alarm_buf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, model_channel.o(i.MCH_Set_alarm_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCH_Set_alarm_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALS_Set_mdl_tmp_alarm
</UL>

<P><STRONG><a name="[2a6]"></a>MCH_Set_info_buf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, model_channel.o(i.MCH_Set_info_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCH_Set_info_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_Set_mdl_tmp_buf
</UL>

<P><STRONG><a name="[138]"></a>Main_HMI_build_button</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hmi_main.o(i.Main_HMI_build_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Main_HMI_build_button &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hmi_bargraph.o(i.HMI_bar_ctor)
<LI> hmi_main.o(i.HMI_main_ctor)
</UL>
<P><STRONG><a name="[137]"></a>Main_HMI_hit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hmi_main.o(i.Main_HMI_hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Main_HMI_hit &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hmi_bargraph.o(i.HMI_bar_ctor)
<LI> hmi_main.o(i.HMI_main_ctor)
</UL>
<P><STRONG><a name="[12f]"></a>Main_btn_hdl</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hmi_main.o(i.Main_btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Main_btn_hdl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hmi_curve.o(i.HMI_CRV_Build_cmp)
<LI> hmi_main.o(i.Main_HMI_build_button)
</UL>
<P><STRONG><a name="[387]"></a>MdlChn_Cal_prc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_Cal_prc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MdlChn_Cal_prc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_percentage
</UL>

<P><STRONG><a name="[3cb]"></a>MdlChn_Clean_Alamr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_Clean_Alamr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_Clean_Alamr &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Commit
</UL>

<P><STRONG><a name="[247]"></a>MdlChn_Commit_conf</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, model_channel.o(i.MdlChn_Commit_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MdlChn_Commit_conf &rArr; STG_Resize &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_Btn_hdl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALS_Btn_hdl
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[2de]"></a>MdlChn_Read_code_end_temperature</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Read_code_end_temperature))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctime_periodic
</UL>

<P><STRONG><a name="[3cf]"></a>MdlChn_default_alarm</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_default_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_default_alarm &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[3d0]"></a>MdlChn_default_conf</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_default_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_default_conf &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Get_def_up_limit
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Get_def_lower_limit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[3dd]"></a>MdlChn_save_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_save_data &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_conf
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
</UL>

<P><STRONG><a name="[178]"></a>MdlTime_getData</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, modeltime.o(i.MdlTime_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MdlTime_getData &rArr; Time_2_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_2_u32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[176]"></a>MdlTime_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, modeltime.o(i.MdlTime_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MdlTime_init &rArr; System_time
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[177]"></a>MdlTime_run</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modeltime.o(i.MdlTime_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MdlTime_run &rArr; System_time
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[498]"></a>MdlTime_text_iteartor</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, phn_string.o(i.MdlTime_text_iteartor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MdlTime_text_iteartor
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_CUR_move
</UL>

<P><STRONG><a name="[3e6]"></a>MdlTime_text_modify</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, phn_string.o(i.MdlTime_text_modify))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MdlTime_text_modify &rArr; Str_Calculations &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Calculations
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_CUR_move
</UL>

<P><STRONG><a name="[188]"></a>Mdl_addTmMdl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, model.o(i.Mdl_addTmMdl))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[184]"></a>Mdl_attach</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, model.o(i.Mdl_attach))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[189]"></a>Mdl_delTmMdl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, model.o(i.Mdl_delTmMdl))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[185]"></a>Mdl_detach</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, model.o(i.Mdl_detach))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[186]"></a>Mdl_getData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, model.o(i.Mdl_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mdl_getData
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[18a]"></a>Mdl_notify</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, model.o(i.Mdl_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Mdl_notify &rArr; Cmd_Rgt_time_task &rArr; SYS_time_sec &rArr; Time_2_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_time_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[187]"></a>Mdl_setData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, model.o(i.Mdl_setData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mdl_setData
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[330]"></a>Mem_alloc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mem.o(i.Mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_init
</UL>

<P><STRONG><a name="[2bb]"></a>Mem_calloc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mem.o(i.Mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Mem_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[3ea]"></a>ModelTime_ctor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modeltime.o(i.ModelTime_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModelTime_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_new
</UL>

<P><STRONG><a name="[2dc]"></a>ModelTime_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, modeltime.o(i.ModelTime_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ModelTime_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
</UL>

<P><STRONG><a name="[3ec]"></a>Model_chn_ctor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, model_channel.o(i.Model_chn_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Model_chn_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_new
</UL>

<P><STRONG><a name="[36e]"></a>Model_chn_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, model_channel.o(i.Model_chn_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
</UL>

<P><STRONG><a name="[3eb]"></a>Model_ctor</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, model.o(i.Model_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_ctor
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_ctor
</UL>

<P><STRONG><a name="[3ed]"></a>NVIC_Configuration</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, intrinit.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f0]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[3ef]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[3ee]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[3f1]"></a>NewSlct_HMI_ctor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hmi_news_select.o(i.NewSlct_HMI_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NewSlct_HMI_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlct_HMI_new
</UL>

<P><STRONG><a name="[36f]"></a>NewSlct_HMI_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_news_select.o(i.NewSlct_HMI_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NewSlct_HMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlct_HMI_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NewSlct_HMI
</UL>

<P><STRONG><a name="[3f2]"></a>NtButton_ctor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ntbutton.o(i.NtButton_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NtButton_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Expr_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtButton_new
</UL>

<P><STRONG><a name="[35d]"></a>NtButton_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ntbutton.o(i.NtButton_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NtButton_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtButton_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNtButton
</UL>

<P><STRONG><a name="[3f3]"></a>NtInput_ctor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ntinput.o(i.NtInput_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NtInput_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Expr_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtInput_new
</UL>

<P><STRONG><a name="[35e]"></a>NtInput_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ntinput.o(i.NtInput_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NtInput_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtInput_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNtInput
</UL>

<P><STRONG><a name="[3f6]"></a>OpenPrpClock</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mysystemclock.o(i.OpenPrpClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenPrpClock
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[267]"></a>Operate_in_tange</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hmi_comm.o(i.Operate_in_tange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Operate_in_tange
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_set_sys_param
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_update_content
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_key_rt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_key_lt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_key_rt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_key_lt
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_update_content
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_content
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_key_rt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_key_lt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_modify
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_update_content
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[2e5]"></a>PGB_Get_Sington</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, component_progress_bar.o(i.PGB_Get_Sington))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PGB_Get_Sington &rArr; Progress_bar_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progress_bar_new
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_cmp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Clean_cmp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Build_component
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_build_component
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Exit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_lost_power
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_data
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_alarm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[94]"></a>PVD_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, power.o(i.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PVD_IRQHandler &rArr; System_power_off &rArr; MCH_Cancle_all_alarm &rArr; MdlChn_Cancle_alarm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_off
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3fc]"></a>PVD_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, power.o(i.PVD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PVD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDLevelConfig
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDCmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_DeInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ff]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_PVDCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
</UL>

<P><STRONG><a name="[3fe]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_PVDLevelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
</UL>

<P><STRONG><a name="[499]"></a>Password_iteartor</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, phn_string.o(i.Password_iteartor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Password_iteartor
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_CUR_move
</UL>

<P><STRONG><a name="[406]"></a>Password_modify</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phn_string.o(i.Password_modify))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Password_modify &rArr; Str_Calculations &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Calculations
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_CUR_move
</UL>

<P><STRONG><a name="[407]"></a>Pcf8563_ctor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc_pcf8563.o(i.Pcf8563_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pcf8563_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtlRtc_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_new
</UL>

<P><STRONG><a name="[19b]"></a>Pcf8563_get</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, rtc_pcf8563.o(i.Pcf8563_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pcf8563_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[19a]"></a>Pcf8563_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtc_pcf8563.o(i.Pcf8563_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Pcf8563_init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[409]"></a>Pcf8563_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc_pcf8563.o(i.Pcf8563_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Pcf8563_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[19d]"></a>Pcf8563_readReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_pcf8563.o(i.Pcf8563_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pcf8563_readReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[19c]"></a>Pcf8563_set</STRONG> (Thumb, 732 bytes, Stack size 32 bytes, rtc_pcf8563.o(i.Pcf8563_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pcf8563_set &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[19e]"></a>Pcf8563_writeReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_pcf8563.o(i.Pcf8563_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pcf8563_writeReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_pcf8563.o(i.Pcf8563_ctor)
</UL>
<P><STRONG><a name="[40a]"></a>PicExpr_ctor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, picexpr.o(i.PicExpr_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PicExpr_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Expr_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicExpr_new
</UL>

<P><STRONG><a name="[35f]"></a>PicExpr_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, picexpr.o(i.PicExpr_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PicExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicExpr_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPictExpr
</UL>

<P><STRONG><a name="[40b]"></a>Pin_init</STRONG> (Thumb, 804 bytes, Stack size 8 bytes, pinmux.o(i.Pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pin_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d9]"></a>Print_float</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, phn_string.o(i.Print_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print_float &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_rcd_by_time
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[3e4]"></a>Print_singnaltype</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, phn_string.o(i.Print_singnaltype))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Print_singnaltype &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
</UL>

<P><STRONG><a name="[411]"></a>Print_sys_param</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, phn_string.o(i.Print_sys_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Print_sys_param &rArr; Disable_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_string
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Break_deal_string
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_set_sys_param
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_Entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysStrategy_entry
</UL>

<P><STRONG><a name="[3d8]"></a>Print_touch_spot</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, phn_string.o(i.Print_touch_spot))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Print_touch_spot &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[3e3]"></a>Print_unit</STRONG> (Thumb, 672 bytes, Stack size 16 bytes, phn_string.o(i.Print_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print_unit &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
</UL>

<P><STRONG><a name="[412]"></a>Progress_bar_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, component_progress_bar.o(i.Progress_bar_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progress_bar_new
</UL>

<P><STRONG><a name="[3fa]"></a>Progress_bar_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, component_progress_bar.o(i.Progress_bar_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Progress_bar_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progress_bar_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
</UL>

<P><STRONG><a name="[3f9]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
</UL>

<P><STRONG><a name="[3f8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
</UL>

<P><STRONG><a name="[399]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[3f7]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
</UL>

<P><STRONG><a name="[46f]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[39b]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[416]"></a>RLT_trendHMI_ctor</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hmi_curve.o(i.RLT_trendHMI_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RLT_trendHMI_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_trendHMI_new
</UL>

<P><STRONG><a name="[370]"></a>RLT_trendHMI_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_curve.o(i.RLT_trendHMI_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RLT_trendHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_trendHMI_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RLT_trendHMI
</UL>

<P><STRONG><a name="[417]"></a>Read_IIC</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, drive_iic.o(i.Read_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Read_IIC &rArr; Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_EV
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_dev_IIC
</UL>

<P><STRONG><a name="[41f]"></a>Read_spi</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, drive_spi.o(i.Read_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_spi &rArr; spi_read_word
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_devSpi
</UL>

<P><STRONG><a name="[278]"></a>RemoveHead</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, reader.o(i.RemoveHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RemoveHead
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
</UL>

<P><STRONG><a name="[27a]"></a>RemoveTail</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, reader.o(i.RemoveTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RemoveTail
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eliminate_char
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtInptSht
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicInptSht
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
</UL>

<P><STRONG><a name="[b6]"></a>SPI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drive_spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>SPI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drive_spi.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b1]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[424]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>

<P><STRONG><a name="[3b0]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_I2S_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_I2S_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[425]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>

<P><STRONG><a name="[4de]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>

<P><STRONG><a name="[3af]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[3ac]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[2a8]"></a>STG_Erase_file</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, storage.o(i.STG_Erase_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STG_Erase_file &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Commit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Commit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_commit
</UL>

<P><STRONG><a name="[3ce]"></a>STG_Get_alm_pwr_num</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, storage.o(i.STG_Get_alm_pwr_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = STG_Get_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_on
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Init_alm_mgr_by_STG_alm
</UL>

<P><STRONG><a name="[2f0]"></a>STG_Read_alm_pwr</STRONG> (Thumb, 324 bytes, Stack size 192 bytes, storage.o(i.STG_Read_alm_pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = STG_Read_alm_pwr &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_2_tm
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_lost_power
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_alarm
</UL>

<P><STRONG><a name="[2f2]"></a>STG_Read_data_by_time</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, storage.o(i.STG_Read_data_by_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = STG_Read_data_by_time &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_chn_data_will_retry
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_data
</UL>

<P><STRONG><a name="[2f3]"></a>STG_Read_rcd_by_time</STRONG> (Thumb, 310 bytes, Stack size 144 bytes, storage.o(i.STG_Read_rcd_by_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = STG_Read_rcd_by_time &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_2_tm
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_float
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_data
</UL>

<P><STRONG><a name="[3cc]"></a>STG_Resize</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, storage.o(i.STG_Resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = STG_Resize &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
</UL>

<P><STRONG><a name="[43a]"></a>STG_Run</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, storage.o(i.STG_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = STG_Run &rArr; LOG_Add &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Remove_save_data
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Out_save_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Clean_save_data
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ca]"></a>STG_Set_alm_pwr_num</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, storage.o(i.STG_Set_alm_pwr_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = STG_Set_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_on
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Commit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Commit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
</UL>

<P><STRONG><a name="[29c]"></a>STG_Set_file_position</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, storage.o(i.STG_Set_file_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_alm_pwr_num
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Get_alm_pwr_num
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_on
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_off
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Commit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Clear
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Write_flash
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read_flash
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_data_by_time
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_alm_pwr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Entry
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Entry
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cancle_alarm
</UL>

<P><STRONG><a name="[43c]"></a>SYS_Commit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, system.o(i.SYS_Commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYS_Commit &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Init_uart
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctime_Allco_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Btn_hdl
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Btn_hdl
</UL>

<P><STRONG><a name="[43e]"></a>SYS_Reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(i.SYS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SYS_Reset &rArr; System_default &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Reset
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_default
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_commit
</UL>

<P><STRONG><a name="[2bd]"></a>SYS_time_sec</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, system.o(i.SYS_time_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_time_sec &rArr; Time_2_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_2_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Thread
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_on
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_off
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_time_task
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Add
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_first_time
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cancle_alarm
</UL>

<P><STRONG><a name="[2be]"></a>Sec_2_tm</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, system.o(i.Sec_2_tm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sec_2_tm
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_rcd_by_time
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_alm_pwr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_first_time
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Entry
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Entry
</UL>

<P><STRONG><a name="[31b]"></a>Sem_init</STRONG> (Thumb, 706 bytes, Stack size 16 bytes, rtx_depend.o(i.Sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sem_init &rArr; osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_UsartInit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Init_file_sem
</UL>

<P><STRONG><a name="[297]"></a>Sem_post</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, rtx_depend.o(i.Sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPostTxSem
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPostRxSem
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Label
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_WrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Pic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Icon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Done
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_CutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Box
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Bkc_pic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_BKColor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_UsartInit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_unlock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_RTV_Run
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHMI
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBack
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Flush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMN_Update_mdl_chn_data
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDT_Update_mdl_chn_data
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMM_Update_time
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HBR_Update_mdl_chn_data
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_write
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Raw_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Raw_read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Lseek
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Erase_file
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Init_file_sem
</UL>

<P><STRONG><a name="[295]"></a>Sem_wait</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, rtx_depend.o(i.Sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitTxSem
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitRxSem
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Label
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_WrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Pic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Icon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Done
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_CutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Box
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Bkc_pic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_BKColor
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_lock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_RTV_Run
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHMI
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBack
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Flush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMN_Update_mdl_chn_data
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDT_Update_mdl_chn_data
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMM_Update_time
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HBR_Update_mdl_chn_data
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_write
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Raw_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Raw_read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Lseek
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Erase_file
</UL>

<P><STRONG><a name="[264]"></a>Set_bit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bit.o(i.Set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_del_recv
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Thread
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Build_each_btn
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Free
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Alloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Delete_bar
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Build_bar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Show_ico_tips
</UL>

<P><STRONG><a name="[464]"></a>Set_flag_show</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hmi.o(i.Set_flag_show))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHMI
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBack
</UL>

<P><STRONG><a name="[277]"></a>Set_shtAreaAtt</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, expression.o(i.Set_shtAreaAtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Set_shtAreaAtt &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Align
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtInptSht
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicInptSht
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeoInptSht
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
</UL>

<P><STRONG><a name="[276]"></a>Set_shtContextAtt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, expression.o(i.Set_shtContextAtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Set_shtContextAtt &rArr; String2CntEff &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Font
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2CntEff
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Clr
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Bkc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtInptSht
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicInptSht
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeoInptSht
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
</UL>

<P><STRONG><a name="[d3]"></a>Setting_btn_hdl</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hmi_striped_background.o(i.Setting_btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Setting_btn_hdl &rArr; HMI_SBG_Turn_page &rArr; Clean_stripe &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Turn_page
</UL>
<BR>[Address Reference Count : 11]<UL><LI> stg_acc_month.o(i.SAM_Build_component)
<LI> stg_super_set.o(i.SPR_build_component)
<LI> hmi_striped_background.o(i.HMI_SBG_Show_entry)
<LI> stg_news_alarm.o(i.NLM_Build_component)
<LI> stg_news_power.o(i.NPW_Build_component)
<LI> stg_set_accumulate.o(i.SSA_Build_component)
<LI> stg_acc_day.o(i.SAD_Build_component)
<LI> stg_set_alarm.o(i.ALS_build_component)
<LI> stg_set_channel.o(i.CNS_build_component)
<LI> stg_set_databackup.o(i.DBP_build_component)
<LI> stg_set_system.o(i.SYS_build_component)
</UL>
<P><STRONG><a name="[44e]"></a>Setup_HMI_ctor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hmi_setup.o(i.Setup_HMI_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Setup_HMI_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_new
</UL>

<P><STRONG><a name="[372]"></a>Setup_HMI_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_setup.o(i.Setup_HMI_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Setup_HMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Setup_HMI
</UL>

<P><STRONG><a name="[25f]"></a>Sheet_alloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sheet.o(i.Sheet_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sheet_alloc &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_InitSheet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RT_trendHMI
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Init_sheet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_kbmHmi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_otherSheets
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_ChnSheets
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_bar
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Popup_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_menuHMI
</UL>

<P><STRONG><a name="[269]"></a>Sheet_force_slide</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sheet.o(i.Sheet_force_slide))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refreshsub
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Show_vaild_btn
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Move_focus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Build_each_btn
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_show_focus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_clear_focus
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Update_bar
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Util_update
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Data_update
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Alarm_update
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Util_update
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Status_update
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Data_update
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Alarm_update
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Util_update
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Data_update
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Show_tips
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Show_ico_tips
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Clear_ico_tips
</UL>

<P><STRONG><a name="[251]"></a>Sheet_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sheet.o(i.Sheet_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Sheet_free &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HideSheet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Hide
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_hide
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_hide
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Popup_hide
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hide
</UL>

<P><STRONG><a name="[294]"></a>Sheet_is_hide</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sheet.o(i.Sheet_is_hide))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMM_Update_time
</UL>

<P><STRONG><a name="[270]"></a>Sheet_refresh</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sheet.o(i.Sheet_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refreshsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_Show
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Show
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clean_stripe
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmiShow
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchVirKey
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardShow
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Show
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Show
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Accm_HMI
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmiShow
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Setup_HMI
</UL>

<P><STRONG><a name="[296]"></a>Sheet_slide</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sheet.o(i.Sheet_slide))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sheet_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refreshsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Update_bar
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_focus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_focus
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMM_Update_time
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_show_focus
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_clear_focus
</UL>

<P><STRONG><a name="[250]"></a>Sheet_updown</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, sheet.o(i.Sheet_updown))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_InitSheet
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HideSheet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Init_sheet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Hide
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaininitSheet
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmiHide
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBInitSheet
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBHide
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_InitSheet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_HideSheet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_InitSheet
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_HideSheet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_hide
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_init
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_hide
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Popup_init
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Popup_hide
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hide
</UL>

<P><STRONG><a name="[144]"></a>Show_focus</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hmi.o(i.Show_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Show_focus &rArr; Sheet_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_slide
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Get_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[360]"></a>Shtctl_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sheet.o(i.Shtctl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Shtctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
</UL>

<P><STRONG><a name="[3df]"></a>SmBus_AI_config</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_AI_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_AI_config &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_U16
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[3e2]"></a>SmBus_DO_output</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_DO_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SmBus_DO_output &rArr; SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[45a]"></a>SmBus_Get_crc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Get_crc))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[3de]"></a>SmBus_Query</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_Query))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SmBus_Query &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
</UL>

<P><STRONG><a name="[456]"></a>SmBus_Read</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_rd_signal_type
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read_DO
</UL>

<P><STRONG><a name="[3d5]"></a>SmBus_Read_DO</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_Read_DO))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_Read_DO &rArr; SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[3e0]"></a>SmBus_WR_hig_limit</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_WR_hig_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SmBus_WR_hig_limit &rArr; SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[3e1]"></a>SmBus_WR_low_limit</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_WR_low_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SmBus_WR_low_limit &rArr; SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[455]"></a>SmBus_Write</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, smart_bus.o(i.SmBus_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_low_limit
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_hig_limit
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_DO_output
</UL>

<P><STRONG><a name="[3d4]"></a>SmBus_decode</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SmBus_decode &rArr; SmBus_dcd_read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[3d3]"></a>SmBus_rd_signal_type</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_rd_signal_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_rd_signal_type &rArr; SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[45f]"></a>Storage_ctor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, storage.o(i.Storage_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_new
</UL>

<P><STRONG><a name="[375]"></a>Storage_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, storage.o(i.Storage_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>

<P><STRONG><a name="[3e7]"></a>Str_Calculations</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, phn_string.o(i.Str_Calculations))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Str_Calculations &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_modify
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_text_modify
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
</UL>

<P><STRONG><a name="[44b]"></a>Str_Password_match</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, phn_string.o(i.Str_Password_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Str_Password_match &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_cmd
</UL>

<P><STRONG><a name="[426]"></a>Str_set_password</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, phn_string.o(i.Str_set_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Str_set_password &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_commit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_commit
</UL>

<P><STRONG><a name="[460]"></a>Str_set_sys_param</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, phn_string.o(i.Str_set_sys_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Str_set_sys_param &rArr; Print_sys_param &rArr; Disable_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_sys_param
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_string
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Break_deal_string
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_update_content
</UL>

<P><STRONG><a name="[461]"></a>Str_time_2_tm</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, system.o(i.Str_time_2_tm))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Str_time_2_tm &rArr; Get_str_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_time_2_u32
</UL>

<P><STRONG><a name="[2f1]"></a>Str_time_2_u32</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, system.o(i.Str_time_2_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Str_time_2_u32 &rArr; Str_time_2_tm &rArr; Get_str_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_2_u32
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_time_2_tm
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_data
</UL>

<P><STRONG><a name="[445]"></a>String2Align</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, glyph.o(i.String2Align))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = String2Align &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtAreaAtt
</UL>

<P><STRONG><a name="[448]"></a>String2Bkc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, glyph.o(i.String2Bkc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = String2Bkc &rArr; GetKeyVal &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Colour
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtContextAtt
</UL>

<P><STRONG><a name="[446]"></a>String2Clr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, glyph.o(i.String2Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = String2Clr &rArr; String2Colour &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Colour
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtContextAtt
</UL>

<P><STRONG><a name="[447]"></a>String2CntEff</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, glyph.o(i.String2CntEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = String2CntEff &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtContextAtt
</UL>

<P><STRONG><a name="[462]"></a>String2Colour</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, glyph.o(i.String2Colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = String2Colour &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Clr
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Bkc
</UL>

<P><STRONG><a name="[449]"></a>String2Font</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, glyph.o(i.String2Font))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = String2Font &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtContextAtt
</UL>

<P><STRONG><a name="[2fb]"></a>Stripe_vy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hmi_comm.o(i.Stripe_vy))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus_text
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_Sy_cmd
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Show_entry
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_build_component
</UL>

<P><STRONG><a name="[d1]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[43f]"></a>System_default</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, system.o(i.System_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = System_default &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Reset
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[468]"></a>System_init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, system.o(i.System_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = System_init &rArr; System_power_on &rArr; STG_Set_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_new
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Read_code_end_temperature
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_on
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_default
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fb]"></a>System_power_off</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, system.o(i.System_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = System_power_off &rArr; MCH_Cancle_all_alarm &rArr; MdlChn_Cancle_alarm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCH_Cancle_all_alarm
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[46a]"></a>System_power_on</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, system.o(i.System_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = System_power_on &rArr; STG_Set_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_alm_pwr_num
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Get_alm_pwr_num
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[3e5]"></a>System_set_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system.o(i.System_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System_set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_set_by_string
</UL>

<P><STRONG><a name="[29f]"></a>System_time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(i.System_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_time
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_run
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_get_time
</UL>

<P><STRONG><a name="[af]"></a>TIM2_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, times.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46c]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[46b]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[388]"></a>TIP_Get_Sington</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, component_tips.o(i.TIP_Get_Sington))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIP_Get_Sington &rArr; CMP_tips_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_tips_new
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_USB_event
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Show_cmp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Clean_cmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hide_ico_tips
</UL>

<P><STRONG><a name="[2a3]"></a>Time_2_u32</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, system.o(i.Time_2_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Time_2_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_time_2_u32
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Run
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Win_cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_getData
</UL>

<P><STRONG><a name="[46d]"></a>TxtExpr_ctor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, txtexpr.o(i.TxtExpr_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TxtExpr_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Expr_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtExpr_new
</UL>

<P><STRONG><a name="[361]"></a>TxtExpr_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, txtexpr.o(i.TxtExpr_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TxtExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtExpr_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxtExpr
</UL>

<P><STRONG><a name="[c7]"></a>UART4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART4_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b2]"></a>UHI_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usb_hardware_interface.o(i.UHI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UHI_Init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_usb_when_idle
</UL>

<P><STRONG><a name="[b8]"></a>USART1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART1_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>USART2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART2_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>USART3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART3_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[301]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[304]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_Change_baud
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
</UL>

<P><STRONG><a name="[47b]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[305]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_Change_baud
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
</UL>

<P><STRONG><a name="[47f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
</UL>

<P><STRONG><a name="[47c]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
</UL>

<P><STRONG><a name="[302]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[306]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_Change_baud
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[308]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_clean_idle
</UL>

<P><STRONG><a name="[47e]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
</UL>

<P><STRONG><a name="[2ef]"></a>USB_Colse_file</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, usb.o(i.USB_Colse_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_Colse_file &rArr; CH376_Set_Data_Time &rArr; CH376SendCmdDatWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_status
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376_Set_Data_Time
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Create_file
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[2e8]"></a>USB_Create_file</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, usb.o(i.USB_Create_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_Create_file &rArr; USB_Colse_file &rArr; CH376_Set_Data_Time &rArr; CH376SendCmdDatWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Colse_file
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Last_name_offset
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_status
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376_Set_Data_Time
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileCreate
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[2f8]"></a>USB_Del_event_hdl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb.o(i.USB_Del_event_hdl))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Exit
</UL>

<P><STRONG><a name="[3b3]"></a>USB_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usb.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_Init &rArr; Init_Ch376 &rArr; mInitCH376Host &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_status
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_usb_when_idle
</UL>

<P><STRONG><a name="[471]"></a>USB_Open_file</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usb.o(i.USB_Open_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_Open_file &rArr; CH376FileOpen &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Last_name_offset
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_status
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Create_file
</UL>

<P><STRONG><a name="[2fc]"></a>USB_Rgt_event_hdl</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, usb.o(i.USB_Rgt_event_hdl))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_usb_when_idle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_init
</UL>

<P><STRONG><a name="[473]"></a>USB_Run</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb.o(i.USB_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Run &rArr; CQ_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ea]"></a>USB_Write_file</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usb.o(i.USB_Write_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_Write_file &rArr; CH376ByteWrite &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_lost_power
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_data
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_alarm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[1ea]"></a>UartGiveBackPlayloadBuf</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drive_uart.o(i.UartGiveBackPlayloadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartGiveBackPlayloadBuf &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[46e]"></a>Usart_irq</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, drive_uart.o(i.Usart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_loadbuflen
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_clean_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[408]"></a>UtlRtc_ctor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(i.UtlRtc_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_ctor
</UL>

<P><STRONG><a name="[1cf]"></a>UtlRtc_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rtc.o(i.UtlRtc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UtlRtc_get &rArr; GetCompileTime &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileYear
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileTime
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileMoth
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompileDay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[1ce]"></a>UtlRtc_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.UtlRtc_init))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[1d1]"></a>UtlRtc_readReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc.o(i.UtlRtc_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UtlRtc_readReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[1d0]"></a>UtlRtc_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.UtlRtc_set))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[1d2]"></a>UtlRtc_writeReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc.o(i.UtlRtc_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UtlRtc_writeReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.UtlRtc_ctor)
</UL>
<P><STRONG><a name="[489]"></a>W25Q_Cal_area</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hw_w25q.o(i.W25Q_Cal_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25Q_Cal_area
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_addr
</UL>

<P><STRONG><a name="[215]"></a>W25Q_Erase_addr</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, hw_w25q.o(i.W25Q_Erase_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25Q_Erase_addr &rArr; W25Q_Flush &rArr; W25Q_Change_cache_sct &rArr; W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_erase
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Flush
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Cal_area
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write_Sector_Data
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[21c]"></a>W25Q_Flush</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_w25q.o(i.W25Q_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = W25Q_Flush &rArr; W25Q_Change_cache_sct &rArr; W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[213]"></a>W25Q_WP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hw_w25q.o(i.W25Q_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25Q_WP
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[214]"></a>W25Q_erase</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hw_w25q.o(i.W25Q_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25Q_erase &rArr; w25q_Erase_Sector &rArr; W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_chip_c7
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_block
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[21a]"></a>W25Q_lock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_w25q.o(i.W25Q_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25Q_lock &rArr; Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[21b]"></a>W25Q_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_w25q.o(i.W25Q_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W25Q_unlock &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[249]"></a>Win_content</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmi_windowns.o(i.Win_content))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Win_cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_first_time
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_Sy_cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Key_ET
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Btn_hdl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Btn_hdl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Btn_hdl
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_cmd
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Password
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Btn_hdl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_key_er
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Btn_hdl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_key_er
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_Btn_hdl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALS_Btn_hdl
</UL>

<P><STRONG><a name="[49b]"></a>Write_IIC</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, drive_iic.o(i.Write_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Write_IIC &rArr; I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_EV
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_dev_IIC
</UL>

<P><STRONG><a name="[49c]"></a>Write_spi</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, drive_spi.o(i.Write_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Write_spi &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_devSpi
</UL>

<P><STRONG><a name="[49e]"></a>__0fprintf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[501]"></a>__1fprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)

<P><STRONG><a name="[33d]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>

<P><STRONG><a name="[4a0]"></a>__0snprintf$8</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[502]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[3e8]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Calculations
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_to_string
</UL>

<P><STRONG><a name="[4a1]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[503]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[248]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Print_enable
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Label
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_WrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Pic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Icon
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_CutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Box
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Bkc_pic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_BKColor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_UsartInit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_set_sys_param
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_touch_spot
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_sys_param
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_singnaltype
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_string
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Break_deal_string
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_float
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_rcd_by_time
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_alm_pwr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_InitSheet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_RTV_Run
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_first_time
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_Sy_cmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Update_bar
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_detach_model_chn
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Attach_model_chn
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmiShow
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Show
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Show
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Data_update
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_initSheet
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_hitHandle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Show_ico_tips
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Btn_hdl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Entry
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPW_Btn_hdl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Entry
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Btn_hdl
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Print_ACC
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Entry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAD_Entry
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_cmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Btn_hdl
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_update_content
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_Entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysStrategy_entry
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Btn_hdl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_bacnup_Strategy_entry
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_update_content
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Print_file_type
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Default_file_name
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnStrategy_entry
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_Btn_hdl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_entry
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALS_Btn_hdl
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_update_content
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctime_periodic
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_to_string
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[504]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[318]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_open
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_close
</UL>

<P><STRONG><a name="[23f]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_new
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlTimer_new
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_new
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_new
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxtExpr_new
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhRectangle_new
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhPic_new
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhTxt_new
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GhNone_new
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_new
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_new
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_new
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_new
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_new
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadBack_check
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PicExpr_new
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GmtrExpr_new
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtInput_new
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInptSht
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NtButton_new
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuInptSht
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_new
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_new
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_trendHMI_new
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_striped_background_new
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Progress_bar_new
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboardHMI_new
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_data_new
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmmHmi_new
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_bar_new
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_HMI_new
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_tips_new
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curve_new
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_new
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_new
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSlct_HMI_new
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHMI_new
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_main_new
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlKey_new
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelTime_new
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_new
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[505]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[506]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[507]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4d2]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[4a5]"></a>cmmHmi_ctor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hmi_comm.o(i.cmmHmi_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmmHmi_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmmHmi_new
</UL>

<P><STRONG><a name="[353]"></a>cmmHmi_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_comm.o(i.cmmHmi_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cmmHmi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmmHmi_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmmHMI
</UL>

<P><STRONG><a name="[4d1]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[4d8]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[4cf]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[2e7]"></a>delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_depend.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThrdKeyRun
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcf8563_set
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NLM_Entry
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Raw_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Raw_read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Erase_file
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_delay_ms
</UL>

<P><STRONG><a name="[4a6]"></a>devGpio_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, device_gpio.o(i.devGpio_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_new
</UL>

<P><STRONG><a name="[363]"></a>devGpio_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, device_gpio.o(i.devGpio_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = devGpio_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>

<P><STRONG><a name="[4a7]"></a>driveGpio_ctor</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drive_gpio.o(i.driveGpio_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_new
</UL>

<P><STRONG><a name="[364]"></a>driveGpio_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drive_gpio.o(i.driveGpio_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = driveGpio_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>

<P><STRONG><a name="[4a8]"></a>driveUart_ctor</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drive_uart.o(i.driveUart_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_new
</UL>

<P><STRONG><a name="[365]"></a>driveUart_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drive_uart.o(i.driveUart_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = driveUart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
</UL>

<P><STRONG><a name="[1d3]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0fprintf$8)
</UL>
<P><STRONG><a name="[479]"></a>free_playloadbuf</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ping_pongbuf.o(i.free_playloadbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGiveBackPlayloadBuf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
</UL>

<P><STRONG><a name="[481]"></a>get_loadbuflen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ping_pongbuf.o(i.get_loadbuflen))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[47d]"></a>get_playloadbuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ping_pongbuf.o(i.get_playloadbuf))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTakeUpPlayloadBuf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
</UL>

<P><STRONG><a name="[47a]"></a>init_pingponfbuf</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ping_pongbuf.o(i.init_pingponfbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_pingponfbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[4a9]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[4ab]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[4ae]"></a>isrSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.isrSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[4aa]"></a>isr_mbx_receive</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[4ad]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[4b0]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[4b3]"></a>keyboardHMI_ctor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hmi_keyboard.o(i.keyboardHMI_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keyboardHMI_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboardHMI_new
</UL>

<P><STRONG><a name="[377]"></a>keyboardHMI_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_keyboard.o(i.keyboardHMI_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = keyboardHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboardHMI_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetkeyboardHMI
</UL>

<P><STRONG><a name="[39f]"></a>mInitCH376Host</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ch376.o(i.mInitCH376Host))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mInitCH376Host &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Ch376
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>

<P><STRONG><a name="[22a]"></a>main</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; System_init &rArr; System_power_on &rArr; STG_Set_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Run
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Get_Sington
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Run
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBA_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Run
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cmd_Thread
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CtlKey
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyInsance
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtlTimer_new
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_time_task
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[4b4]"></a>menuHMI_ctor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hmi_menu.o(i.menuHMI_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menuHMI_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHMI_new
</UL>

<P><STRONG><a name="[378]"></a>menuHMI_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_menu.o(i.menuHMI_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = menuHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuHMI_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetmenuHMI
</UL>

<P><STRONG><a name="[2ca]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Bkc_pic
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
</UL>

<P><STRONG><a name="[22e]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[230]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[4b5]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[440]"></a>osSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
</UL>

<P><STRONG><a name="[442]"></a>osSemaphoreRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>

<P><STRONG><a name="[441]"></a>osSemaphoreWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreWait))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
</UL>

<P><STRONG><a name="[22f]"></a>osThreadCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cmd_Thread
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[211]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[2ce]"></a>osThreadYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Thread
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThrdKeyRun
</UL>

<P><STRONG><a name="[4b6]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[3a8]"></a>osTimerCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ctime
</UL>

<P><STRONG><a name="[3a9]"></a>osTimerStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ctime
</UL>

<P><STRONG><a name="[229]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[4c8]"></a>os_error</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[210]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[4d5]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[235]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[cf]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[4e4]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[4b7]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[4bb]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[4bd]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[4be]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[4c0]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[4c1]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[d0]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[4e5]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[4b9]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[4dc]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_same_rdy_prio))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[4e0]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[4d3]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[4c5]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[4ac]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[4e2]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[4c6]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[4c9]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[232]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4b2]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[4b1]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[4b8]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[4bc]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[4bf]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[4cb]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[4c7]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[4c3]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[4c2]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[4cc]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[4e3]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[4ca]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[4cd]"></a>rt_sem_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[4ce]"></a>rt_sem_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[231]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[4ba]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[4d0]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[4d4]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[233]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4d7]"></a>rt_tsk_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[4d9]"></a>rt_tsk_delete</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[4db]"></a>rt_tsk_pass</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[4dd]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[4e6]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[202]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[203]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[204]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[4e1]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[205]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[206]"></a>svcSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreCreate)
</UL>
<P><STRONG><a name="[207]"></a>svcSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[208]"></a>svcSemaphoreWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreWait)
</UL>
<P><STRONG><a name="[209]"></a>svcThreadCreate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[20a]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[20b]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[20c]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadYield)
</UL>
<P><STRONG><a name="[20d]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[20e]"></a>svcTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCreate)
</UL>
<P><STRONG><a name="[20f]"></a>svcTimerStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcTimerStart &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[478]"></a>switch_receivebuf</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, ping_pongbuf.o(i.switch_receivebuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = switch_receivebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[4d6]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[216]"></a>w25q_Write</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, hw_w25q.o(i.w25q_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = w25q_Write &rArr; W25Q_Change_cache_sct &rArr; W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_cache
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Addr_2_sct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[212]"></a>w25q_info</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = w25q_info &rArr; w25q_read_id
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_read_id
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[469]"></a>w25q_init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = w25q_init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_info
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[218]"></a>w25q_rd_data</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, hw_w25q.o(i.w25q_rd_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = w25q_rd_data &rArr; W25Q_Change_cache_sct &rArr; W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_rd_cache
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Addr_2_sct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[4ed]"></a>winHmi_ctor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hmi_windowns.o(i.winHmi_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = winHmi_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_new
</UL>

<P><STRONG><a name="[376]"></a>winHmi_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_windowns.o(i.winHmi_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = winHmi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ctor
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_winHmi
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1fa]"></a>Init_usb_when_idle</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.Init_usb_when_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Init_usb_when_idle &rArr; UHI_Init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Rgt_event_hdl
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[163]"></a>Main_USB_event</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.Main_USB_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Main_USB_event &rArr; TIP_Get_Sington &rArr; CMP_tips_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Init_usb_when_idle)
</UL>
<P><STRONG><a name="[226]"></a>ThrdKeyRun</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.ThrdKeyRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThrdKeyRun &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[227]"></a>Cmd_Thread</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, cmd_thread.o(i.Cmd_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cmd_Thread &rArr; SYS_time_sec &rArr; Time_2_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_bit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_thread.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>MBA_Acc_data_accumulation</STRONG> (Thumb, 236 bytes, Stack size 28 bytes, modbus_app.o(i.MBA_Acc_data_accumulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MBA_Acc_data_accumulation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.MBA_Get_acc_func)
</UL>
<P><STRONG><a name="[172]"></a>MBA_Acc_data_real_time</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, modbus_app.o(i.MBA_Acc_data_real_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MBA_Acc_data_real_time &rArr; Create_model &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.MBA_Get_acc_func)
</UL>
<P><STRONG><a name="[170]"></a>MBA_Acc_param_PID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus_app.o(i.MBA_Acc_param_PID))
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.MBA_Get_acc_func)
</UL>
<P><STRONG><a name="[16f]"></a>MBA_Acc_param_accumulation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus_app.o(i.MBA_Acc_param_accumulation))
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.MBA_Get_acc_func)
</UL>
<P><STRONG><a name="[16d]"></a>MBA_Acc_param_channel</STRONG> (Thumb, 866 bytes, Stack size 40 bytes, modbus_app.o(i.MBA_Acc_param_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MBA_Acc_param_channel &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.MBA_Get_acc_func)
</UL>
<P><STRONG><a name="[171]"></a>MBA_Acc_param_flow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus_app.o(i.MBA_Acc_param_flow))
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.MBA_Get_acc_func)
</UL>
<P><STRONG><a name="[16c]"></a>MBA_Acc_param_system</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, modbus_app.o(i.MBA_Acc_param_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MBA_Acc_param_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.MBA_Get_acc_func)
</UL>
<P><STRONG><a name="[16e]"></a>MBA_Acc_param_transmitting</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus_app.o(i.MBA_Acc_param_transmitting))
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.MBA_Get_acc_func)
</UL>
<P><STRONG><a name="[3c5]"></a>MBA_Get_acc_func</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, modbus_app.o(i.MBA_Get_acc_func))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_reg_2_ram
</UL>

<P><STRONG><a name="[174]"></a>MBA_Run</STRONG> (Thumb, 90 bytes, Stack size 384 bytes, modbus_app.o(i.MBA_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = MBA_Run &rArr; MBC_Decode_pkt &rArr; MBC_reg_2_ram &rArr; MBA_reg_2_area
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Get_pkt_addr
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Decode_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(i.MBA_Init)
</UL>
<P><STRONG><a name="[3c4]"></a>MBA_reg_2_area</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, modbus_app.o(i.MBA_reg_2_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MBA_reg_2_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_reg_2_ram
</UL>

<P><STRONG><a name="[2a4]"></a>CNA_u64_add</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, channel_accumulated.o(i.CNA_u64_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CNA_u64_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Run
</UL>

<P><STRONG><a name="[45d]"></a>SmBus_Check_head</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Check_head))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
</UL>

<P><STRONG><a name="[458]"></a>SmBus_Check_tail</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Check_tail))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[459]"></a>SmBus_Cmd_err</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Cmd_err))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[45b]"></a>SmBus_Get_u16</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, smart_bus.o(i.SmBus_Get_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SmBus_Get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[454]"></a>SmBus_Tail</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Tail))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Query
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
</UL>

<P><STRONG><a name="[452]"></a>SmBus_U16</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_U16))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
</UL>

<P><STRONG><a name="[453]"></a>SmBus_crc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, smart_bus.o(i.SmBus_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SmBus_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Query
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[457]"></a>SmBus_dcd_AI_read</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_dcd_AI_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_dcd_AI_read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_crc
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_u16
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Cmd_err
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
</UL>

<P><STRONG><a name="[45c]"></a>SmBus_dcd_query</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_dcd_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SmBus_dcd_query &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_crc
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Cmd_err
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_tail
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
</UL>

<P><STRONG><a name="[45e]"></a>SmBus_dcd_read</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, smart_bus.o(i.SmBus_dcd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_dcd_read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_crc
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Cmd_err
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_tail
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
</UL>

<P><STRONG><a name="[3c3]"></a>Big_end_to_Little_end</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbusrtu_cli.o(i.Big_end_to_Little_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Big_end_to_Little_end
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Decode_pkt
</UL>

<P><STRONG><a name="[3c2]"></a>Little_end_to_Big_end</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbusrtu_cli.o(i.Little_end_to_Big_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Little_end_to_Big_end
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBC_Decode_pkt
</UL>

<P><STRONG><a name="[336]"></a>ExtiIrq</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drive_gpio.o(i.ExtiIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExtiIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>GpioDeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioDeInit))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[1de]"></a>GpioInit</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, drive_gpio.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GpioInit &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[1e0]"></a>GpioRead</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drive_gpio.o(i.GpioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioRead
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[1e3]"></a>GpioSetEncode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioSetEncode))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[1e2]"></a>GpioSetIrqHdl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioSetIrqHdl))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[1e5]"></a>GpioTest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioTest))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[1e1]"></a>GpioWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioWrite))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[1e4]"></a>Gpio_control_irq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drive_gpio.o(i.Gpio_control_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Gpio_control_irq &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[39c]"></a>I2C_wait_EV</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drive_iic.o(i.I2C_wait_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[3ae]"></a>Spi_baud_Prescaler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drive_spi.o(i.Spi_baud_Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[3ad]"></a>Spi_mode_CP</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, drive_spi.o(i.Spi_mode_CP))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[420]"></a>spi_read_word</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drive_spi.o(i.spi_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_read_word
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_spi
</UL>

<P><STRONG><a name="[49d]"></a>spi_write_word</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, drive_spi.o(i.spi_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_spi
</UL>

<P><STRONG><a name="[307]"></a>DRI_Uart_clean_idle</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drive_uart.o(i.DRI_Uart_clean_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRI_Uart_clean_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[1e7]"></a>UartDeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drive_uart.o(i.UartDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UartDeInit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[474]"></a>UartDma_Init</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, drive_uart.o(i.UartDma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UartDma_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[1e6]"></a>UartInit</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, drive_uart.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UartInit &rArr; UartDma_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pingponfbuf
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_clean_idle
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1ec]"></a>UartIoctol</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, drive_uart.o(i.UartIoctol))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartIoctol
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1e8]"></a>UartRead</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, drive_uart.o(i.UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartRead &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_playloadbuf
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1ee]"></a>UartSetIdp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetIdp))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1ed]"></a>UartSetLedHdl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetLedHdl))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1f0]"></a>UartSetPostSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetPostSem))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1ef]"></a>UartSetWaitSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetWaitSem))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1e9]"></a>UartTakeUpPlayloadBuf</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drive_uart.o(i.UartTakeUpPlayloadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartTakeUpPlayloadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_playloadbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1f1]"></a>UartTest</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, drive_uart.o(i.UartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UartTest &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1eb]"></a>UartWrite</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, drive_uart.o(i.UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UartWrite &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[108]"></a>UartLedRxHdl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_uart.o(i.UartLedRxHdl))
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[109]"></a>UartLedTxHdl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_uart.o(i.UartLedTxHdl))
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[106]"></a>UartPostRxSem</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dev_uart.o(i.UartPostRxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartPostRxSem &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[107]"></a>UartPostTxSem</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dev_uart.o(i.UartPostTxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartPostTxSem &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[104]"></a>UartWaitRxSem</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_uart.o(i.UartWaitRxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartWaitRxSem &rArr; Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[105]"></a>UartWaitTxSem</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_uart.o(i.UartWaitTxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartWaitTxSem &rArr; Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[10b]"></a>Close_devSpi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_spi.o(i.Close_devSpi))
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[10e]"></a>Ioctol_devSpi</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dev_spi.o(i.Ioctol_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ioctol_devSpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[10a]"></a>Open_devSpi</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dev_spi.o(i.Open_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Open_devSpi &rArr; Init_spi &rArr; SPI_I2S_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[10c]"></a>Read_devSpi</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dev_spi.o(i.Read_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_devSpi &rArr; Read_spi &rArr; spi_read_word
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[10f]"></a>Test_devSpi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_spi.o(i.Test_devSpi))
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[10d]"></a>Write_devSpi</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dev_spi.o(i.Write_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Write_devSpi &rArr; Write_spi &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[4]"></a>ClearLcd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.ClearLcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ClearLcd &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Dev_UsartInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.Dev_UsartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Dev_UsartInit &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Dev_UsartdeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.Dev_UsartdeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dev_UsartdeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>GPU_BKColor</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.GPU_BKColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPU_BKColor &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>GPU_Bkc_pic</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, dev_lcdusartgpu.o(i.GPU_Bkc_pic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPU_Bkc_pic &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_send_done
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>GPU_Box</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, dev_lcdusartgpu.o(i.GPU_Box))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPU_Box &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>GPU_CutPicture</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, dev_lcdusartgpu.o(i.GPU_CutPicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GPU_CutPicture &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>GPU_Done</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.GPU_Done))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPU_Done &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_send_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>GPU_Icon</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, dev_lcdusartgpu.o(i.GPU_Icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GPU_Icon &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[34d]"></a>GPU_Manager_cmd_buf</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dev_lcdusartgpu.o(i.GPU_Manager_cmd_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPU_Manager_cmd_buf &rArr; GPU_send_done &rArr; GPU_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_send_done
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Label
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_WrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Pic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Icon
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_CutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Box
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Bkc_pic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_BKColor
</UL>

<P><STRONG><a name="[b]"></a>GPU_Pic</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dev_lcdusartgpu.o(i.GPU_Pic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPU_Pic &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[2c9]"></a>GPU_Send</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dev_lcdusartgpu.o(i.GPU_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPU_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Label
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_send_done
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_WrString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Pic
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Icon
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_CutPicture
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Box
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Bkc_pic
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_BKColor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_UsartInit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLcd
</UL>

<P><STRONG><a name="[9]"></a>GPU_StrSize</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, dev_lcdusartgpu.o(i.GPU_StrSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPU_StrSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>GPU_WrString</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, dev_lcdusartgpu.o(i.GPU_WrString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GPU_WrString &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[34e]"></a>GPU_send_done</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_lcdusartgpu.o(i.GPU_send_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPU_send_done &rArr; GPU_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Send
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Manager_cmd_buf
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Done
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Bkc_pic
</UL>

<P><STRONG><a name="[a]"></a>GetScrnSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_lcdusartgpu.o(i.GetScrnSize))
<BR>[Address Reference Count : 1]<UL><LI> dev_lcdusartgpu.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>Close_dev_IIC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_iic.o(i.Close_dev_IIC))
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[fc]"></a>Ioctol_dev_IIC</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, dev_iic.o(i.Ioctol_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ioctol_dev_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[f8]"></a>Open_dev_IIC</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_iic.o(i.Open_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Open_dev_IIC &rArr; Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[fa]"></a>Read_dev_IIC</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, dev_iic.o(i.Read_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Read_dev_IIC &rArr; Read_IIC &rArr; Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[fd]"></a>Test_dev_IIC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_iic.o(i.Test_dev_IIC))
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[fb]"></a>Write_dev_IIC</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, dev_iic.o(i.Write_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Write_dev_IIC &rArr; Write_IIC &rArr; I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[1d9]"></a>DevGpioClose</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioClose))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[1dc]"></a>DevGpioIoctol</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, device_gpio.o(i.DevGpioIoctol))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DevGpioIoctol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[1d8]"></a>DevGpioOpen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioOpen))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[1da]"></a>DevGpioRead</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, device_gpio.o(i.DevGpioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DevGpioRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[1dd]"></a>DevGpioTest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioTest))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[1db]"></a>DevGpioWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioWrite))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[12c]"></a>Draw_self</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glyph.o(i.Draw_self))
<BR>[Address Reference Count : 1]<UL><LI> glyph.o(i.Glyph_ctor)
</UL>
<P><STRONG><a name="[12b]"></a>Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, glyph.o(i.Init))
<BR>[Address Reference Count : 1]<UL><LI> glyph.o(i.Glyph_ctor)
</UL>
<P><STRONG><a name="[12d]"></a>vDraw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glyph.o(i.vDraw))
<BR>[Address Reference Count : 1]<UL><LI> glyph.o(i.Glyph_ctor)
</UL>
<P><STRONG><a name="[12a]"></a>GhTxt_GetSize</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gh_txt.o(i.GhTxt_GetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GhTxt_GetSize &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gh_txt.o(i.GhTxt_ctor)
</UL>
<P><STRONG><a name="[129]"></a>GhTxt_vDraw</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, gh_txt.o(i.GhTxt_vDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GhTxt_vDraw &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorInvert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gh_txt.o(i.GhTxt_ctor)
</UL>
<P><STRONG><a name="[127]"></a>GhPic_vDraw</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, gh_pic.o(i.GhPic_vDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GhPic_vDraw &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gh_pic.o(i.GhPic_ctor)
</UL>
<P><STRONG><a name="[128]"></a>GhRec_vDraw</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, gh_rectangle.o(i.GhRec_vDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GhRec_vDraw &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorInvert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gh_rectangle.o(i.GhRectangle_ctor)
</UL>
<P><STRONG><a name="[1c1]"></a>TxtInptSht</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, txtexpr.o(i.TxtInptSht))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TxtInptSht &rArr; Set_shtContextAtt &rArr; String2CntEff &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTail
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameVale
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAttribute
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtContextAtt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtAreaAtt
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhTxt
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> txtexpr.o(i.TxtExpr_ctor)
</UL>
<P><STRONG><a name="[352]"></a>Eliminate_char</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, reader.o(i.Eliminate_char))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTail
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAttribute
</UL>

<P><STRONG><a name="[196]"></a>BuInptSht</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, ntbutton.o(i.BuInptSht))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BuInptSht &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveHead
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTail
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAttribute
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtContextAtt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtAreaAtt
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhRectangle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntbutton.o(i.NtButton_ctor)
</UL>
<P><STRONG><a name="[197]"></a>InputInptSht</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, ntinput.o(i.InputInptSht))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = InputInptSht &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveHead
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTail
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAttribute
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtContextAtt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtAreaAtt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhNone
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntinput.o(i.NtInput_ctor)
</UL>
<P><STRONG><a name="[12e]"></a>GeoInptSht</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, geometricsexpr.o(i.GeoInptSht))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GeoInptSht &rArr; Set_shtContextAtt &rArr; String2CntEff &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAttribute
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtContextAtt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtAreaAtt
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhRectangle
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> geometricsexpr.o(i.GmtrExpr_ctor)
</UL>
<P><STRONG><a name="[19f]"></a>PicInptSht</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, picexpr.o(i.PicInptSht))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PicInptSht &rArr; Set_shtContextAtt &rArr; String2CntEff &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTail
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameVale
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAttribute
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtContextAtt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_shtAreaAtt
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GhPic
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> picexpr.o(i.PicExpr_ctor)
</UL>
<P><STRONG><a name="[344]"></a>FM25_Write_status</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fm25.o(i.FM25_Write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM25_Write_status
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WP
</UL>

<P><STRONG><a name="[347]"></a>FM25_cmd_addr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fm25.o(i.FM25_cmd_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM25_cmd_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_rd_data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
</UL>

<P><STRONG><a name="[345]"></a>FM25_wr_enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fm25.o(i.FM25_wr_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM25_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_Write
</UL>

<P><STRONG><a name="[491]"></a>W25Q_Addr_2_sct</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_w25q.o(i.W25Q_Addr_2_sct))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_sct_offset
</UL>

<P><STRONG><a name="[484]"></a>W25Q_Change_cache_sct</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hw_w25q.o(i.W25Q_Change_cache_sct))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W25Q_Change_cache_sct &rArr; W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write_Sector_Data
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_Sector
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadBack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Flush
</UL>

<P><STRONG><a name="[219]"></a>W25Q_Raw_Read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hw_w25q.o(i.W25Q_Raw_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q_Raw_Read &rArr; w25q_Read_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[217]"></a>W25Q_Raw_write</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, hw_w25q.o(i.W25Q_Raw_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = W25Q_Raw_write &rArr; W25Q_wr_fsh &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_flash
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_w25q.o(i.w25q_init)
</UL>
<P><STRONG><a name="[487]"></a>W25Q_ReadBack_check</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hw_w25q.o(i.W25Q_ReadBack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = W25Q_ReadBack_check &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Read_Sector_Data
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>

<P><STRONG><a name="[48f]"></a>W25Q_rd_cache</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hw_w25q.o(i.W25Q_rd_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q_rd_cache &rArr; W25Q_sct_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_sct_offset
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
</UL>

<P><STRONG><a name="[490]"></a>W25Q_sct_offset</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hw_w25q.o(i.W25Q_sct_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25Q_sct_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Addr_2_sct
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_cache
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_rd_cache
</UL>

<P><STRONG><a name="[492]"></a>W25Q_send_wait</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, hw_w25q.o(i.W25Q_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_chip_c7
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_block
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Erase_Sector
</UL>

<P><STRONG><a name="[495]"></a>W25Q_wr_cache</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hw_w25q.o(i.W25Q_wr_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q_wr_cache &rArr; W25Q_sct_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_sct_offset
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
</UL>

<P><STRONG><a name="[48b]"></a>W25Q_wr_fsh</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, hw_w25q.o(i.W25Q_wr_fsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25Q_wr_fsh &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_wr_enable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write_Sector_Data
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Raw_write
</UL>

<P><STRONG><a name="[485]"></a>w25q_Erase_Sector</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = w25q_Erase_Sector &rArr; W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_erase
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>

<P><STRONG><a name="[48d]"></a>w25q_Erase_block</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_Erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = w25q_Erase_block &rArr; W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_erase
</UL>

<P><STRONG><a name="[48e]"></a>w25q_Erase_chip_c7</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_Erase_chip_c7))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = w25q_Erase_chip_c7 &rArr; W25Q_send_wait &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_erase
</UL>

<P><STRONG><a name="[494]"></a>w25q_ReadSR</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25q_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>

<P><STRONG><a name="[488]"></a>w25q_Read_Sector_Data</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hw_w25q.o(i.w25q_Read_Sector_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = w25q_Read_Sector_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_rd_data
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_Write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_addr
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadBack_check
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>

<P><STRONG><a name="[48a]"></a>w25q_Read_flash</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, hw_w25q.o(i.w25q_Read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = w25q_Read_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Raw_write
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Raw_Read
</UL>

<P><STRONG><a name="[486]"></a>w25q_Write_Sector_Data</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hw_w25q.o(i.w25q_Write_Sector_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = w25q_Write_Sector_Data &rArr; W25Q_wr_fsh &rArr; w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_addr
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Change_cache_sct
</UL>

<P><STRONG><a name="[4ea]"></a>w25q_read_id</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, hw_w25q.o(i.w25q_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = w25q_read_id
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25q_info
</UL>

<P><STRONG><a name="[493]"></a>w25q_wr_enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hw_w25q.o(i.w25q_wr_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25q_wr_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_wr_fsh
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_send_wait
</UL>

<P><STRONG><a name="[167]"></a>Key_DelOb</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, keyboard.o(i.Key_DelOb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_DelOb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.Keyboard_ctor)
</UL>
<P><STRONG><a name="[168]"></a>Key_Run</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, keyboard.o(i.Key_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.Keyboard_ctor)
</UL>
<P><STRONG><a name="[166]"></a>Key_addOb</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, keyboard.o(i.Key_addOb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_addOb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.Keyboard_ctor)
</UL>
<P><STRONG><a name="[16b]"></a>Key_identify_key_msg</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, keyboard.o(i.Key_identify_key_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_identify_key_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.Keyboard_ctor)
</UL>
<P><STRONG><a name="[169]"></a>Key_notify</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, keyboard.o(i.Key_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.Keyboard_ctor)
</UL>
<P><STRONG><a name="[16a]"></a>Key_scan_pins</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, keyboard.o(i.Key_scan_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Key_scan_pins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.Keyboard_ctor)
</UL>
<P><STRONG><a name="[165]"></a>Keyboard_init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, keyboard.o(i.Keyboard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Keyboard_init &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(i.Keyboard_ctor)
</UL>
<P><STRONG><a name="[42b]"></a>STG_Acc_chn_alarm</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, storage.o(i.STG_Acc_chn_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STG_Acc_chn_alarm &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[42c]"></a>STG_Acc_chn_conf</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, storage.o(i.STG_Acc_chn_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = STG_Acc_chn_conf &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[42e]"></a>STG_Acc_chn_data</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, storage.o(i.STG_Acc_chn_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = STG_Acc_chn_data &rArr; LOG_Add &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_En_save_data
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Clean_save_data
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[431]"></a>STG_Acc_chn_sum</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, storage.o(i.STG_Acc_chn_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STG_Acc_chn_sum &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[432]"></a>STG_Acc_file</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, storage.o(i.STG_Acc_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STG_Acc_file &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[433]"></a>STG_Acc_lose_pwr</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, storage.o(i.STG_Acc_lose_pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = STG_Acc_lose_pwr &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[434]"></a>STG_Acc_sys_conf</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, storage.o(i.STG_Acc_sys_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = STG_Acc_sys_conf &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[430]"></a>STG_Clean_save_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, storage.o(i.STG_Clean_save_data))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Run
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
</UL>

<P><STRONG><a name="[42f]"></a>STG_En_save_data</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, storage.o(i.STG_En_save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STG_En_save_data
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Is_sava_data_full
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
</UL>

<P><STRONG><a name="[437]"></a>STG_Is_sava_data_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, storage.o(i.STG_Is_sava_data_empty))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Remove_save_data
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Out_save_data
</UL>

<P><STRONG><a name="[435]"></a>STG_Is_sava_data_full</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, storage.o(i.STG_Is_sava_data_full))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_En_save_data
</UL>

<P><STRONG><a name="[1c0]"></a>STG_Open_file</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, storage.o(i.STG_Open_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Run
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_sys_conf
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_lose_pwr
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_file
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_sum
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_alarm
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Resize
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_rcd_by_time
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_data_by_time
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Erase_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[436]"></a>STG_Out_save_data</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, storage.o(i.STG_Out_save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STG_Out_save_data
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Is_sava_data_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Run
</UL>

<P><STRONG><a name="[438]"></a>STG_Read_chn_data_will_retry</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, storage.o(i.STG_Read_chn_data_will_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STG_Read_chn_data_will_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_data_by_time
</UL>

<P><STRONG><a name="[439]"></a>STG_Remove_save_data</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, storage.o(i.STG_Remove_save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STG_Remove_save_data
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Is_sava_data_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Run
</UL>

<P><STRONG><a name="[42d]"></a>Strg_Updata_rcd_mgr</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, storage.o(i.Strg_Updata_rcd_mgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
</UL>

<P><STRONG><a name="[1bf]"></a>Strg_WR_stored_data</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, storage.o(i.Strg_WR_stored_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Strg_WR_stored_data &rArr; STG_Acc_chn_data &rArr; LOG_Add &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_sys_conf
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_lose_pwr
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_file
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_sum
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[1bd]"></a>Strg_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, storage.o(i.Strg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Strg_init &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[1be]"></a>Strg_rd_stored_data</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, storage.o(i.Strg_rd_stored_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Strg_rd_stored_data &rArr; STG_Acc_chn_data &rArr; LOG_Add &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_sys_conf
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_lose_pwr
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_file
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_sum
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[273]"></a>Break_deal_string</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, phn_string.o(i.Break_deal_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Break_deal_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_set_sys_param
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_sys_param
</UL>

<P><STRONG><a name="[323]"></a>Disable_string</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, phn_string.o(i.Disable_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Disable_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_set_sys_param
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_sys_param
</UL>

<P><STRONG><a name="[3bc]"></a>LOG_Read_flash</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, log.o(i.LOG_Read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LOG_Read_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read
</UL>

<P><STRONG><a name="[3ba]"></a>LOG_Write_flash</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, log.o(i.LOG_Write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Add
</UL>

<P><STRONG><a name="[44f]"></a>Sheet_refreshsub</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sheet.o(i.Sheet_refreshsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sheet_refreshsub
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_slide
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
</UL>

<P><STRONG><a name="[dc]"></a>BTN_Build_each_btn</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, component_button.o(i.BTN_Build_each_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BTN_Build_each_btn &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_bit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Get_subcnt
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_button.o(i.Button_ctor)
</UL>
<P><STRONG><a name="[dd]"></a>BTN_Clean_btn</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, component_button.o(i.BTN_Clean_btn))
<BR>[Address Reference Count : 1]<UL><LI> component_button.o(i.Button_ctor)
</UL>
<P><STRONG><a name="[e0]"></a>BTN_Deal_hit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, component_button.o(i.BTN_Deal_hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTN_Deal_hit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_button.o(i.Button_ctor)
</UL>
<P><STRONG><a name="[db]"></a>BTN_Init</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, component_button.o(i.BTN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BTN_Init &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatSheetSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_button.o(i.Button_ctor)
</UL>
<P><STRONG><a name="[df]"></a>BTN_Move_focus</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, component_button.o(i.BTN_Move_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BTN_Move_focus &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_button.o(i.Button_ctor)
</UL>
<P><STRONG><a name="[de]"></a>BTN_Show_vaild_btn</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, component_button.o(i.BTN_Show_vaild_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BTN_Show_vaild_btn &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_button.o(i.Button_ctor)
</UL>
<P><STRONG><a name="[34a]"></a>Focus_find</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, focus.o(i.Focus_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Focus_find
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_alloc
</UL>

<P><STRONG><a name="[34c]"></a>CoordinateCalculation</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, format.o(i.CoordinateCalculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CoordinateCalculation
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatSheet
</UL>

<P><STRONG><a name="[141]"></a>ConposeKeyHandle</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, hmi.o(i.ConposeKeyHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ConposeKeyHandle &rArr; Create_HMI &rArr; GetmenuHMI &rArr; menuHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[140]"></a>DHitHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi.o(i.DHitHandle))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[149]"></a>HMI_Btn_backward</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hmi.o(i.HMI_Btn_backward))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HMI_Btn_backward &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[148]"></a>HMI_Btn_forward</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hmi.o(i.HMI_Btn_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HMI_Btn_forward &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[14a]"></a>HMI_Btn_jumpout</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hmi.o(i.HMI_Btn_jumpout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HMI_Btn_jumpout &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[145]"></a>HMI_Build_cmp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hmi.o(i.HMI_Build_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HMI_Build_cmp &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[146]"></a>HMI_Clean_cmp</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hmi.o(i.HMI_Clean_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HMI_Clean_cmp &rArr; TIP_Get_Sington &rArr; CMP_tips_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Get_Sington
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[131]"></a>HMI_Flush</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hmi.o(i.HMI_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HMI_Flush &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_time_task
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hmi.o(i.HMI_Flush)
<LI> hmi.o(i.HMI_Init)
</UL>
<P><STRONG><a name="[463]"></a>HMI_Pop_hmi</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hmi.o(i.HMI_Pop_hmi))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchBack
</UL>

<P><STRONG><a name="[465]"></a>HMI_Push_hmi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hmi.o(i.HMI_Push_hmi))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHMI
</UL>

<P><STRONG><a name="[13b]"></a>HMI_Run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi.o(i.HMI_Run))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[147]"></a>HMI_Show_cmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hmi.o(i.HMI_Show_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HMI_Show_cmp &rArr; TIP_Get_Sington &rArr; CMP_tips_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIP_Get_Sington
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[13e]"></a>HitHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi.o(i.HitHandle))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[13a]"></a>HmiShow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi.o(i.HmiShow))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[13f]"></a>LngpshHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi.o(i.LngpshHandle))
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[13d]"></a>SwitchBack</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, hmi.o(i.SwitchBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SwitchBack &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_flag_show
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Pop_hmi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[13c]"></a>SwitchHMI</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, hmi.o(i.SwitchHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SwitchHMI &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_flag_show
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Push_hmi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi.o(i.HMI_ctor)
</UL>
<P><STRONG><a name="[1a2]"></a>PGB_Build_bar</STRONG> (Thumb, 1048 bytes, Stack size 24 bytes, component_progress_bar.o(i.PGB_Build_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PGB_Build_bar &rArr; Set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_bit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_progress_bar.o(i.Progress_bar_ctor)
</UL>
<P><STRONG><a name="[198]"></a>PGB_Cal_cross</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, component_progress_bar.o(i.PGB_Cal_cross))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PGB_Cal_cross
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_progress_bar.o(i.PGB_Init)
</UL>
<P><STRONG><a name="[199]"></a>PGB_Cal_paraller</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, component_progress_bar.o(i.PGB_Cal_paraller))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PGB_Cal_paraller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_progress_bar.o(i.PGB_Init)
</UL>
<P><STRONG><a name="[1a4]"></a>PGB_Delete_bar</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, component_progress_bar.o(i.PGB_Delete_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PGB_Delete_bar &rArr; Set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_progress_bar.o(i.Progress_bar_ctor)
</UL>
<P><STRONG><a name="[1a0]"></a>PGB_Init</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, component_progress_bar.o(i.PGB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PGB_Init &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_progress_bar.o(i.Progress_bar_ctor)
</UL>
<P><STRONG><a name="[1a1]"></a>PGB_Set_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, component_progress_bar.o(i.PGB_Set_self))
<BR>[Address Reference Count : 1]<UL><LI> component_progress_bar.o(i.Progress_bar_ctor)
</UL>
<P><STRONG><a name="[1a5]"></a>PGB_Show_bar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, component_progress_bar.o(i.PGB_Show_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PGB_Show_bar &rArr; PGB_Update_bar &rArr; Sheet_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Update_bar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_progress_bar.o(i.Progress_bar_ctor)
</UL>
<P><STRONG><a name="[1a3]"></a>PGB_Update_bar</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, component_progress_bar.o(i.PGB_Update_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PGB_Update_bar &rArr; Sheet_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_slide
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Show_bar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_progress_bar.o(i.Progress_bar_ctor)
</UL>
<P><STRONG><a name="[2c8]"></a>Clean_stripe</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hmi_striped_background.o(i.Clean_stripe))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Clean_stripe &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Turn_page
</UL>

<P><STRONG><a name="[161]"></a>HMI_SBG_Build_component</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hmi_striped_background.o(i.HMI_SBG_Build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HMI_SBG_Build_component
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[15f]"></a>HMI_SBG_Clear_focus</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hmi_striped_background.o(i.HMI_SBG_Clear_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HMI_SBG_Clear_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[15d]"></a>HMI_SBG_Compose_hit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hmi_striped_background.o(i.HMI_SBG_Compose_hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HMI_SBG_Compose_hit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[159]"></a>HMI_SBG_Hide</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hmi_striped_background.o(i.HMI_SBG_Hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HMI_SBG_Hide &rArr; Sheet_free &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[15b]"></a>HMI_SBG_Hit</STRONG> (Thumb, 598 bytes, Stack size 40 bytes, hmi_striped_background.o(i.HMI_SBG_Hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HMI_SBG_Hit &rArr; Create_HMI &rArr; GetmenuHMI &rArr; menuHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus_text
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[157]"></a>HMI_SBG_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hmi_striped_background.o(i.HMI_SBG_Init))
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[15e]"></a>HMI_SBG_Init_focus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hmi_striped_background.o(i.HMI_SBG_Init_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HMI_SBG_Init_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[158]"></a>HMI_SBG_Init_sheet</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, hmi_striped_background.o(i.HMI_SBG_Init_sheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HMI_SBG_Init_sheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[15c]"></a>HMI_SBG_Long_hit</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, hmi_striped_background.o(i.HMI_SBG_Long_hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HMI_SBG_Long_hit &rArr; Strategy_focus &rArr; Strategy_focus_text
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[15a]"></a>HMI_SBG_Show</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hmi_striped_background.o(i.HMI_SBG_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HMI_SBG_Show &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Show_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[38c]"></a>HMI_SBG_Show_entry</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, hmi_striped_background.o(i.HMI_SBG_Show_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HMI_SBG_Show_entry &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stripe_vy
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Turn_page
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Show
</UL>

<P><STRONG><a name="[160]"></a>HMI_SBG_Show_focus</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hmi_striped_background.o(i.HMI_SBG_Show_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HMI_SBG_Show_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_striped_background.o(i.HMI_striped_background_ctor)
</UL>
<P><STRONG><a name="[38d]"></a>HMI_SBG_Turn_page</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hmi_striped_background.o(i.HMI_SBG_Turn_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HMI_SBG_Turn_page &rArr; Clean_stripe &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Show_entry
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clean_stripe
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_btn_hdl
</UL>

<P><STRONG><a name="[132]"></a>Setting_Sy_cmd</STRONG> (Thumb, 446 bytes, Stack size 72 bytes, hmi_striped_background.o(i.Setting_Sy_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Setting_Sy_cmd &rArr; Create_HMI &rArr; GetmenuHMI &rArr; menuHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stripe_vy
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HKB_Set_input
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_winHmi
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hmi_striped_background.o(i.HMI_SBG_Init_sheet)
<LI> hmi_striped_background.o(i.Setting_Sy_cmd)
</UL>
<P><STRONG><a name="[38a]"></a>Strategy_focus</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, hmi_striped_background.o(i.Strategy_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Strategy_focus &rArr; Strategy_focus_text
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stripe_vy
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus_text
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Turn_page
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Show
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Long_hit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Hit
</UL>

<P><STRONG><a name="[38b]"></a>Strategy_focus_text</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, hmi_striped_background.o(i.Strategy_focus_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Strategy_focus_text
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stripe_vy
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strategy_focus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SBG_Hit
</UL>

<P><STRONG><a name="[2bc]"></a>CRV_Set_first_time</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, hmi_curve.o(i.CRV_Set_first_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CRV_Set_first_time &rArr; Get_winHmi &rArr; winHmi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_2_tm
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_winHmi
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_HitHandle
</UL>

<P><STRONG><a name="[e7]"></a>CRV_Win_cmd</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, hmi_curve.o(i.CRV_Win_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CRV_Win_cmd &rArr; Get_str_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_2_u32
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.CRV_Set_first_time)
</UL>
<P><STRONG><a name="[1af]"></a>HMI_CRV_Build_cmp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, hmi_curve.o(i.HMI_CRV_Build_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HMI_CRV_Build_cmp &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Num_rcds
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
</UL>
<P><STRONG><a name="[1b0]"></a>HMI_CRV_HST_Run</STRONG> (Thumb, 798 bytes, Stack size 136 bytes, hmi_curve.o(i.HMI_CRV_HST_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HMI_CRV_HST_Run &rArr; STG_Read_data_by_time &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_2_tm
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_data_by_time
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cal_prc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Time_step
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Num_rcds
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RT_trendHmi_InitSheet)
</UL>
<P><STRONG><a name="[1aa]"></a>HMI_CRV_RTV_Run</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, hmi_curve.o(i.HMI_CRV_RTV_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HMI_CRV_RTV_Run &rArr; Create_model &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
<LI> hmi_curve.o(i.RT_trendHmi_InitSheet)
</UL>
<P><STRONG><a name="[397]"></a>HST_Flex</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hmi_curve.o(i.HST_Flex))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_midv_change
</UL>

<P><STRONG><a name="[415]"></a>HST_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hmi_curve.o(i.HST_Init))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_Init_curve
</UL>

<P><STRONG><a name="[396]"></a>HST_Move</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hmi_curve.o(i.HST_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HST_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Num_rcds
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_btn_hdl
</UL>

<P><STRONG><a name="[385]"></a>HST_Num_rcds</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hmi_curve.o(i.HST_Num_rcds))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_midv_change
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Move
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_Build_cmp
</UL>

<P><STRONG><a name="[386]"></a>HST_Time_step</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hmi_curve.o(i.HST_Time_step))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_CRV_HST_Run
</UL>

<P><STRONG><a name="[11]"></a>HST_midv_change</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hmi_curve.o(i.HST_midv_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HST_midv_change &rArr; CRV_Get_Sington &rArr; Curve_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Num_rcds
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Flex
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(.data)
</UL>
<P><STRONG><a name="[1a6]"></a>Init_RT_trendHMI</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, hmi_curve.o(i.Init_RT_trendHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Init_RT_trendHMI &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
</UL>
<P><STRONG><a name="[413]"></a>RLTHmi_Init_chnSht</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hmi_curve.o(i.RLTHmi_Init_chnSht))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RLTHmi_Init_chnSht &rArr; ExpCreate &rArr; GetPictExpr &rArr; PicExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_InitSheet
</UL>

<P><STRONG><a name="[414]"></a>RLT_Init_curve</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hmi_curve.o(i.RLT_Init_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RLT_Init_curve
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT_trendHmi_InitSheet
</UL>

<P><STRONG><a name="[130]"></a>RLT_btn_hdl</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hmi_curve.o(i.RLT_btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RLT_btn_hdl &rArr; HST_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HST_Move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.HMI_CRV_HST_Run)
</UL>
<P><STRONG><a name="[1ac]"></a>RLT_clear_focus</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hmi_curve.o(i.RLT_clear_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RLT_clear_focus &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Get_sht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
</UL>
<P><STRONG><a name="[1ab]"></a>RLT_init_focus</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hmi_curve.o(i.RLT_init_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RLT_init_focus &rArr; Focus_alloc &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_alloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Set_sht
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Set_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
</UL>
<P><STRONG><a name="[1ad]"></a>RLT_show_focus</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hmi_curve.o(i.RLT_show_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RLT_show_focus &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Get_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
</UL>
<P><STRONG><a name="[10]"></a>RTV_midv_change</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, hmi_curve.o(i.RTV_midv_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTV_midv_change &rArr; CRV_Get_Sington &rArr; Curve_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(.data)
</UL>
<P><STRONG><a name="[1a8]"></a>RT_trendHmi_HideSheet</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hmi_curve.o(i.RT_trendHmi_HideSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RT_trendHmi_HideSheet &rArr; Sheet_free &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
</UL>
<P><STRONG><a name="[1ae]"></a>RT_trendHmi_HitHandle</STRONG> (Thumb, 824 bytes, Stack size 56 bytes, hmi_curve.o(i.RT_trendHmi_HitHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RT_trendHmi_HitHandle &rArr; Str_Calculations &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Calculations
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_first_time
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_right
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_left
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Get_focus
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
</UL>
<P><STRONG><a name="[1a7]"></a>RT_trendHmi_InitSheet</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, hmi_curve.o(i.RT_trendHmi_InitSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RT_trendHmi_InitSheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLT_Init_curve
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLTHmi_Init_chnSht
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
</UL>
<P><STRONG><a name="[1a9]"></a>RT_trendHmi_Show</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hmi_curve.o(i.RT_trendHmi_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RT_trendHmi_Show &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_curve.o(i.RLT_trendHMI_ctor)
</UL>
<P><STRONG><a name="[ef]"></a>CRV_Add_point</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, component_curve.o(i.CRV_Add_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CRV_Add_point &rArr; CRV_Deal_full &rArr; CRV_Set_dirty &rArr; Check_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_dirty
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_val_y
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Deal_full
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_curve.o(i.Curve_ctor)
</UL>
<P><STRONG><a name="[ec]"></a>CRV_Alloc</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, component_curve.o(i.CRV_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CRV_Alloc &rArr; Set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_bit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Copy_att
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Alloc_bkg_id
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_curve.o(i.Curve_ctor)
</UL>
<P><STRONG><a name="[2b0]"></a>CRV_Alloc_bkg_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, component_curve.o(i.CRV_Alloc_bkg_id))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Alloc
</UL>

<P><STRONG><a name="[2b1]"></a>CRV_Clean_bkg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, component_curve.o(i.CRV_Clean_bkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CRV_Clean_bkg &rArr; CRV_Set_dirty &rArr; Check_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Show_curve
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Exc_display
</UL>

<P><STRONG><a name="[2af]"></a>CRV_Copy_att</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, component_curve.o(i.CRV_Copy_att))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Alloc
</UL>

<P><STRONG><a name="[f0]"></a>CRV_Ctl</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, component_curve.o(i.CRV_Ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CRV_Ctl &rArr; CRV_Set_dirty &rArr; Check_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_dirty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_curve.o(i.Curve_ctor)
</UL>
<P><STRONG><a name="[2c2]"></a>CRV_Cut_expand_tail</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, component_curve.o(i.CRV_Cut_expand_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CRV_Cut_expand_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Zoom_in
</UL>

<P><STRONG><a name="[f3]"></a>CRV_Data_flex</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, component_curve.o(i.CRV_Data_flex))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CRV_Data_flex &rArr; CRV_Zoom_out &rArr; CRV_smp &rArr; CRV_Move_start_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Zoom_out
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Zoom_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_curve.o(i.Curve_ctor)
</UL>
<P><STRONG><a name="[2ac]"></a>CRV_Deal_full</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, component_curve.o(i.CRV_Deal_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CRV_Deal_full &rArr; CRV_Set_dirty &rArr; Check_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Add_point
</UL>

<P><STRONG><a name="[2b4]"></a>CRV_Draw_left_to_right</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, component_curve.o(i.CRV_Draw_left_to_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CRV_Draw_left_to_right &rArr; CRV_Rle &rArr; CRV_Get_val_y
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Rle
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Move_start_idx
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_val_y
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Exc_display
</UL>

<P><STRONG><a name="[2b8]"></a>CRV_Draw_right_to_left</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, component_curve.o(i.CRV_Draw_right_to_left))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Exc_display
</UL>

<P><STRONG><a name="[2b7]"></a>CRV_Exc_display</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, component_curve.o(i.CRV_Exc_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CRV_Exc_display &rArr; CRV_Draw_left_to_right &rArr; CRV_Rle &rArr; CRV_Get_val_y
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_val_y
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Draw_right_to_left
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Draw_left_to_right
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Clean_bkg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Show_curve
</UL>

<P><STRONG><a name="[ed]"></a>CRV_Free</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, component_curve.o(i.CRV_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CRV_Free &rArr; Set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_curve.o(i.Curve_ctor)
</UL>
<P><STRONG><a name="[2ad]"></a>CRV_Get_val_y</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, component_curve.o(i.CRV_Get_val_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRV_Get_val_y
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Rle
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Exc_display
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Draw_left_to_right
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Add_point
</UL>

<P><STRONG><a name="[eb]"></a>CRV_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, component_curve.o(i.CRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CRV_Init &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_curve.o(i.Curve_ctor)
</UL>
<P><STRONG><a name="[2b5]"></a>CRV_Move_start_idx</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, component_curve.o(i.CRV_Move_start_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRV_Move_start_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_smp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Zoom_out
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Zoom_in
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Draw_left_to_right
</UL>

<P><STRONG><a name="[ee]"></a>CRV_Reset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, component_curve.o(i.CRV_Reset))
<BR>[Address Reference Count : 1]<UL><LI> component_curve.o(i.Curve_ctor)
</UL>
<P><STRONG><a name="[2b6]"></a>CRV_Rle</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, component_curve.o(i.CRV_Rle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CRV_Rle &rArr; CRV_Get_val_y
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Get_val_y
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Draw_left_to_right
</UL>

<P><STRONG><a name="[2ae]"></a>CRV_Set_dirty</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, component_curve.o(i.CRV_Set_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CRV_Set_dirty &rArr; Check_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Show_curve
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Deal_full
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Ctl
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Clean_bkg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Add_point
</UL>

<P><STRONG><a name="[f1]"></a>CRV_Show_bkg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, component_curve.o(i.CRV_Show_bkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRV_Show_bkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_curve.o(i.Curve_ctor)
</UL>
<P><STRONG><a name="[f2]"></a>CRV_Show_curve</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, component_curve.o(i.CRV_Show_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CRV_Show_curve &rArr; CRV_Exc_display &rArr; CRV_Draw_left_to_right &rArr; CRV_Rle &rArr; CRV_Get_val_y
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Set_dirty
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Exc_display
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Clean_bkg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_curve.o(i.Curve_ctor)
</UL>
<P><STRONG><a name="[2b2]"></a>CRV_Zoom_in</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, component_curve.o(i.CRV_Zoom_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CRV_Zoom_in &rArr; CRV_Cut_expand_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Move_start_idx
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Cut_expand_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Data_flex
</UL>

<P><STRONG><a name="[2b3]"></a>CRV_Zoom_out</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, component_curve.o(i.CRV_Zoom_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CRV_Zoom_out &rArr; CRV_smp &rArr; CRV_Move_start_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_smp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Move_start_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Data_flex
</UL>

<P><STRONG><a name="[2c3]"></a>CRV_smp</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, component_curve.o(i.CRV_smp))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CRV_smp &rArr; CRV_Move_start_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Move_start_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRV_Zoom_out
</UL>

<P><STRONG><a name="[e3]"></a>TIP_Clear_ico_tips</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, component_tips.o(i.TIP_Clear_ico_tips))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIP_Clear_ico_tips &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_bit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_tips.o(i.CMP_tips_ctor)
</UL>
<P><STRONG><a name="[e4]"></a>TIP_Hide_ico_tips</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, component_tips.o(i.TIP_Hide_ico_tips))
<BR>[Address Reference Count : 1]<UL><LI> component_tips.o(i.CMP_tips_ctor)
</UL>
<P><STRONG><a name="[e1]"></a>TIP_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, component_tips.o(i.TIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TIP_Init &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_tips.o(i.CMP_tips_ctor)
</UL>
<P><STRONG><a name="[e2]"></a>TIP_Show_ico_tips</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, component_tips.o(i.TIP_Show_ico_tips))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIP_Show_ico_tips &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_tips.o(i.CMP_tips_ctor)
</UL>
<P><STRONG><a name="[e5]"></a>TIP_Show_tips</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, component_tips.o(i.TIP_Show_tips))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIP_Show_tips &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> component_tips.o(i.CMP_tips_ctor)
</UL>
<P><STRONG><a name="[d7]"></a>Accm_HMI_hide</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hmi_accumulate .o(i.Accm_HMI_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Accm_HMI_hide &rArr; Sheet_free &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_accumulate .o(i.Accm_HMI_ctor)
</UL>
<P><STRONG><a name="[d9]"></a>Accm_HMI_hitHandle</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, hmi_accumulate .o(i.Accm_HMI_hitHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Accm_HMI_hitHandle &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Get_subcnt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_right
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_left
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Get_focus
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_accumulate .o(i.Accm_HMI_ctor)
</UL>
<P><STRONG><a name="[da]"></a>Accm_HMI_init_focus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_accumulate .o(i.Accm_HMI_init_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Accm_HMI_init_focus &rArr; Focus_alloc &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_alloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Set_sht
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Set_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_accumulate .o(i.Accm_HMI_ctor)
</UL>
<P><STRONG><a name="[450]"></a>Accm_show_info</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, hmi_accumulate .o(i.Accm_show_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Accm_show_info
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Accm_HMI
</UL>

<P><STRONG><a name="[d6]"></a>Alarm_initSheet</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, hmi_accumulate .o(i.Alarm_initSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Alarm_initSheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Get_subcnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatSheetSub
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_accumulate .o(i.Accm_HMI_ctor)
</UL>
<P><STRONG><a name="[d5]"></a>Init_Accm_HMI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hmi_accumulate .o(i.Init_Accm_HMI))
<BR>[Address Reference Count : 1]<UL><LI> hmi_accumulate .o(i.Accm_HMI_ctor)
</UL>
<P><STRONG><a name="[d8]"></a>Show_Accm_HMI</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hmi_accumulate .o(i.Show_Accm_HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Show_Accm_HMI &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accm_show_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_accumulate .o(i.Accm_HMI_ctor)
</UL>
<P><STRONG><a name="[26b]"></a>BarHmi_Data_update</STRONG> (Thumb, 494 bytes, Stack size 56 bytes, hmi_bargraph.o(i.BarHmi_Data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BarHmi_Data_update &rArr; Get_barGhHMI &rArr; HMI_bar_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_barGhHMI
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HBR_Update_mdl_chn_data
</UL>

<P><STRONG><a name="[135]"></a>BarHmi_HideSheet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hmi_bargraph.o(i.BarHmi_HideSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BarHmi_HideSheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_detach_model_chn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_bargraph.o(i.HMI_bar_ctor)
</UL>
<P><STRONG><a name="[134]"></a>BarHmi_InitSheet</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, hmi_bargraph.o(i.BarHmi_InitSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BarHmi_InitSheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Attach_model_chn
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Init_chnSht
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_bargraph.o(i.HMI_bar_ctor)
</UL>
<P><STRONG><a name="[26f]"></a>BarHmi_Init_chnSht</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hmi_bargraph.o(i.BarHmi_Init_chnSht))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BarHmi_Init_chnSht &rArr; ExpCreate &rArr; GetPictExpr &rArr; PicExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_InitSheet
</UL>

<P><STRONG><a name="[136]"></a>BarHmi_Show</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hmi_bargraph.o(i.BarHmi_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BarHmi_Show &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_bargraph.o(i.HMI_bar_ctor)
</UL>
<P><STRONG><a name="[272]"></a>BarHmi_Util_update</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, hmi_bargraph.o(i.BarHmi_Util_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BarHmi_Util_update &rArr; Get_barGhHMI &rArr; HMI_bar_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_barGhHMI
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HBR_Update_mdl_chn_data
</UL>

<P><STRONG><a name="[139]"></a>HBR_Update_mdl_chn_data</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, hmi_bargraph.o(i.HBR_Update_mdl_chn_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HBR_Update_mdl_chn_data &rArr; BarHmi_Data_update &rArr; Get_barGhHMI &rArr; HMI_bar_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Util_update
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarHmi_Data_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_bargraph.o(i.HMI_bar_ctor)
</UL>
<P><STRONG><a name="[3a5]"></a>Init_bar</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hmi_bargraph.o(i.Init_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Init_bar &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_barGhHMI
</UL>

<P><STRONG><a name="[133]"></a>Init_barGhHMI</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hmi_bargraph.o(i.Init_barGhHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Init_barGhHMI &rArr; Init_bar &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_bar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_bargraph.o(i.HMI_bar_ctor)
</UL>
<P><STRONG><a name="[27b]"></a>Build_ChnSheets</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hmi_comm.o(i.Build_ChnSheets))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Build_ChnSheets &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_cmmHmi
</UL>

<P><STRONG><a name="[3a7]"></a>Build_icoSheets</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_comm.o(i.Build_icoSheets))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_cmmHmi
</UL>

<P><STRONG><a name="[27c]"></a>Build_otherSheets</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, hmi_comm.o(i.Build_otherSheets))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Build_otherSheets &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmmHMI
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_cmmHmi
</UL>

<P><STRONG><a name="[1d7]"></a>CMM_Update_time</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hmi_comm.o(i.CMM_Update_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CMM_Update_time &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_slide
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_is_hide
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_comm.o(i.cmmHmi_ctor)
</UL>
<P><STRONG><a name="[1d6]"></a>Init_cmmHmi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hmi_comm.o(i.Init_cmmHmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Init_cmmHmi &rArr; Build_otherSheets &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_otherSheets
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_icoSheets
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_ChnSheets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_comm.o(i.cmmHmi_ctor)
</UL>
<P><STRONG><a name="[309]"></a>DataHmi_Alarm_update</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, hmi_data.o(i.DataHmi_Alarm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DataHmi_Alarm_update &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDT_Update_mdl_chn_data
</UL>

<P><STRONG><a name="[30a]"></a>DataHmi_Data_update</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, hmi_data.o(i.DataHmi_Data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DataHmi_Data_update &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDT_Update_mdl_chn_data
</UL>

<P><STRONG><a name="[14d]"></a>DataHmi_HideSheet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hmi_data.o(i.DataHmi_HideSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DataHmi_HideSheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_detach_model_chn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_data.o(i.HMI_data_ctor)
</UL>
<P><STRONG><a name="[14f]"></a>DataHmi_HitHandle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hmi_data.o(i.DataHmi_HitHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DataHmi_HitHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_data.o(i.HMI_data_ctor)
</UL>
<P><STRONG><a name="[14c]"></a>DataHmi_InitSheet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hmi_data.o(i.DataHmi_InitSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DataHmi_InitSheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Attach_model_chn
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Init_chnSht
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_data.o(i.HMI_data_ctor)
</UL>
<P><STRONG><a name="[30b]"></a>DataHmi_Init_chnSht</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hmi_data.o(i.DataHmi_Init_chnSht))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DataHmi_Init_chnSht &rArr; ExpCreate &rArr; GetPictExpr &rArr; PicExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_InitSheet
</UL>

<P><STRONG><a name="[14e]"></a>DataHmi_Show</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, hmi_data.o(i.DataHmi_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DataHmi_Show &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_data.o(i.HMI_data_ctor)
</UL>
<P><STRONG><a name="[30c]"></a>DataHmi_Status_update</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, hmi_data.o(i.DataHmi_Status_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DataHmi_Status_update &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDT_Update_mdl_chn_data
</UL>

<P><STRONG><a name="[30d]"></a>DataHmi_Util_update</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, hmi_data.o(i.DataHmi_Util_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DataHmi_Util_update &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDT_Update_mdl_chn_data
</UL>

<P><STRONG><a name="[150]"></a>HDT_Update_mdl_chn_data</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, hmi_data.o(i.HDT_Update_mdl_chn_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HDT_Update_mdl_chn_data &rArr; DataHmi_Util_update &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Util_update
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Status_update
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Data_update
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataHmi_Alarm_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_data.o(i.HMI_data_ctor)
</UL>
<P><STRONG><a name="[14b]"></a>Init_dataHMI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hmi_data.o(i.Init_dataHMI))
<BR>[Address Reference Count : 1]<UL><LI> hmi_data.o(i.HMI_data_ctor)
</UL>
<P><STRONG><a name="[2c6]"></a>CleanFocus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hmi_keyboard.o(i.CleanFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CleanFocus
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardShow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardHitHandle
</UL>

<P><STRONG><a name="[30f]"></a>Default_input</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hmi_keyboard.o(i.Default_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Default_input
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardHitHandle
</UL>

<P><STRONG><a name="[324]"></a>DrawFocus</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hmi_keyboard.o(i.DrawFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrawFocus
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardShow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardHitHandle
</UL>

<P><STRONG><a name="[3b7]"></a>FocusKey_move</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hmi_keyboard.o(i.FocusKey_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FocusKey_move
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardHitHandle
</UL>

<P><STRONG><a name="[33c]"></a>GetVKeyVal</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hmi_keyboard.o(i.GetVKeyVal))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Edit_push
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK_Uppercase_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateUp
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateRight
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateLeft
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateDown
</UL>

<P><STRONG><a name="[1f2]"></a>Init_kbmHmi</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, hmi_keyboard.o(i.Init_kbmHmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Init_kbmHmi &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatSheetSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(i.keyboardHMI_ctor)
</UL>
<P><STRONG><a name="[1f5]"></a>KBHide</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hmi_keyboard.o(i.KBHide))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = KBHide &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(i.keyboardHMI_ctor)
</UL>
<P><STRONG><a name="[1f4]"></a>KBInitSheet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hmi_keyboard.o(i.KBInitSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = KBInitSheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Edit_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(i.keyboardHMI_ctor)
</UL>
<P><STRONG><a name="[1f9]"></a>KYB_Show_cmp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_keyboard.o(i.KYB_Show_cmp))
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(i.keyboardHMI_ctor)
</UL>
<P><STRONG><a name="[1f8]"></a>KeyboardDouHitHandle</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hmi_keyboard.o(i.KeyboardDouHitHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = KeyboardDouHitHandle &rArr; SwitchVirKey &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchVirKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(i.keyboardHMI_ctor)
</UL>
<P><STRONG><a name="[1f6]"></a>KeyboardHitHandle</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, hmi_keyboard.o(i.KeyboardHitHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = KeyboardHitHandle &rArr; SwitchVirKey &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Edit_push
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Edit_pop
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchVirKey
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FocusKey_move
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawFocus
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_input
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanFocus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(i.keyboardHMI_ctor)
</UL>
<P><STRONG><a name="[1f7]"></a>KeyboardLngpshHandle</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hmi_keyboard.o(i.KeyboardLngpshHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = KeyboardLngpshHandle &rArr; SwitchVirKey &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchVirKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(i.keyboardHMI_ctor)
</UL>
<P><STRONG><a name="[1f3]"></a>KeyboardShow</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, hmi_keyboard.o(i.KeyboardShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = KeyboardShow &rArr; SwitchVirKey &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchVirKey
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawFocus
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanFocus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(i.keyboardHMI_ctor)
</UL>
<P><STRONG><a name="[3b6]"></a>SwitchVirKey</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hmi_keyboard.o(i.SwitchVirKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SwitchVirKey &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardShow
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardLngpshHandle
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardHitHandle
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardDouHitHandle
</UL>

<P><STRONG><a name="[14]"></a>Upp_CalculateDown</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hmi_keyboard.o(i.Upp_CalculateDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Upp_CalculateDown &rArr; Upp_crdnInPic
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_crdnInPic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK_Uppercase_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Upp_CalculateLeft</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hmi_keyboard.o(i.Upp_CalculateLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Upp_CalculateLeft &rArr; Upp_crdnInPic
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_crdnInPic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK_Uppercase_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Upp_CalculateRight</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hmi_keyboard.o(i.Upp_CalculateRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Upp_CalculateRight &rArr; Upp_crdnInPic
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_crdnInPic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK_Uppercase_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Upp_CalculateUp</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hmi_keyboard.o(i.Upp_CalculateUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Upp_CalculateUp &rArr; Upp_crdnInPic
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_crdnInPic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK_Uppercase_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(.data)
</UL>
<P><STRONG><a name="[480]"></a>Upp_crdnInPic</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, hmi_keyboard.o(i.Upp_crdnInPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Upp_crdnInPic
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK_Uppercase_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateUp
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateRight
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateLeft
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateDown
</UL>

<P><STRONG><a name="[12]"></a>VK_Uppercase_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hmi_keyboard.o(i.VK_Uppercase_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VK_Uppercase_init &rArr; Upp_CalculateRight &rArr; Upp_crdnInPic
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VKeyClean
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_crdnInPic
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateUp
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateRight
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateLeft
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upp_CalculateDown
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVKeyVal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_keyboard.o(.data)
</UL>
<P><STRONG><a name="[483]"></a>VKeyClean</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hmi_keyboard.o(i.VKeyClean))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VK_Uppercase_init
</UL>

<P><STRONG><a name="[154]"></a>HMI_MAIN_Run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_main.o(i.HMI_MAIN_Run))
<BR>[Address Reference Count : 1]<UL><LI> hmi_main.o(i.HMI_main_ctor)
</UL>
<P><STRONG><a name="[392]"></a>HMN_Init_vram</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hmi_main.o(i.HMN_Init_vram))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HMN_Init_vram &rArr; HMI_Ram_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaininitSheet
</UL>

<P><STRONG><a name="[156]"></a>HMN_Update_mdl_chn_data</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, hmi_main.o(i.HMN_Update_mdl_chn_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HMN_Update_mdl_chn_data &rArr; MainHmi_Util_update &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Util_update
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Data_update
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Alarm_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_main.o(i.HMI_main_ctor)
</UL>
<P><STRONG><a name="[151]"></a>Init_HMI_main</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmi_main.o(i.Init_HMI_main))
<BR>[Address Reference Count : 1]<UL><LI> hmi_main.o(i.HMI_main_ctor)
</UL>
<P><STRONG><a name="[152]"></a>MainHmiHide</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hmi_main.o(i.MainHmiHide))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MainHmiHide &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_detach_model_chn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_main.o(i.HMI_main_ctor)
</UL>
<P><STRONG><a name="[155]"></a>MainHmiShow</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, hmi_main.o(i.MainHmiShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MainHmiShow &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_main.o(i.HMI_main_ctor)
</UL>
<P><STRONG><a name="[395]"></a>MainHmi_Alarm_update</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, hmi_main.o(i.MainHmi_Alarm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MainHmi_Alarm_update &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMN_Update_mdl_chn_data
</UL>

<P><STRONG><a name="[393]"></a>MainHmi_Data_update</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, hmi_main.o(i.MainHmi_Data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MainHmi_Data_update &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMN_Update_mdl_chn_data
</UL>

<P><STRONG><a name="[3c8]"></a>MainHmi_Init_chnShet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hmi_main.o(i.MainHmi_Init_chnShet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MainHmi_Init_chnShet &rArr; ExpCreate &rArr; GetPictExpr &rArr; PicExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaininitSheet
</UL>

<P><STRONG><a name="[394]"></a>MainHmi_Util_update</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, hmi_main.o(i.MainHmi_Util_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MainHmi_Util_update &rArr; Sheet_force_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_force_slide
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMN_Update_mdl_chn_data
</UL>

<P><STRONG><a name="[153]"></a>MaininitSheet</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, hmi_main.o(i.MaininitSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MaininitSheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Attach_model_chn
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainHmi_Init_chnShet
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMN_Init_vram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_main.o(i.HMI_main_ctor)
</UL>
<P><STRONG><a name="[1fb]"></a>Init_menuHMI</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hmi_menu.o(i.Init_menuHMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Init_menuHMI &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_menu.o(i.menuHMI_ctor)
</UL>
<P><STRONG><a name="[200]"></a>MenuClearFocuse</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hmi_menu.o(i.MenuClearFocuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MenuClearFocuse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_menu.o(i.menuHMI_ctor)
</UL>
<P><STRONG><a name="[1ff]"></a>MenuHitHandle</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, hmi_menu.o(i.MenuHitHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MenuHitHandle &rArr; SwitchToHmi
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToHmi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_menu.o(i.menuHMI_ctor)
</UL>
<P><STRONG><a name="[1fc]"></a>MenuHmiHide</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_menu.o(i.MenuHmiHide))
<BR>[Address Reference Count : 1]<UL><LI> hmi_menu.o(i.menuHMI_ctor)
</UL>
<P><STRONG><a name="[1fe]"></a>MenuHmiShow</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hmi_menu.o(i.MenuHmiShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MenuHmiShow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_menu.o(i.menuHMI_ctor)
</UL>
<P><STRONG><a name="[201]"></a>MenuShowFocuse</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, hmi_menu.o(i.MenuShowFocuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuShowFocuse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_menu.o(i.menuHMI_ctor)
</UL>
<P><STRONG><a name="[1fd]"></a>MenuinitSheet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_menu.o(i.MenuinitSheet))
<BR>[Address Reference Count : 1]<UL><LI> hmi_menu.o(i.menuHMI_ctor)
</UL>
<P><STRONG><a name="[3e9]"></a>SwitchToHmi</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hmi_menu.o(i.SwitchToHmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SwitchToHmi
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuHitHandle
</UL>

<P><STRONG><a name="[18d]"></a>Init_Nws_HMI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hmi_news_select.o(i.Init_Nws_HMI))
<BR>[Address Reference Count : 1]<UL><LI> hmi_news_select.o(i.NewSlct_HMI_ctor)
</UL>
<P><STRONG><a name="[194]"></a>Nws_HMI_clear_focus</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hmi_news_select.o(i.Nws_HMI_clear_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Nws_HMI_clear_focus
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_news_select.o(i.NewSlct_HMI_ctor)
</UL>
<P><STRONG><a name="[18f]"></a>Nws_HMI_hide</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi_news_select.o(i.Nws_HMI_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Nws_HMI_hide &rArr; Focus_free
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_news_select.o(i.NewSlct_HMI_ctor)
</UL>
<P><STRONG><a name="[192]"></a>Nws_HMI_hitHandle</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, hmi_news_select.o(i.Nws_HMI_hitHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Nws_HMI_hitHandle &rArr; Create_HMI &rArr; GetmenuHMI &rArr; menuHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_up
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_news_select.o(i.NewSlct_HMI_ctor)
</UL>
<P><STRONG><a name="[193]"></a>Nws_HMI_init_focus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hmi_news_select.o(i.Nws_HMI_init_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Nws_HMI_init_focus &rArr; Focus_alloc &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_alloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Set_sht
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Set_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_news_select.o(i.NewSlct_HMI_ctor)
</UL>
<P><STRONG><a name="[195]"></a>Nws_HMI_show_focus</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hmi_news_select.o(i.Nws_HMI_show_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Nws_HMI_show_focus
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_news_select.o(i.NewSlct_HMI_ctor)
</UL>
<P><STRONG><a name="[18e]"></a>Nws_initSheet</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hmi_news_select.o(i.Nws_initSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Nws_initSheet &rArr; ExpCreate &rArr; GetPictExpr &rArr; PicExpr_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_news_select.o(i.NewSlct_HMI_ctor)
</UL>
<P><STRONG><a name="[190]"></a>Show_Nws_HMI</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hmi_news_select.o(i.Show_Nws_HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Show_Nws_HMI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_news_select.o(i.NewSlct_HMI_ctor)
</UL>
<P><STRONG><a name="[1b4]"></a>Init_Setup_HMI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmi_setup.o(i.Init_Setup_HMI))
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Setup_HMI_ctor)
</UL>
<P><STRONG><a name="[3b4]"></a>Input_Password</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hmi_setup.o(i.Input_Password))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Input_Password &rArr; Get_winHmi &rArr; winHmi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_winHmi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_hitHandle
</UL>

<P><STRONG><a name="[1b9]"></a>STP_Compose_hit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hmi_setup.o(i.STP_Compose_hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STP_Compose_hit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Setup_HMI_ctor)
</UL>
<P><STRONG><a name="[1bb]"></a>Setup_HMI_clear_focus</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, hmi_setup.o(i.Setup_HMI_clear_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Setup_HMI_clear_focus &rArr; Sheet_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_slide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Setup_HMI_ctor)
</UL>
<P><STRONG><a name="[164]"></a>Setup_HMI_cmd</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, hmi_setup.o(i.Setup_HMI_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Setup_HMI_cmd &rArr; Str_Password_match &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Password_match
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_unlock
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_lock
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Input_Password)
</UL>
<P><STRONG><a name="[1b6]"></a>Setup_HMI_hide</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hmi_setup.o(i.Setup_HMI_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Setup_HMI_hide &rArr; Sheet_free &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Setup_HMI_ctor)
</UL>
<P><STRONG><a name="[1b8]"></a>Setup_HMI_hitHandle</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, hmi_setup.o(i.Setup_HMI_hitHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Setup_HMI_hitHandle &rArr; Create_HMI &rArr; GetmenuHMI &rArr; menuHMI_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_HMI
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_up
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_right
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_left
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_move_down
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Get_focus
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Password
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Setup_HMI_ctor)
</UL>
<P><STRONG><a name="[1ba]"></a>Setup_HMI_init_focus</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hmi_setup.o(i.Setup_HMI_init_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Setup_HMI_init_focus &rArr; Focus_alloc &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_alloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Set_sht
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Focus_Set_focus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Setup_HMI_ctor)
</UL>
<P><STRONG><a name="[44d]"></a>Setup_HMI_lock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hmi_setup.o(i.Setup_HMI_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Setup_HMI_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_cmd
</UL>

<P><STRONG><a name="[1bc]"></a>Setup_HMI_show_focus</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, hmi_setup.o(i.Setup_HMI_show_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Setup_HMI_show_focus &rArr; Sheet_slide &rArr; Sheet_refreshsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_slide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Setup_HMI_ctor)
</UL>
<P><STRONG><a name="[44c]"></a>Setup_HMI_unlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hmi_setup.o(i.Setup_HMI_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Setup_HMI_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_initSheet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_cmd
</UL>

<P><STRONG><a name="[1b5]"></a>Setup_initSheet</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, hmi_setup.o(i.Setup_initSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Setup_initSheet &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_sys_param
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_unlock
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_HMI_lock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Setup_HMI_ctor)
</UL>
<P><STRONG><a name="[1b7]"></a>Show_Setup_HMI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hmi_setup.o(i.Show_Setup_HMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Show_Setup_HMI &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_setup.o(i.Setup_HMI_ctor)
</UL>
<P><STRONG><a name="[21d]"></a>Init_winHmi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmi_windowns.o(i.Init_winHmi))
<BR>[Address Reference Count : 1]<UL><LI> hmi_windowns.o(i.winHmi_ctor)
</UL>
<P><STRONG><a name="[4ec]"></a>MUS_focuse</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_windowns.o(i.MUS_focuse))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ShowFocuse
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ClearFocuse
</UL>

<P><STRONG><a name="[4eb]"></a>MUS_hide</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_windowns.o(i.MUS_hide))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmiHide
</UL>

<P><STRONG><a name="[49a]"></a>MUS_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_windowns.o(i.MUS_init))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_initSheet
</UL>

<P><STRONG><a name="[400]"></a>Password_focuse</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hmi_windowns.o(i.Password_focuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Password_focuse &rArr; Timeset_focuse
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_focuse
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ShowFocuse
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ClearFocuse
</UL>

<P><STRONG><a name="[402]"></a>Password_hide</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hmi_windowns.o(i.Password_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Password_hide &rArr; Timeset_hide &rArr; Sheet_free &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_hide
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmiHide
</UL>

<P><STRONG><a name="[404]"></a>Password_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmi_windowns.o(i.Password_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Password_init &rArr; Timeset_init &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_initSheet
</UL>

<P><STRONG><a name="[40e]"></a>PopUp_focuse</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hmi_windowns.o(i.PopUp_focuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PopUp_focuse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ShowFocuse
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ClearFocuse
</UL>

<P><STRONG><a name="[40f]"></a>Popup_hide</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hmi_windowns.o(i.Popup_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Popup_hide &rArr; Sheet_free &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmiHide
</UL>

<P><STRONG><a name="[410]"></a>Popup_init</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, hmi_windowns.o(i.Popup_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Popup_init &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_initSheet
</UL>

<P><STRONG><a name="[401]"></a>Timeset_focuse</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, hmi_windowns.o(i.Timeset_focuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timeset_focuse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ShowFocuse
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmi_ClearFocuse
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_focuse
</UL>

<P><STRONG><a name="[403]"></a>Timeset_hide</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hmi_windowns.o(i.Timeset_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Timeset_hide &rArr; Sheet_free &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winHmiHide
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_hide
</UL>

<P><STRONG><a name="[405]"></a>Timeset_init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, hmi_windowns.o(i.Timeset_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Timeset_init &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpCreate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShtctl
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_updown
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_initSheet
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_init
</UL>

<P><STRONG><a name="[220]"></a>WIN_Show_cmp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_windowns.o(i.WIN_Show_cmp))
<BR>[Address Reference Count : 1]<UL><LI> hmi_windowns.o(i.winHmi_ctor)
</UL>
<P><STRONG><a name="[222]"></a>WinHmi_hit</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, hmi_windowns.o(i.WinHmi_hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WinHmi_hit &rArr; Win_CUR_move &rArr; Password_modify &rArr; Str_Calculations &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_CUR_move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_windowns.o(i.winHmi_ctor)
</UL>
<P><STRONG><a name="[497]"></a>Win_CUR_move</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, hmi_windowns.o(i.Win_CUR_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Win_CUR_move &rArr; Password_modify &rArr; Str_Calculations &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_modify
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_iteartor
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_text_modify
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlTime_text_iteartor
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WinHmi_hit
</UL>

<P><STRONG><a name="[21f]"></a>Win_initSheet</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hmi_windowns.o(i.Win_initSheet))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Win_initSheet &rArr; Password_init &rArr; Timeset_init &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Popup_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_init
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUS_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_windowns.o(i.winHmi_ctor)
</UL>
<P><STRONG><a name="[21e]"></a>winHmiHide</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hmi_windowns.o(i.winHmiHide))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = winHmiHide &rArr; Password_hide &rArr; Timeset_hide &rArr; Sheet_free &rArr; Sheet_updown &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_hide
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Popup_hide
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_hide
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUS_hide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_windowns.o(i.winHmi_ctor)
</UL>
<P><STRONG><a name="[221]"></a>winHmiShow</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hmi_windowns.o(i.winHmiShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = winHmiShow &rArr; Sheet_refresh &rArr; GetShtctl &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sheet_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_windowns.o(i.winHmi_ctor)
</UL>
<P><STRONG><a name="[224]"></a>winHmi_ClearFocuse</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hmi_windowns.o(i.winHmi_ClearFocuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = winHmi_ClearFocuse &rArr; Password_focuse &rArr; Timeset_focuse
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_focuse
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopUp_focuse
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_focuse
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUS_focuse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_windowns.o(i.winHmi_ctor)
</UL>
<P><STRONG><a name="[223]"></a>winHmi_InitFouse</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hmi_windowns.o(i.winHmi_InitFouse))
<BR>[Address Reference Count : 1]<UL><LI> hmi_windowns.o(i.winHmi_ctor)
</UL>
<P><STRONG><a name="[225]"></a>winHmi_ShowFocuse</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, hmi_windowns.o(i.winHmi_ShowFocuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = winHmi_ShowFocuse &rArr; Password_focuse &rArr; Timeset_focuse
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timeset_focuse
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopUp_focuse
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_focuse
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUS_focuse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmi_windowns.o(i.winHmi_ctor)
</UL>
<P><STRONG><a name="[19]"></a>SAD_Build_component</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stg_acc_day.o(i.SAD_Build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SAD_Build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>SAD_Commit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_acc_day.o(i.SAD_Commit))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>SAD_Entry</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, stg_acc_day.o(i.SAD_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SAD_Entry &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Print_acc_val
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>SAD_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stg_acc_day.o(i.SAD_Exit))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>SAD_Get_focus_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_acc_day.o(i.SAD_Get_focus_data))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>SAD_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stg_acc_day.o(i.SAD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAD_Init &rArr; HMI_Ram_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>SAD_Key_DN</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stg_acc_day.o(i.SAD_Key_DN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAD_Key_DN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>SAD_Key_ET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_acc_day.o(i.SAD_Key_ET))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>SAD_Key_LT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_acc_day.o(i.SAD_Key_LT))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>SAD_Key_RT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_acc_day.o(i.SAD_Key_RT))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>SAD_Key_UP</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stg_acc_day.o(i.SAD_Key_UP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAD_Key_UP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_day.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>SAM_Build_component</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stg_acc_month.o(i.SAM_Build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SAM_Build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>SAM_Commit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_acc_month.o(i.SAM_Commit))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>SAM_Entry</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, stg_acc_month.o(i.SAM_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SAM_Entry &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Print_ACC
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>SAM_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stg_acc_month.o(i.SAM_Exit))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>SAM_Get_focus_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_acc_month.o(i.SAM_Get_focus_data))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>SAM_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stg_acc_month.o(i.SAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAM_Init &rArr; HMI_Ram_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>SAM_Key_DN</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stg_acc_month.o(i.SAM_Key_DN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAM_Key_DN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>SAM_Key_ET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_acc_month.o(i.SAM_Key_ET))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>SAM_Key_LT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_acc_month.o(i.SAM_Key_LT))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>SAM_Key_RT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_acc_month.o(i.SAM_Key_RT))
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>SAM_Key_UP</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stg_acc_month.o(i.SAM_Key_UP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAM_Key_UP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_acc_month.o(.data)
</UL>
<P><STRONG><a name="[423]"></a>SAM_Print_ACC</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stg_acc_month.o(i.SAM_Print_ACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SAM_Print_ACC &rArr; CNA_Print_acc_val
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Print_acc_val
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Entry
</UL>

<P><STRONG><a name="[18b]"></a>NLM_Btn_hdl</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stg_news_alarm.o(i.NLM_Btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NLM_Btn_hdl &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(i.NLM_Build_component)
</UL>
<P><STRONG><a name="[2f]"></a>NLM_Build_component</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stg_news_alarm.o(i.NLM_Build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NLM_Build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>NLM_Commit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stg_news_alarm.o(i.NLM_Commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = NLM_Commit &rArr; LOG_Add &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_alm_pwr_num
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Erase_file
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Clean_Alamr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>NLM_Entry</STRONG> (Thumb, 522 bytes, Stack size 96 bytes, stg_news_alarm.o(i.NLM_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = NLM_Entry &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_2_tm
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>NLM_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stg_news_alarm.o(i.NLM_Exit))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>NLM_Get_focus_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_news_alarm.o(i.NLM_Get_focus_data))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>NLM_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stg_news_alarm.o(i.NLM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NLM_Init &rArr; HMI_Ram_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>NLM_Key_DN</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stg_news_alarm.o(i.NLM_Key_DN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NLM_Key_DN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>NLM_Key_ET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_news_alarm.o(i.NLM_Key_ET))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>NLM_Key_LT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_news_alarm.o(i.NLM_Key_LT))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>NLM_Key_RT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_news_alarm.o(i.NLM_Key_RT))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>NLM_Key_UP</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stg_news_alarm.o(i.NLM_Key_UP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NLM_Key_UP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_alarm.o(.data)
</UL>
<P><STRONG><a name="[18c]"></a>NPW_Btn_hdl</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stg_news_power.o(i.NPW_Btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NPW_Btn_hdl &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(i.NPW_Build_component)
</UL>
<P><STRONG><a name="[3a]"></a>NPW_Build_component</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stg_news_power.o(i.NPW_Build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NPW_Build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>NPW_Commit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stg_news_power.o(i.NPW_Commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = NPW_Commit &rArr; LOG_Add &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_alm_pwr_num
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Erase_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>NPW_Entry</STRONG> (Thumb, 362 bytes, Stack size 88 bytes, stg_news_power.o(i.NPW_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = NPW_Entry &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_2_tm
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>NPW_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stg_news_power.o(i.NPW_Exit))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>NPW_Get_focus_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_news_power.o(i.NPW_Get_focus_data))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>NPW_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stg_news_power.o(i.NPW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NPW_Init &rArr; HMI_Ram_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>NPW_Key_DN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_news_power.o(i.NPW_Key_DN))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>NPW_Key_ET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_news_power.o(i.NPW_Key_ET))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>NPW_Key_LT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_news_power.o(i.NPW_Key_LT))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>NPW_Key_RT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_news_power.o(i.NPW_Key_RT))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>NPW_Key_UP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stg_news_power.o(i.NPW_Key_UP))
<BR>[Address Reference Count : 1]<UL><LI> stg_news_power.o(.data)
</UL>
<P><STRONG><a name="[1b2]"></a>SSA_Btn_hdl</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stg_set_accumulate.o(i.SSA_Btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SSA_Btn_hdl &rArr; CNA_Commit &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Commit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(i.SSA_Build_component)
</UL>
<P><STRONG><a name="[45]"></a>SSA_Build_component</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stg_set_accumulate.o(i.SSA_Build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SSA_Build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>SSA_Commit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stg_set_accumulate.o(i.SSA_Commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SSA_Commit &rArr; CNA_Clear &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Commit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>SSA_Entry</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, stg_set_accumulate.o(i.SSA_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SSA_Entry &rArr; CNA_Print_enable &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Print_enable
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>SSA_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stg_set_accumulate.o(i.SSA_Exit))
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>SSA_Get_focus_data</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stg_set_accumulate.o(i.SSA_Get_focus_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSA_Get_focus_data
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>SSA_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stg_set_accumulate.o(i.SSA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSA_Init &rArr; HMI_Ram_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>SSA_Key_DN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stg_set_accumulate.o(i.SSA_Key_DN))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSA_Key_DN &rArr; SSA_update_content &rArr; CNA_Print_enable &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>SSA_Key_ET</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stg_set_accumulate.o(i.SSA_Key_ET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSA_Key_ET
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>SSA_Key_LT</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stg_set_accumulate.o(i.SSA_Key_LT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSA_Key_LT
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>SSA_Key_RT</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stg_set_accumulate.o(i.SSA_Key_RT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSA_Key_RT
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>SSA_Key_UP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stg_set_accumulate.o(i.SSA_Key_UP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSA_Key_UP &rArr; SSA_update_content &rArr; CNA_Print_enable &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_accumulate.o(.data)
</UL>
<P><STRONG><a name="[42a]"></a>SSA_update_content</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, stg_set_accumulate.o(i.SSA_update_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SSA_update_content &rArr; CNA_Print_enable &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Print_enable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Key_DN
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSA_Key_UP
</UL>

<P><STRONG><a name="[d4]"></a>ALS_Btn_hdl</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stg_set_alarm.o(i.ALS_Btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ALS_Btn_hdl &rArr; MdlChn_Commit_conf &rArr; STG_Resize &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(i.ALS_build_component)
</UL>
<P><STRONG><a name="[58]"></a>ALS_Exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stg_set_alarm.o(i.ALS_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ALS_Exit &rArr; ALS_Set_mdl_tmp_alarm &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALS_Set_mdl_tmp_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[24a]"></a>ALS_Set_mdl_tmp_alarm</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stg_set_alarm.o(i.ALS_Set_mdl_tmp_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ALS_Set_mdl_tmp_alarm &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCH_Set_alarm_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALS_Exit
</UL>

<P><STRONG><a name="[50]"></a>ALS_build_component</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stg_set_alarm.o(i.ALS_build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ALS_build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>ALS_commit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_set_alarm.o(i.ALS_commit))
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>Als_entry</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, stg_set_alarm.o(i.Als_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Als_entry &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_row_aux
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>Als_get_focusdata</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stg_set_alarm.o(i.Als_get_focusdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Als_get_focusdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>Als_init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stg_set_alarm.o(i.Als_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Als_init &rArr; ALS_Set_mdl_tmp_alarm &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALS_Set_mdl_tmp_alarm
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>Als_key_dn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stg_set_alarm.o(i.Als_key_dn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Als_key_dn &rArr; Als_modify &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_modify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>Als_key_er</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_set_alarm.o(i.Als_key_er))
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>Als_key_lt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stg_set_alarm.o(i.Als_key_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Als_key_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>Als_key_rt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stg_set_alarm.o(i.Als_key_rt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Als_key_rt
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>Als_key_up</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stg_set_alarm.o(i.Als_key_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Als_key_up &rArr; Als_modify &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_modify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_alarm.o(.data)
</UL>
<P><STRONG><a name="[266]"></a>Als_modify</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, stg_set_alarm.o(i.Als_modify))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Als_modify &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_row_aux
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_key_up
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_key_dn
</UL>

<P><STRONG><a name="[265]"></a>Als_row_aux</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stg_set_alarm.o(i.Als_row_aux))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_modify
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Als_entry
</UL>

<P><STRONG><a name="[e6]"></a>CNS_Btn_hdl</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stg_set_channel.o(i.CNS_Btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CNS_Btn_hdl &rArr; MdlChn_Commit_conf &rArr; STG_Resize &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(i.CNS_build_component)
</UL>
<P><STRONG><a name="[63]"></a>CNS_Exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stg_set_channel.o(i.CNS_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CNS_Exit &rArr; CNS_Set_mdl_tmp_buf &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_Set_mdl_tmp_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[2a5]"></a>CNS_Set_mdl_tmp_buf</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stg_set_channel.o(i.CNS_Set_mdl_tmp_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CNS_Set_mdl_tmp_buf &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCH_Set_info_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_Exit
</UL>

<P><STRONG><a name="[5b]"></a>CNS_build_component</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stg_set_channel.o(i.CNS_build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CNS_build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>CNS_commit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stg_set_channel.o(i.CNS_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CNS_commit &rArr; LOG_Add &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Erase_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>ChnStrategy_entry</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, stg_set_channel.o(i.ChnStrategy_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ChnStrategy_entry &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_len
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>Cns_get_focusdata</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stg_set_channel.o(i.Cns_get_focusdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cns_get_focusdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>Cns_init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stg_set_channel.o(i.Cns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Cns_init &rArr; CNS_Set_mdl_tmp_buf &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNS_Set_mdl_tmp_buf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>Cns_key_dn</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stg_set_channel.o(i.Cns_key_dn))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Cns_key_dn &rArr; Cns_update_content &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>Cns_key_er</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stg_set_channel.o(i.Cns_key_er))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cns_key_er
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>Cns_key_lt</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stg_set_channel.o(i.Cns_key_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cns_key_lt &rArr; Operate_in_tange
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>Cns_key_rt</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stg_set_channel.o(i.Cns_key_rt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cns_key_rt &rArr; Operate_in_tange
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>Cns_key_up</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stg_set_channel.o(i.Cns_key_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Cns_key_up &rArr; Cns_update_content &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_channel.o(.data)
</UL>
<P><STRONG><a name="[2d0]"></a>Cns_update_content</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, stg_set_channel.o(i.Cns_update_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cns_update_content &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_len
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_key_up
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_key_dn
</UL>

<P><STRONG><a name="[2c5]"></a>Cns_update_len</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stg_set_channel.o(i.Cns_update_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cns_update_len
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_update_content
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_key_rt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cns_key_lt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnStrategy_entry
</UL>

<P><STRONG><a name="[f5]"></a>DBP_Btn_hdl</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stg_set_databackup.o(i.DBP_Btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DBP_Btn_hdl &rArr; Cmd_Rgt_recv &rArr; Clear_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(i.DBP_build_component)
</UL>
<P><STRONG><a name="[f4]"></a>DBP_Copy</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, stg_set_databackup.o(i.DBP_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = DBP_Copy &rArr; DBP_Copy_chn_alarm &rArr; STG_Read_alm_pwr &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_del_recv
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Set_read_position
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write_file
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Create_file
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Colse_file
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_lost_power
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_log
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_data
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy_chn_alarm
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(i.DBP_Btn_hdl)
</UL>
<P><STRONG><a name="[2ec]"></a>DBP_Copy_chn_alarm</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, stg_set_databackup.o(i.DBP_Copy_chn_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = DBP_Copy_chn_alarm &rArr; STG_Read_alm_pwr &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_alm_pwr
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[2eb]"></a>DBP_Copy_chn_data</STRONG> (Thumb, 276 bytes, Stack size 80 bytes, stg_set_databackup.o(i.DBP_Copy_chn_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DBP_Copy_chn_data &rArr; STG_Read_rcd_by_time &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_time_2_u32
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_rcd_by_time
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_data_by_time
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[2ee]"></a>DBP_Copy_log</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, stg_set_databackup.o(i.DBP_Copy_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DBP_Copy_log &rArr; LOG_Read &rArr; LOG_Read_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Read
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Get_total_num
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Get_read_num
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[2ed]"></a>DBP_Copy_lost_power</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, stg_set_databackup.o(i.DBP_Copy_lost_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = DBP_Copy_lost_power &rArr; STG_Read_alm_pwr &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Read_alm_pwr
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Copy
</UL>

<P><STRONG><a name="[2f7]"></a>DBP_Default_file_name</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stg_set_databackup.o(i.DBP_Default_file_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DBP_Default_file_name &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_bacnup_Strategy_entry
</UL>

<P><STRONG><a name="[6e]"></a>DBP_Exit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stg_set_databackup.o(i.DBP_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DBP_Exit &rArr; PGB_Get_Sington &rArr; Progress_bar_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Del_event_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[2f9]"></a>DBP_Focus_file_name</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stg_set_databackup.o(i.DBP_Focus_file_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DBP_Focus_file_name &rArr; strcspn
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_key_rt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_key_lt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_get_focusdata
</UL>

<P><STRONG><a name="[2fa]"></a>DBP_Print_file_type</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stg_set_databackup.o(i.DBP_Print_file_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DBP_Print_file_type &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_bacnup_Strategy_entry
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_update_content
</UL>

<P><STRONG><a name="[f7]"></a>DBP_Usb_event</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stg_set_databackup.o(i.DBP_Usb_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DBP_Usb_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(i.DBP_init)
</UL>
<P><STRONG><a name="[66]"></a>DBP_build_component</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, stg_set_databackup.o(i.DBP_build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DBP_build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stripe_vy
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGB_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>DBP_commit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_set_databackup.o(i.DBP_commit))
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>DBP_filename_commit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stg_set_databackup.o(i.DBP_filename_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DBP_filename_commit
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(i.DBP_init)
</UL>
<P><STRONG><a name="[6c]"></a>DBP_get_focusdata</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stg_set_databackup.o(i.DBP_get_focusdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DBP_get_focusdata &rArr; DBP_Focus_file_name &rArr; strcspn
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Focus_file_name
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>DBP_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stg_set_databackup.o(i.DBP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DBP_init &rArr; HMI_Ram_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Rgt_event_hdl
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>DBP_key_dn</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stg_set_databackup.o(i.DBP_key_dn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DBP_key_dn &rArr; DBP_update_content &rArr; DBP_Print_file_type &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>DBP_key_er</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_set_databackup.o(i.DBP_key_er))
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>DBP_key_lt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stg_set_databackup.o(i.DBP_key_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DBP_key_lt &rArr; DBP_Focus_file_name &rArr; strcspn
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Focus_file_name
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>DBP_key_rt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stg_set_databackup.o(i.DBP_key_rt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DBP_key_rt &rArr; DBP_Focus_file_name &rArr; strcspn
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Focus_file_name
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>DBP_key_up</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stg_set_databackup.o(i.DBP_key_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DBP_key_up &rArr; DBP_update_content &rArr; DBP_Print_file_type &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[2fd]"></a>DBP_update_content</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stg_set_databackup.o(i.DBP_update_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DBP_update_content &rArr; DBP_Print_file_type &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Print_file_type
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_key_up
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_key_dn
</UL>

<P><STRONG><a name="[64]"></a>Data_bacnup_Strategy_entry</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, stg_set_databackup.o(i.Data_bacnup_Strategy_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Data_bacnup_Strategy_entry &rArr; Create_model &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Print_file_type
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBP_Default_file_name
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_databackup.o(.data)
</UL>
<P><STRONG><a name="[1b3]"></a>SYS_Btn_hdl</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stg_set_system.o(i.SYS_Btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SYS_Btn_hdl &rArr; SYS_Commit &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Commit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(i.SYS_build_component)
</UL>
<P><STRONG><a name="[79]"></a>SYS_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stg_set_system.o(i.SYS_Exit))
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>SYS_build_component</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stg_set_system.o(i.SYS_build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYS_build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>SysStrategy_entry</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, stg_set_system.o(i.SysStrategy_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SysStrategy_entry &rArr; Create_model &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_sys_param
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_update_syf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>Sys_commit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stg_set_system.o(i.Sys_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Sys_commit &rArr; LOG_Add &rArr; LOG_Write_flash &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Reset
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_set_password
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>Sys_get_focusdata</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stg_set_system.o(i.Sys_get_focusdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_get_focusdata
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>Sys_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stg_set_system.o(i.Sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_init &rArr; HMI_Ram_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>Sys_key_dn</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stg_set_system.o(i.Sys_key_dn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Sys_key_dn &rArr; Sys_update_content &rArr; Str_set_sys_param &rArr; Print_sys_param &rArr; Disable_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>Sys_key_er</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stg_set_system.o(i.Sys_key_er))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_key_er
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>Sys_key_lt</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stg_set_system.o(i.Sys_key_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sys_key_lt &rArr; Operate_in_tange
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_update_syf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>Sys_key_rt</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stg_set_system.o(i.Sys_key_rt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sys_key_rt &rArr; Operate_in_tange
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_update_syf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>Sys_key_up</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stg_set_system.o(i.Sys_key_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Sys_key_up &rArr; Sys_update_content &rArr; Str_set_sys_param &rArr; Print_sys_param &rArr; Disable_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_set_system.o(.data)
</UL>
<P><STRONG><a name="[467]"></a>Sys_update_content</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, stg_set_system.o(i.Sys_update_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Sys_update_content &rArr; Str_set_sys_param &rArr; Print_sys_param &rArr; Disable_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_set_sys_param
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_key_up
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_key_dn
</UL>

<P><STRONG><a name="[466]"></a>Sys_update_syf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stg_set_system.o(i.Sys_update_syf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_update_syf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_key_rt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_key_lt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysStrategy_entry
</UL>

<P><STRONG><a name="[7a]"></a>SPR_Entry</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stg_super_set.o(i.SPR_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPR_Entry &rArr; Print_sys_param &rArr; Disable_string &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_sys_param
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>SPR_build_component</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stg_super_set.o(i.SPR_build_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPR_build_component &rArr; BTN_Get_Sington &rArr; Button_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_Get_Sington
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>SPR_commit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stg_super_set.o(i.SPR_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPR_commit &rArr; Str_set_password &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_set_password
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>SPR_get_focusdata</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stg_super_set.o(i.SPR_get_focusdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPR_get_focusdata
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>SPR_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stg_super_set.o(i.SPR_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPR_init &rArr; HMI_Ram_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clone_psd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Ram_alloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>SPR_key_dn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stg_super_set.o(i.SPR_key_dn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPR_key_dn &rArr; SPR_update_content &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>SPR_key_er</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stg_super_set.o(i.SPR_key_er))
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>SPR_key_lt</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, stg_super_set.o(i.SPR_key_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPR_key_lt &rArr; Operate_in_tange
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_update_syf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>SPR_key_rt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stg_super_set.o(i.SPR_key_rt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPR_key_rt &rArr; Operate_in_tange
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_update_syf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>SPR_key_up</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stg_super_set.o(i.SPR_key_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPR_key_up &rArr; SPR_update_content &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_update_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[428]"></a>SPR_update_content</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stg_super_set.o(i.SPR_update_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPR_update_content &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_key_up
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_key_dn
</UL>

<P><STRONG><a name="[429]"></a>SPR_update_syf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stg_super_set.o(i.SPR_update_syf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPR_update_syf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_key_rt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPR_key_lt
</UL>

<P><STRONG><a name="[1b1]"></a>SYS_Btn_hdl</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stg_super_set.o(i.SYS_Btn_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SYS_Btn_hdl &rArr; SYS_Commit &rArr; Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Commit
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clone_psd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Win_content
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(i.SPR_build_component)
</UL>
<P><STRONG><a name="[84]"></a>SYS_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stg_super_set.o(i.SYS_Exit))
<BR>[Address Reference Count : 1]<UL><LI> stg_super_set.o(.data)
</UL>
<P><STRONG><a name="[175]"></a>MDL_Retry</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, model.o(i.MDL_Retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDL_Retry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Mdl_notify)
</UL>
<P><STRONG><a name="[3db]"></a>Cut_small_signal</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, model_channel.o(i.Cut_small_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cut_small_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
</UL>

<P><STRONG><a name="[3c7]"></a>MdlChn_Cancle_alarm</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, model_channel.o(i.MdlChn_Cancle_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MdlChn_Cancle_alarm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCH_Cancle_all_alarm
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Alarm
</UL>

<P><STRONG><a name="[3c9]"></a>MdlChn_Check_new_alarm</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, model_channel.o(i.MdlChn_Check_new_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MdlChn_Check_new_alarm &rArr; STG_Set_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_alm_pwr_num
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Alarm
</UL>

<P><STRONG><a name="[3d1]"></a>MdlChn_Get_def_lower_limit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Get_def_lower_limit))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[3d2]"></a>MdlChn_Get_def_up_limit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Get_def_up_limit))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[3cd]"></a>MdlChn_Init_alm_mgr_by_STG_alm</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_Init_alm_mgr_by_STG_alm))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MdlChn_Init_alm_mgr_by_STG_alm &rArr; STG_Get_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Get_alm_pwr_num
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[3d7]"></a>MdlChn_Save_2_alarm</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Save_2_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[3d6]"></a>MdlChn_Save_2_conf</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Save_2_conf))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[17e]"></a>MdlChn_getData</STRONG> (Thumb, 444 bytes, Stack size 72 bytes, model_channel.o(i.MdlChn_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MdlChn_getData &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_rd_signal_type
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read_DO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[17b]"></a>MdlChn_init</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, model_channel.o(i.MdlChn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MdlChn_init &rArr; MdlChn_Init_alm_mgr_by_STG_alm &rArr; STG_Get_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_conf
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_alarm
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Init_alm_mgr_by_STG_alm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[182]"></a>MdlChn_modify_sconf</STRONG> (Thumb, 732 bytes, Stack size 40 bytes, model_channel.o(i.MdlChn_modify_sconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MdlChn_modify_sconf &rArr; Print_float &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_touch_spot
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_float
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[17c]"></a>MdlChn_run</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, model_channel.o(i.MdlChn_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MdlChn_run &rArr; Signal_Alarm &rArr; MdlChn_Check_new_alarm &rArr; STG_Set_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zero_shift_K_B
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Alarm
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cut_small_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[17d]"></a>MdlChn_self_check</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, model_channel.o(i.MdlChn_self_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MdlChn_self_check &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Query
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[17f]"></a>MdlChn_setData</STRONG> (Thumb, 902 bytes, Stack size 88 bytes, model_channel.o(i.MdlChn_setData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MdlChn_setData &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_low_limit
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_hig_limit
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_DO_output
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Get_def_up_limit
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Get_def_lower_limit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[183]"></a>MdlChn_set_by_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_set_by_string))
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[181]"></a>MdlChn_to_percentage</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, model_channel.o(i.MdlChn_to_percentage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MdlChn_to_percentage &rArr; MdlChn_Cal_prc
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cal_prc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[180]"></a>MdlChn_to_string</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, model_channel.o(i.MdlChn_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_to_string &rArr; Print_float &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_unit
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_touch_spot
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_singnaltype
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_float
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[451]"></a>Percent_to_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, model_channel.o(i.Percent_to_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Percent_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Alarm
</UL>

<P><STRONG><a name="[3dc]"></a>Signal_Alarm</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, model_channel.o(i.Signal_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Signal_Alarm &rArr; MdlChn_Check_new_alarm &rArr; STG_Set_alm_pwr_num &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Percent_to_data
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cancle_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
</UL>

<P><STRONG><a name="[3da]"></a>Zero_shift_K_B</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, model_channel.o(i.Zero_shift_K_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Zero_shift_K_B
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
</UL>

<P><STRONG><a name="[179]"></a>MdlTime_set_by_string</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, modeltime.o(i.MdlTime_set_by_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MdlTime_set_by_string &rArr; Get_str_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_str_data
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_set_time
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[17a]"></a>MdlTime_to_string</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, modeltime.o(i.MdlTime_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MdlTime_to_string &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modeltime.o(i.ModelTime_ctor)
</UL>
<P><STRONG><a name="[e8]"></a>CtlKey_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ctlkey.o(i.CtlKey_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CtlKey_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctlkey.o(i.CtlKey_ctor)
</UL>
<P><STRONG><a name="[e9]"></a>KeyUpdate</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ctlkey.o(i.KeyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctlkey.o(i.CtlKey_ctor)
</UL>
<P><STRONG><a name="[228]"></a>Ctime_periodic</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, ctltimer.o(i.Ctime_periodic))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Ctime_periodic &rArr; CNA_Run &rArr; CNA_Commit &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Read_code_end_temperature
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_model
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNA_Run
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctltimer.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>Init_ctime</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ctltimer.o(i.Init_ctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init_ctime &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctime_Allco_time
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctltimer.o(i.CtlTimer_ctor)
</UL>
<P><STRONG><a name="[286]"></a>CH376DiskReqSense</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ch376.o(i.CH376DiskReqSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376DiskReqSense &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
</UL>

<P><STRONG><a name="[28d]"></a>CH376GetIntStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ch376.o(i.CH376GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376DiskConnect
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376_intr
</UL>

<P><STRONG><a name="[28f]"></a>CH376ReadVar8</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ch376.o(i.CH376ReadVar8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH376ReadVar8 &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
</UL>

<P><STRONG><a name="[288]"></a>CH376SendCmdDatWaitInt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ch376.o(i.CH376SendCmdDatWaitInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376SendCmdDatWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376_Set_Data_Time
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileClose
</UL>

<P><STRONG><a name="[284]"></a>CH376SendCmdWaitInt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ch376.o(i.CH376SendCmdWaitInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376DiskConnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376_Set_Data_Time
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpen
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileCreate
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskQuery
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskMount
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskReqSense
</UL>

<P><STRONG><a name="[28a]"></a>CH376SetFileName</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ch376.o(i.CH376SetFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH376SetFileName &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpen
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileCreate
</UL>

<P><STRONG><a name="[290]"></a>CH376WriteHostBlock</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ch376.o(i.CH376WriteHostBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH376WriteHostBlock &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
</UL>

<P><STRONG><a name="[291]"></a>CH376WriteOfsBlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ch376.o(i.CH376WriteOfsBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH376WriteOfsBlock &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376_Set_Data_Time
</UL>

<P><STRONG><a name="[282]"></a>CH376WriteReqBlock</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ch376.o(i.CH376WriteReqBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH376WriteReqBlock &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteWrite
</UL>

<P><STRONG><a name="[28c]"></a>CH376WriteVar32</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ch376.o(i.CH376WriteVar32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH376WriteVar32 &rArr; xWriteCH376Data_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Data_u32
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376FileOpen
</UL>

<P><STRONG><a name="[162]"></a>Ch376_intr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ch376.o(i.Ch376_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ch376_intr &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch376.o(i.Init_Ch376)
</UL>
<P><STRONG><a name="[496]"></a>Query376Interrupt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ch376.o(i.Query376Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Query376Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
</UL>

<P><STRONG><a name="[281]"></a>Wait376Interrupt</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ch376.o(i.Wait376Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query376Interrupt
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteWrite
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdDatWaitInt
</UL>

<P><STRONG><a name="[280]"></a>xWriteCH376Cmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ch376.o(i.xWriteCH376Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskQuery
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ByteWrite
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteVar32
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteReqBlock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteOfsBlock
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteHostBlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SetFileName
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdDatWaitInt
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadVar8
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>

<P><STRONG><a name="[292]"></a>xWriteCH376Data_u32</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ch376.o(i.xWriteCH376Data_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xWriteCH376Data_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteVar32
</UL>

<P><STRONG><a name="[1cd]"></a>Deal_status</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb.o(i.Deal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Deal_status &rArr; CQ_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Create_file
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Colse_file
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(i.USB_Init)
</UL>
<P><STRONG><a name="[470]"></a>Last_name_offset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb.o(i.Last_name_offset))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Create_file
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open_file
</UL>

<P><STRONG><a name="[421]"></a>Reset_Ch376</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb.o(i.Reset_Ch376))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Reset_Ch376 &rArr; mInitCH376Host &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_fail
</UL>

<P><STRONG><a name="[87]"></a>Usb_deal_fail</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb.o(i.Usb_deal_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Usb_deal_fail &rArr; Reset_Ch376 &rArr; mInitCH376Host &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Ch376
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>Usb_deal_identify</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, usb.o(i.Usb_deal_identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Usb_deal_identify &rArr; CH376DiskQuery &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskQuery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>Usb_deal_insert</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, usb.o(i.Usb_deal_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Usb_deal_insert &rArr; Ch376DiskConnect &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376DiskConnect
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskMount
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>Usb_deal_remove</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usb.o(i.Usb_deal_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usb_deal_remove &rArr; CQ_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[1c2]"></a>UHI_intr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usb_hardware_interface.o(i.UHI_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UHI_intr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1cb]"></a>UHI_usb_cs_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_hardware_interface.o(i.UHI_usb_cs_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UHI_usb_cs_off
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1cc]"></a>UHI_usb_cs_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_hardware_interface.o(i.UHI_usb_cs_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UHI_usb_cs_on
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1c7]"></a>UHI_usb_delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_hardware_interface.o(i.UHI_usb_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UHI_usb_delay_ms &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1ca]"></a>UHI_usb_get_time</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, usb_hardware_interface.o(i.UHI_usb_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UHI_usb_get_time &rArr; System_time
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1c3]"></a>UHI_usb_power</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_hardware_interface.o(i.UHI_usb_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UHI_usb_power
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1c9]"></a>UHI_usb_read_bytes</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_hardware_interface.o(i.UHI_usb_read_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UHI_usb_read_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1c6]"></a>UHI_usb_read_intr_pin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_hardware_interface.o(i.UHI_usb_read_intr_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UHI_usb_read_intr_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1c4]"></a>UHI_usb_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_hardware_interface.o(i.UHI_usb_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UHI_usb_reset &rArr; UHI_usb_delay_ms &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_delay_ms
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UHI_usb_cs_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1c5]"></a>UHI_usb_set_irq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_hardware_interface.o(i.UHI_usb_set_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UHI_usb_set_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[1c8]"></a>UHI_usb_write_bytes</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_hardware_interface.o(i.UHI_usb_write_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UHI_usb_write_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_hardware_interface.o(i.UHI_Init)
</UL>
<P><STRONG><a name="[32b]"></a>EFS_Cal_free_space</STRONG> (Thumb, 412 bytes, Stack size 36 bytes, easy_fs.o(i.EFS_Cal_free_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EFS_Cal_free_space
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[334]"></a>EFS_Change_file_size</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, easy_fs.o(i.EFS_Change_file_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFS_Change_file_size
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
</UL>

<P><STRONG><a name="[335]"></a>EFS_Erase</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, easy_fs.o(i.EFS_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFS_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_run
</UL>

<P><STRONG><a name="[110]"></a>EFS_Flush</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EFS_Flush &rArr; Cmd_Rgt_time_task &rArr; SYS_time_sec &rArr; Time_2_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Rgt_time_task
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_wr_position
</UL>
<BR>[Address Reference Count : 2]<UL><LI> easy_fs.o(i.EFS_Flush)
<LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[326]"></a>EFS_Init_file_sem</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_Init_file_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EFS_Init_file_sem &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_open
</UL>

<P><STRONG><a name="[32a]"></a>EFS_Regain_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, easy_fs.o(i.EFS_Regain_space))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[329]"></a>EFS_create_file</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, easy_fs.o(i.EFS_create_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EFS_create_file &rArr; EFS_Cal_free_space
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_mgr
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_file_mgr_info
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Regain_space
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Cal_free_space
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_open
</UL>

<P><STRONG><a name="[32d]"></a>EFS_file_mgr_info</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, easy_fs.o(i.EFS_file_mgr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFS_file_mgr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_search_file
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[327]"></a>EFS_flush_mgr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_flush_mgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFS_flush_mgr
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Raw_write
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_wr_position
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_create_file
</UL>

<P><STRONG><a name="[325]"></a>EFS_flush_wr_position</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_flush_wr_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFS_flush_wr_position &rArr; EFS_flush_mgr
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_flush_mgr
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_close
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Flush
</UL>

<P><STRONG><a name="[332]"></a>EFS_format</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFS_format
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_init
</UL>

<P><STRONG><a name="[333]"></a>EFS_malloc_file_mgr</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, easy_fs.o(i.EFS_malloc_file_mgr))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_open
</UL>

<P><STRONG><a name="[11d]"></a>EFS_run</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, easy_fs.o(i.EFS_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFS_run &rArr; EFS_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easy_fs.o(i.EFS_init)
</UL>
<P><STRONG><a name="[32e]"></a>EFS_search_file</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, easy_fs.o(i.EFS_search_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFS_search_file &rArr; EFS_file_mgr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_file_mgr_info
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_resize
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFS_delete
</UL>

<P><STRONG><a name="[443]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[444]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[4af]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[4df]"></a>rt_ms2tick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[4e7]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[4e9]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[4e8]"></a>rt_timer_remove</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_timer_remove))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[4c4]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[49f]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$8
</UL>

<P><STRONG><a name="[4a4]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a3]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d4]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[1d5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[4a2]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
